
&НаКлиенте
Процедура ВнедритьИзФайла(Команда)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКМодели;
	ПутьКФайлу=ПутьКМодели;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	Фильтр = "JSON и HDF5 (*.json;*.h5)|*.json;*.h5|JavaScript Object Notation (*.json)|*.json|Hierarchical Data Format v5 (*.h5)|*.h5";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите файл модели";	
	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаJSON", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаJSON(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ПутьКМодели = ВыбранныеФайлы[0];
	
	Файл = Новый Файл(ПутьКМодели);
	Если Файл.Расширение=".json" Тогда
		Текст = Новый ЧтениеТекста(ПутьКМодели);
		СтрокаJSON = Текст.Прочитать();
		Если СтрокаJSON<>Неопределено И СтрДлина(СтрокаJSON)>0 Тогда
			Объект.ТекстМоделиJSON=СтрокаJSON;
		Иначе
			Сообщить("Не удалось прочитать текст из файла!");
			Возврат;
		КонецЕсли;
		Модифицированность=Истина;
		ИмпортироватьМодель();
	ИначеЕсли Файл.Расширение=".h5" Тогда
		Доп=Новый Структура("Имя, Приемник, ФайлМодели", "Models", "КаталогВыполнения", ВыбранныеФайлы[0]);
		Оп = Новый ОписаниеОповещения("ПродолжитьЗагрузкуМодели", ЭтотОбъект, Доп);
		Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьМодельИзСтрокиJSON()
	Дерево = РеквизитФормыВЗначение("ДЗ");
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSON(Объект.ТекстМоделиJSON, Дерево);
	ЗначениеВРеквизитФормы(Дерево,"ДЗ");
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ОбработатьМодельИзСтрокиJSON(ЭтаФорма, Объект.ТекстМоделиJSON);
КонецПроцедуры

&НаСервере
Функция ПеребратьОбъектJSON()
	Дерево = РеквизитФормыВЗначение("ДЗ");
	Возврат Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSON(Дерево);
КонецФункции

&НаКлиенте
Процедура ПродолжитьЗагрузкуМодели(Результат, ДополнительныеПараметры) Экспорт
	Файл = Новый Файл(ДополнительныеПараметры.ФайлМодели);
	
	ПрефиксИмени = "ModelFromh5_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	ИмяФайлаМодели = ПрефиксИмени+"_"+Файл.ИмяБезРасширения+".json";
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлМодели", ИмяФайлаМодели);

	ТекстПрограммы=СформироватьТекстПрограммыИмпортМодели(ДополнительныеПараметры.ФайлМодели, СтруктураПараметров);
	
	Оп = Новый ОписаниеОповещения("ЗагрузитьМодельЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", КаталогВыполнения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	//ДопПараметры.Вставить("ФайлРезультатов", ДополнительныеПараметры.ФайлМодели);
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМодельЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ФайлМодели);
	СтрокаJSON = Текст.Прочитать();
	Текст.Закрыть();
	
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлМодели);
	КонецЕсли;
	
	Если СтрокаJSON<>Неопределено И СтрДлина(СтрокаJSON)>0 Тогда
		Объект.ТекстМоделиJSON=СтрокаJSON;
	Иначе
		Сообщить("Не удалось прочитать текст из файла!");
		Возврат;
	КонецЕсли;
	Модифицированность=Истина;
	ИмпортироватьМодель();
КонецПроцедуры

&НаСервере
Процедура ИмпортироватьМодель()
	Объект.Слои.Очистить();
	Объект.Входы.Очистить();
	Объект.Выходы.Очистить();
	Объект.Входящие.Очистить();
	Объект.Формы.Очистить();
	ДЗ.ПолучитьЭлементы().Очистить();
	
	Дерево = РеквизитФормыВЗначение("ДЗ");
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	ЧислоСлоев = СправочникОбъект.ИмпортироватьМодель(Объект, ЭтаФорма, Дерево);
	Если ЧислоСлоев>0 Тогда
		ВызватьИсключение("Количество слоев в модели ("+СокрЛП(ЧислоСлоев)+
							") привысило максимально допустимое для демонстрационной версии (7)!");
	Иначе
		ЗначениеВРеквизитФормы(Дерево,"ДЗ");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПрограммыИмпортМодели(ФайлИсточник, Параметры)
	ДокОбъект=РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.СформироватьТекстПрограммыИмпортМодели(ФайлИсточник, Параметры);
КонецФункции

&НаКлиенте
Процедура ПрочитатьМодельИзJSON(ПутьКФайлу)
	Текст = Новый ЧтениеТекста(ПутьКФайлу+"model.json");
	СтрокаJSON = Текст.Прочитать();
	Если СтрокаJSON<>Неопределено И СтрДлина(СтрокаJSON)>0 Тогда
		Объект.ТекстМоделиJSON=СтрокаJSON;
		//Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлоиПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент=Элементы.СлоиТренируемый Тогда Возврат КонецЕсли;
	СтруктураМодели1 = НайтиСлойВДеревеПоИмениИПеребратьОбъектJSON(Элементы.Слои.ТекущиеДанные.Имя);
	СтруктураТекущегоСлоя = Неопределено;
	Для Каждого СтруктураСлоя Из СтруктураМоделиПреобразованная.Слои Цикл
		Если СтруктураСлоя.Имя = Элементы.Слои.ТекущиеДанные.Имя Тогда
			СтруктураТекущегоСлоя = СтруктураСлоя;
			Прервать
		КонецЕсли;
	КонецЦикла;
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("ТекстМоделиJSON", Объект.ТекстМоделиJSON);
	Если СтруктураМодели1.class_name="Model" Тогда
		ПараметрыД.Вставить("СтруктураМодели", СтруктураМодели1);
		ПараметрыД.Вставить("СтруктураПреобразованная", СтруктураТекущегоСлоя);
		ПараметрыД.Вставить("Путь", "");
	ИначеЕсли ЭтоОболочка(СтруктураМодели1.class_name) Тогда 
		ПараметрыД.Вставить("СтруктураМодели", СтруктураМодели1.config.layer);
		ПараметрыД.Вставить("СтруктураПреобразованная", СтруктураТекущегоСлоя);
		ПараметрыД.Вставить("Путь", СтруктураМодели1.name);
	Иначе
		Если Элемент.ТекущийЭлемент=Элементы.СлоиТипСлоя Тогда
			СлоиСсылка = ОпределитьСлойПоТипу(Элементы.Слои.ТекущиеДанные.ТипСлоя);
			Если Не СлоиСсылка.Пустая() Тогда
				парам = новый Структура;
				парам.вставить("Ключ",СлоиСсылка);
				ОткрытьФорму("Справочник.Нейро_Слои.ФормаОбъекта",парам);
			КонецЕсли;
		КонецЕсли;
		Отказ=Истина; Возврат 
	КонецЕсли;
	Отказ=Истина;
	ОткрытьФорму("Справочник.Нейро_ПодключенныеМодели.Форма.ФормаПросмотраМодели", ПараметрыД, ЭтотОбъект, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ОпределитьСлойПоТипу(ТипСлоя)
	Возврат Справочники.Нейро_Слои.НайтиПоРеквизиту("ТипСлоя", ТипСлоя);
КонецФункции
	
&НаСервере
Функция СформироватьПредставленияПараметров(СтруктураСлоя)
	
КонецФункции

&НаСервере
Функция НайтиСлойВДеревеПоИмениJSON(Имя)
	Дерево = РеквизитФормыВЗначение("ДЗ");
	Возврат Нейро_СозданиеМоделиНаСервере.НайтиСлойВДеревеПоИмениJSON(Дерево, Имя);
КонецФункции

&НаСервере
Функция НайтиСлойВДеревеПоИмениИПеребратьОбъектJSON(Имя)
	Дерево = РеквизитФормыВЗначение("ДЗ");
	СтрокаДзТек=Нейро_СозданиеМоделиНаСервере.НайтиСлойВДеревеПоИмениJSON(Дерево, Имя);
	Если СтрокаДзТек=Неопределено Тогда Возврат СтрокаДзТек КонецЕсли;
	Возврат Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSON(СтрокаДзТек);
КонецФункции

&НаКлиенте
Функция ЭтоОболочка(ИдСлоя) Экспорт
	//ТипыСлоевОболочки=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(Перечисления.Нейро_ВидыСлоев.LayerWrappers);
	ТипыСлоевОболочки=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.LayerWrappers"));
	
	ЭтоОболочка=Ложь;
	Для Каждого Элемент Из ТипыСлоевОболочки Цикл
		Если ИдСлоя=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ТипыСлоев", Элемент.Значение) Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		ТекстСообщения=Неопределено;
		Если ВыбранноеЗначение.Свойство("Сообщение", ТекстСообщения) Тогда
			Если ТекстСообщения = "Сменить текущую страницу" Тогда
				Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы[ВыбранноеЗначение.ИмяСтраницы];
			ИначеЕсли ВыбранноеЗначение.Сообщение="ТекстМоделиJSON" Тогда
				Объект.ТекстМоделиJSON=ВыбранноеЗначение.Текст;
				Модифицированность=Истина;
				ДЗ.ПолучитьЭлементы().Очистить();
				ОбработатьМодельИзСтрокиJSON();
				СтруктураМодели = ПеребратьОбъектJSON();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ТекстМоделиJSON") Тогда
		Объект.ТекстМоделиJSON = Параметры.ТекстМоделиJSON;
	КонецЕсли;
	НеЗаполнятьПриОткрытии = НЕ Параметры.ЗначениеКопирования.Пустая();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.Ключ.Пустая() Тогда 
		Если Объект.ТекстМоделиJSON<>"" Тогда
			Если Не НеЗаполнятьПриОткрытии Тогда
				ИмпортироватьМодель();
			Иначе
				ОбработатьМодельИзСтрокиJSON();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбработатьМодельИзСтрокиJSON();
	КонецЕсли;
	
	СтруктураМодели = ПеребратьОбъектJSON();
	
	ОтображениеПараметровПриИзменении(Элементы.ОтображениеПараметров);
	
	Нейро_РаботаСФайлами.ПолучитьКаталогНейроконструктора(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКопию(Команда)
	Текст=ПолучитьКопиюНаСервере();
	
	ПараметрыФормы = Новый Структура("ТекстМоделиJSON", Текст);
	ОткрытьФорму("Справочник.Нейро_ПодключенныеМодели.Форма.ФормаЭлемента",ПараметрыФормы,ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКопиюНаСервере()
	Возврат Нейро_СозданиеМоделиНаСервере.ПрочитатьЗаписатьJSONНаСервере(Объект.ТекстМоделиJSON)
КонецФункции

&НаСервере 
Функция ИзДереваНаСервере()
	Дерево = РеквизитФормыВЗначение("ДЗ");
	Текст = Нейро_СозданиеМоделиНаСервере.СформироватьСтрокуJSONИзДереваНаСервере(Дерево);
	Возврат Текст;
КонецФункции

&НаКлиенте
Процедура СлоиПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Для Каждого СтруктураСлоя Из СтруктураМодели.config.layers Цикл
		Если Элемент.ТекущиеДанные.Имя=СтруктураСлоя.name Тогда
			Элементы.СлоиТренируемый.ТолькоПросмотр = НЕ СтруктураСлоя.config.Свойство("trainable");
			Прервать
		КонецЕсли;
	КонецЦикла;
	ПредставлениеПараметров.Очистить();
	Для Каждого СтруктураСлоя Из СтруктураМоделиПреобразованная.Слои Цикл
		Если Элемент.ТекущиеДанные.Имя=СтруктураСлоя.Имя Тогда
			Если СтруктураСлоя.Свойство("ПараметрыТекст") Тогда
				Для Каждого Тексты Из СтруктураСлоя.ПараметрыТекст Цикл
					СтрокаП = ПредставлениеПараметров.Добавить();
					СтрокаП.Анг = Тексты.Анг; 
					СтрокаП.Рус = Тексты.Рус; 
				КонецЦикла;
			КонецЕсли;
			//Если ТипЗнч(СтруктураСлоя.ТипСлоя)=Тип("ПеречислениеСсылка.Нейро_ТипыСлоев") Тогда
			//	МассивПараметров = Нейро_ОбщийМодуль.ПолучитьПараметрыСлоя(СтруктураСлоя.ТипСлоя);
			//Иначе
			//КонецЕсли;
			Прервать
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СлоиТренируемыйПриИзменении(Элемент)
	СлоиТренируемыйПриИзмененииНаСервере(Элементы.Слои.ТекущиеДанные.Имя, Элементы.Слои.ТекущиеДанные.Тренируемый)
КонецПроцедуры

&НаСервере
Процедура СлоиТренируемыйПриИзмененииНаСервере(ИмяСлоя, НовоеЗначение)
	СтруктураМодели1 = ПеребратьОбъектJSON();
	Дерево = РеквизитФормыВЗначение("ДЗ");
	СтрокаДерева=Нейро_СозданиеМоделиНаСервере.НайтиТекущийСлойВДеревеНаСервере(Дерево, "", ИмяСлоя, "trainable");
	СтрокаДерева.Значение = НовоеЗначение;
	Объект.ТекстМоделиJSON=Нейро_СозданиеМоделиНаСервере.СформироватьСтрокуJSONИзДереваНаСервере(Дерево)
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница=Элементы.ГруппаСводка Тогда
		ТекстМоделиJSON_Просмотр.УстановитьТекст(ИзДереваНаСервере());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиаграмму(Команда)
	Доп=Новый Структура("Имя, Приемник", "Models", "КаталогВыполнения");
	Оп = Новый ОписаниеОповещения("ПоказатьДиаграммуПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиаграммуПродолжить(Результат, ДополнительныеПараметры) Экспорт
	ПрефиксИмени = "plot_model_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	//ИмяФайлаМодели = ПрефиксИмени+"_"+Объект.ИмяМодели+".json";
	//ИмяФайлаДиаграммы = ПрефиксИмени+"_"+Объект.ИмяМодели+".png";
	ИмяФайлаМодели = "plot_model_"+Объект.ИмяМодели+".json";
	ИмяФайлаДиаграммы = "plot_model_"+Объект.ИмяМодели+".png";
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлРезультатов", ИмяФайлаДиаграммы);
	СтруктураПараметров.Вставить("ФайлМодели", ИмяФайлаМодели);
	
	//МасНомераСтрок=Новый Массив;
	
	ТекстПрограммы=СформироватьТекстПрограммыДиаграммыМодели(СтруктураПараметров);
	//Объект.ТекстПрограммы = ТекстПрограммы;
	
	//НомераСтрок.Очистить();
	//Для Каждого СтруктураНомера Из МасНомераСтрок Цикл
	//	НоваяСтрока = НомераСтрок.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНомера);
	//КонецЦикла;
	
	ПутьКФайлуМодели = КаталогВыполнения+ИмяФайлаМодели;
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуМодели, КодировкаТекста.ANSI);
	//ЗаписьТекста.Записать(Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Объект.Модель,"ТекстМоделиJSON"));
	ЗаписьТекста.Записать(Объект.ТекстМоделиJSON);
	ЗаписьТекста.Закрыть();	
	
	
	Оп = Новый ОписаниеОповещения("ПоказатьДиаграммуЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", КаталогВыполнения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПрограммыДиаграммыМодели(Параметры)
	ДокОбъект=РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.СформироватьТекстПрограммыДиаграммыМодели(Параметры);
КонецФункции

&НаКлиенте
Процедура ПоказатьДиаграммуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлМодели);
	КонецЕсли;
	//ДопПараметры = Новый Структура("Путь, Файл", Результат, ДополнительныеПараметры.ФайлРезультатов);
	//ОповещениеПослеПоказа = Новый ОписаниеОповещения("ПослеПоказаДиаграммы", ЭтотОбъект, ДопПараметры);
	//НачатьЗапускПриложения(ОповещениеПослеПоказа, Результат+ДополнительныеПараметры.ФайлРезультатов,,Истина);
	НачатьЗапускПриложения(Новый ОписаниеОповещения, Результат+ДополнительныеПараметры.ФайлРезультатов);
КонецПроцедуры

//&НаКлиенте
//Процедура ПослеПоказаДиаграммы(Результат, ДополнительныеПараметры) Экспорт
//	НачатьУдалениеФайлов(Новый ОписаниеОповещения, ДополнительныеПараметры.Путь, ДополнительныеПараметры.Файл);
//КонецПроцедуры

&НаКлиенте
Процедура ОшибкаВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПараметровПриИзменении(Элемент)
	Если ОтображениеПараметров=0 Тогда
		Элементы.ПредставлениеПараметровРус.Видимость=Истина;
		Элементы.ПредставлениеПараметровАнг.Видимость=Ложь;
		Элементы.СлоиТипСлоя.Видимость=Истина;
		Элементы.СлоиИдСлоя.Видимость=Ложь;
	ИначеЕсли ОтображениеПараметров=1 Тогда
		Элементы.ПредставлениеПараметровРус.Видимость=Ложь;
		Элементы.ПредставлениеПараметровАнг.Видимость=Истина;
		Элементы.СлоиТипСлоя.Видимость=Ложь;
		Элементы.СлоиИдСлоя.Видимость=Истина;
	ИначеЕсли ОтображениеПараметров=2 Тогда
		Элементы.ПредставлениеПараметровРус.Видимость=Истина;
		Элементы.ПредставлениеПараметровАнг.Видимость=Истина;
		Элементы.СлоиТипСлоя.Видимость=Истина;
		Элементы.СлоиИдСлоя.Видимость=Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИмяМоделиПриИзменении(Элемент)
	ИмяМоделиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИмяМоделиПриИзмененииНаСервере()
	Дерево = РеквизитФормыВЗначение("ДЗ");
	//СтруктураМодели1 = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSON(Дерево);
	СтрокаДерева=Нейро_СозданиеМоделиНаСервере.НайтиСтрокуИмяМоделиНаСервере(Дерево);
	Если СтрокаДерева<>Неопределено Тогда
		СтрокаДерева.Значение = Объект.ИмяМодели;
		Объект.ТекстМоделиJSON=Нейро_СозданиеМоделиНаСервере.СформироватьСтрокуJSONИзДереваНаСервере(Дерево);
		ДЗ.ПолучитьЭлементы().Очистить();
		ОбработатьМодельИзСтрокиJSON();
		ТекстМоделиJSON_Просмотр.УстановитьТекст(Объект.ТекстМоделиJSON);
	КонецЕсли;
КонецПроцедуры

