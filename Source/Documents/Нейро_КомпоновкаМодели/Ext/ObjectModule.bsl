Перем ДеревоJSON Экспорт;
Перем СтруктураДереваJSON Экспорт;
Перем СтруктураМодели Экспорт;

&НаСервере
Функция ПостроитьДеревоМоделиНаСервере(ТекстМоделиJSON) Экспорт
	Результат = Новый Структура("Ошибка, Сообщение", Ложь, "");
	
	ДеревоJSON.Строки.Очистить();
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(ТекстМоделиJSON, ДеревоJSON); //Заполняет ДеревоJSON
	СтруктураДереваJSON = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON); //Преобразует ДеревоJSON в СтруктураДереваJSON с сохранением построения
	Если СтруктураДереваJSON.Свойство("class_name") Тогда
		Если СтруктураДереваJSON.class_name<>"Model" Тогда
			Результат.Ошибка = Истина;
			Результат.Сообщение = "Неверный класс объекта: "+Символ(34)+СтруктураДереваJSON.class_name+Символ(34);
			Возврат Результат
		КонецЕсли;
	Иначе
		Результат.Ошибка = Истина;
		Результат.Сообщение = "Не удалось определить класс объекта!";
		Возврат Результат
	КонецЕсли;
	СтруктураМодели=Новый Структура("Слои, Входы, Выходы, Формы, Входящие");
	СтруктураМодели.Слои     = Новый Массив;
	СтруктураМодели.Входы    = Новый Массив;
	СтруктураМодели.Выходы   = Новый Массив;
	СтруктураМодели.Формы    = Новый Массив;
	СтруктураМодели.Входящие = Новый Массив;
	Нейро_СозданиеМоделиНаСервере.ПеребратьМодельИзСтруктурыJSONНаСервере(СтруктураМодели, СтруктураДереваJSON.config); //Из СтруктураДереваJSON создает СтруктураМодели с преобразованиями
	
	Результат=Новый Структура;
	Результат.Вставить("ДеревоJSON", ДеревоJSON);
	Результат.Вставить("СтруктураДереваJSON", СтруктураДереваJSON);
	Результат.Вставить("СтруктураМодели", СтруктураМодели);
	
	Возврат Результат
КонецФункции

&НаСервере
Функция ЗаполнитьСлоиНаСервере(Объект, СтруктураМодели, МассивМоделей) Экспорт
	МассивОшибок = Новый Массив;
	Для Каждого СтруктураСлой Из СтруктураМодели.Слои Цикл
		
		ТипыСлоевОболочки=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(Перечисления.Нейро_ВидыСлоев.LayerWrappers);
		ЭтоОболочка=ТипыСлоевОболочки.НайтиПоЗначению(СтруктураСлой.ТипСлоя)<>Неопределено;
		
		НовыйСлой = Объект.Слои.Добавить();
		Если ТипЗнч(СтруктураСлой.ТипСлоя)=Тип("ПеречислениеСсылка.Нейро_ТипыСлоев") Тогда
			Слой=Справочники.Нейро_Слои.НайтиПоРеквизиту("ТипСлоя",СтруктураСлой.ТипСлоя);
			Если Слой.Пустая() Тогда
				Слой=СоздатьНовыйЭлементСлои(СтруктураСлой.ТипСлоя);
			КонецЕсли;
			НовыйСлой.Слой=Слой;
		Иначе
			Для Каждого МодельСсылка Из МассивМоделей Цикл
				Если МодельСсылка.ИмяМодели=СтруктураСлой.Имя Тогда
					НовыйСлой.Слой = МодельСсылка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СлоиСлойПриИзменении(Объект, НовыйСлой, СтруктураСлой);
		Если ТипЗнч(НовыйСлой.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
			ЗаполнитьПараметрыСлоя(Объект, НовыйСлой, СтруктураСлой);
		КонецЕсли;
		Если СтруктураСлой.Тренируемый<>Неопределено Тогда
			НовыйСлой.Тренируемый = СтруктураСлой.Тренируемый;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКомпозии Из СтруктураМодели.Входящие Цикл
		НоваяСтрока = Объект.Композиция.Добавить();
		НоваяСтрока.Исходящий = СтрокаКомпозии.ИмяИсходящего;
		НоваяСтрока.Входящий = СтрокаКомпозии.ИмяВходящего;
	КонецЦикла;
	Возврат МассивОшибок;
КонецФункции

Функция СоздатьНовыйЭлементСлои(ТипСлоя)
	ВидСлоя = Неопределено;
	Для Каждого СледВидСлоя Из Перечисления.Нейро_ВидыСлоев Цикл
		СписокТиповСлоев = Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(СледВидСлоя);
		Если СписокТиповСлоев.НайтиПоЗначению(ТипСлоя)<>Неопределено Тогда
			ВидСлоя=СледВидСлоя; Прервать
		КонецЕсли;
	КонецЦикла;
	НовыйСлой=Справочники.Нейро_Слои.СоздатьЭлемент();
	НовыйСлой.ВидСлоя = ВидСлоя;
	НовыйСлой.ТипСлоя = ТипСлоя;
	НовыйСлой.ИдОбъекта=Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыСлоев", ТипСлоя);
	НовыйСлой.Наименование = СокрЛП(ТипСлоя);
	Если НовыйСлой.Наименование = "" Тогда НовыйСлой.Наименование = "<???>" КонецЕсли;
	НовыйСлой.Записать();
	Возврат НовыйСлой.Ссылка
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыСлоя(Объект, НовыйСлой, СтруктураСлой)
	Для Каждого Параметр Из СтруктураСлой.Параметры Цикл
		Если Параметр.Ключ="batch_input_shape" Тогда
			Отбор=Новый Структура("ИмяСлоя, Ид", НовыйСлой.ИмяУникальное, "batch_shape");
			СтрокаПараметр = Объект.ПараметрыСлоя.НайтиСтроки(Отбор)[0];
			СтрокаПараметр.Значение=Нейро_СозданиеМоделиНаСервере.НайтиСоздатьНейро_Массив(Параметр.Значение, Перечисления.Нейро_ТипыСписков.Кортеж);
		ИначеЕсли Параметр.Ключ="dtype" Тогда
			Отбор=Новый Структура("ИмяСлоя, Ид", НовыйСлой.ИмяУникальное, Параметр.Ключ);
			СтрокиПараметров = Объект.ПараметрыСлоя.НайтиСтроки(Отбор);
			//СтрокаПараметр = Объект.ПараметрыСлоя.НайтиСтроки(Отбор)[0];
			Если СтрокиПараметров.Количество()>0 Тогда
				СтрокаПараметр = СтрокиПараметров[0];
				СтрокаПараметр.Значение = СтруктураСлой.Тип;
			КонецЕсли;
		ИначеЕсли Параметр.Ключ="layer" Тогда
			Отбор=Новый Структура("ИмяСлоя, Ид", НовыйСлой.ИмяУникальное, Параметр.Ключ);
			СтрокаПараметр = Объект.ПараметрыСлоя.НайтиСтроки(Отбор)[0];
			СтрокаПараметр.Значение = Параметр.Значение.Имя;
		Иначе
			Отбор=Новый Структура("ИмяСлоя, Ид", НовыйСлой.ИмяУникальное, Параметр.Ключ);
			СтрокаПараметр = Объект.ПараметрыСлоя.НайтиСтроки(Отбор)[0];
			Если ТипЗнч(Параметр.Значение)=Тип("Структура") Тогда
				Если Параметр.Значение.Свойство("class_name") Тогда
					
				ИначеЕсли Параметр.Значение.Свойство("Объект") Тогда
					СтрокаПараметр.Значение=Нейро_СозданиеМоделиНаСервере.НайтиСоздатьНейро_Функцию(СтрокаПараметр.Тип, Параметр.Значение.Объект, Параметр.Значение.Параметры);
					//СтрокаПараметр.Тип = Перечисления.Нейро_Типы.Функция;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметр.Значение)=Тип("Массив") Тогда
				СтрокаПараметр.Значение=Нейро_СозданиеМоделиНаСервере.НайтиСоздатьНейро_Массив(Параметр.Значение, Перечисления.Нейро_ТипыСписков.Кортеж, СтрокаПараметр.Тип);
			Иначе
				СтрокаПараметр.Значение = Параметр.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СлоиСлойПриИзменении(Объект, НовыйСлой, СтруктураСлой)
	Имя = СтруктураСлой.Имя;
	ИмяУникальное = Имя+"_";
	Отбор = Новый Структура("ИмяУникальное", Имя+"_");
	Строки = Объект.Слои.НайтиСтроки(Отбор);
	Если Строки.Количество()=0 Тогда 
		НовыйСлой.Имя = Имя;
		НовыйСлой.ИмяУникальное = Имя+"_";
	Иначе	
		Префикс = СокрЛП(НовыйСлой.Слой);
		Отбор = Новый Структура("ИмяУникальное");
		Для Сч=1 По 9999 Цикл
			Имя = Префикс + СтрЗаменить(Сч, Символы.НПП, "");
			Отбор.ИмяУникальное = Имя+"_";
			Строки = Объект.Слои.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда Продолжить КонецЕсли;
			НовыйСлой.Имя = Имя;
			НовыйСлой.ИмяУникальное = Имя+"_";
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(НовыйСлой.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
		ПолучитьОписаниеТиповИзСлоя(Объект, НовыйСлой.ИмяУникальное, НовыйСлой.Слой);
	ИначеЕсли ТипЗнч(НовыйСлой.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
		ДобавитьМодельВТЧ(Объект, НовыйСлой.Слой, НовыйСлой.ИмяУникальное);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеТиповИзСлоя(Объект, ИмяСлоя, Слой)
	МассивПараметров = Нейро_ОбщийМодуль.ПолучитьПараметрыСлоя(Слой.ТипСлоя);
	Для Каждого СтруктураПараметра Из МассивПараметров Цикл
		НовыйПараметр = Объект.ПараметрыСлоя.Добавить();
		НовыйПараметр.ИмяСлоя=ИмяСлоя;
		НовыйПараметр.Имя=СтруктураПараметра.Рус;
		НовыйПараметр.Ид=СтруктураПараметра.Анг;
		НовыйПараметр.Тип=СтруктураПараметра.Тип;
		Если СтруктураПараметра.Свойство("Значение", НовыйПараметр.Объект) Тогда
			НовыйПараметр.Значение=НовыйПараметр.Объект
		КонецЕсли;
		//НовыйПараметр.ЗначениеПараметра=СтруктураПараметра;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ДобавитьМодельВТЧ(Объект, Ссылка, ИмяУникальное)
	Если Ссылка.Пустая() Тогда Возврат КонецЕсли;
	Для Каждого СтрокаВходы Из Ссылка.Входы Цикл
		Для Каждого СтрокаСлой Из Ссылка.Слои Цикл
			Если СтрокаСлой.Имя = СтрокаВходы.ИмяСлоя Тогда
				НоваяСтрВход = Объект.МодельВходящие.Добавить();
				НоваяСтрВход.ИмяУникальное = ИмяУникальное;
				НоваяСтрВход.ИмяСлоя = СтрокаВходы.ИмяСлоя;
				НоваяСтрВход.Форма = СтрокаСлой.Форма;
				НоваяСтрВход.Тип = СтрокаСлой.Тип;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаВыходы Из Ссылка.Выходы Цикл
		Для Каждого СтрокаСлой Из Ссылка.Слои Цикл
			Если СтрокаСлой.Имя = СтрокаВыходы.ИмяСлоя Тогда
				НоваяСтрВыход = Объект.МодельИсходящие.Добавить();
				НоваяСтрВыход.ИмяУникальное = ИмяУникальное;
				НоваяСтрВыход.ИмяСлоя = СтрокаВыходы.ИмяСлоя;
				НоваяСтрВыход.Форма=СтрокаСлой.Форма;
				НоваяСтрВыход.Тип = СтрокаСлой.Тип;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#Область КомпоновкаМодели

&НаСервере
Функция СформироватьМодель(Объект, Параметры) Экспорт
	Объект.ТаблицаПеременных.Очистить();
	Объект.ТаблицаПрограммныхТекстов.Очистить();
	
	//Если Нейро_ОбщийМодуль.ПосчитатьКоличествоСлоевКомпоновки(Объект)>7 Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	//ИдМодели = Нейро_СозданиеМоделиНаСервере.Транслит(Объект.ИмяМодели);
	ИдМодели = Параметры.ИдМодели;
	
	Объект.ТекстПрограммы="";
	Объект.ТекстПрограммы=Объект.ТекстПрограммы+
	"import sys
	|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	|sys.stderr = open('model_"+ИдМодели+"_err.txt', 'w')
	|sys.stdout = open('model_"+ИдМодели+"_msg.txt', 'w')
	|import json
	|"+Нейро_ОбщийМодуль.ИдFromKeras("from keras.models import Model")+"
	|";
	
	Для Каждого СтрокаСлой Из Объект.Слои Цикл
		НоваяСтрока=Объект.ТаблицаПрограммныхТекстов.Добавить();
		НоваяСтрока.Слой = СтрокаСлой.Слой;
		НоваяСтрока.ИмяСлоя=СтрокаСлой.Имя;
		Если ТипЗнч(СтрокаСлой.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
			НоваяСтрока.Ид=СтрЗаменить(Нейро_СозданиеМоделиНаСервере.Транслит(СтрокаСлой.Имя)," ","_");
			НоваяСтрока.Ид=СтрЗаменить(НоваяСтрока.Ид,"-","_");
			ТекстСлоя = СформироватьПрограммныйТекстСлоя(Объект, СтрокаСлой.Имя, НоваяСтрока.Ид);
			Если ТипЗнч(ТекстСлоя)=Тип("Структура") Тогда
				Сообщить(ТекстСлоя.Сообщение);
			Иначе
				НоваяСтрока.ПрограммныйТекст=ТекстСлоя;
			КонецЕсли;
			Объект.ТекстПрограммы=Объект.ТекстПрограммы+НоваяСтрока.Ид+"="+НоваяСтрока.ПрограммныйТекст+"
			|";
		ИначеЕсли ТипЗнч(СтрокаСлой.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
			ИмяМодели = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлой.Слой, "ИмяМодели");
			НоваяСтрока.Ид=СтрЗаменить(Нейро_СозданиеМоделиНаСервере.Транслит(СтрокаСлой.Имя)," ","_");
			НоваяСтрока.ПрограммныйТекст=ИмяМодели;
			ТекстМоделиJSON = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлой.Слой, "ТекстМоделиJSON");
			//ПутьКФайлуМодели = Параметры.ПутьККаталогуОбучения+ИмяМодели+".json";
			ПутьКФайлуМодели = Параметры.ПутьККаталогуОбучения+НоваяСтрока.Ид+".json";
			ПутьПитон=СтрЗаменить(ПутьКФайлуМодели,"\","\\");
			Объект.ТекстПрограммы=Объект.ТекстПрограммы+
			"file = open(u'"+ПутьПитон+"', 'r')
			|loaded_json = file.read()
			|file.close()
			|"+НоваяСтрока.Ид+" = keras.models.model_from_json(loaded_json)
			//|"+НоваяСтрока.Ид+".name = '"+НоваяСтрока.Ид+"'
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТипыСлоевОболчка=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.LayerWrappers")); //Оболочки
	
	МассивУжеВходов = Новый Массив; МассивУжеВыходов = Новый Массив;
	МассивВходов = Новый Массив; МассивВыходов = Новый Массив;
	Для Каждого СтрокаСлои Из Объект.Слои Цикл
		Отбор = Новый Структура("Исходящий", СтрокаСлои.Имя);
		Строки = Объект.Композиция.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Если МассивУжеВыходов.Найти(СтрокаСлои.Имя)=Неопределено И Не Нейро_СозданиеМоделиНаСервере.ПроверитьВхождениеВОболочку(Объект, СтрокаСлои) Тогда
				МассивВыходов.Добавить(СтрокаСлои.Имя);
				МассивУжеВыходов.Добавить(СтрокаСлои.Имя);
			КонецЕсли;
		КонецЕсли;
		Отбор = Новый Структура("Входящий", СтрокаСлои.Имя);
		Строки = Объект.Композиция.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Если МассивУжеВходов.Найти(СтрокаСлои.Имя)=Неопределено И Не Нейро_СозданиеМоделиНаСервере.ПроверитьВхождениеВОболочку(Объект, СтрокаСлои) Тогда
				ТипСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлои.Слой, "ТипСлоя");
				Если ТипыСлоевОболчка.НайтиПоЗначению(ТипСлоя)=Неопределено Тогда //Не оболочка
					МассивВходов.Добавить(СтрокаСлои.Имя);
					МассивУжеВходов.Добавить(СтрокаСлои.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сч=0; ВходящийСлой=""; СтрокаПарам=""; Ид=""; КоличествоПараметров=0; МасПараметры=Новый Массив;
	ИсходящийСлой=""; НомерИсходящего=0; МасИсходящие=Новый Массив;
	Для Каждого СтрокаКомп Из Объект.Композиция Цикл
		Если ВходящийСлой<>СтрокаКомп.Входящий Тогда
			Если ИсходящийСлой<>СтрокаКомп.Исходящий Тогда 
				ИсходящийСлой=СтрокаКомп.Исходящий; НомерИсходящего=0; 
			Иначе
				НомерИсходящего=НомерИсходящего+1;
			КонецЕсли;
			//СтрокиИсх = Объект.Композиция.НайтиСтроки(Новый Структура("Исходящий", СтрокаКомп.Исходящий));
			Если Сч>0 Тогда //Индекс текущего идентификатора
				Ид="x"+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
				Отбор=Новый Структура("ИмяСлоя", ВходящийСлой);
				Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
				Если Строки.Количество()=0 Тогда
					ВызватьИсключение("Не удалось определить идентификатор для: "+ВходящийСлой);
				КонецЕсли;
				Если КоличествоПараметров>1 Тогда
					Если ПроверитьСлойЭтоСлияние(Объект, ВходящийСлой) Тогда
						СчИмяПараметра=0; СтрокаПарам1="";
						Для СчПарам = 0 По МасПараметры.Количество()-1 Цикл
							МасИндексы=СтрРазделить(МасПараметры[СчПарам].Индексы,",",Ложь);
							Если МасИндексы.Количество()>0 Тогда
								Для СчИндекс = 0 по МасИндексы.Количество()-1 Цикл
									Если СтрокаПарам1<>"" Тогда СтрокаПарам1=СтрокаПарам1+", " КонецЕсли;
									СтрокаПарам1=СтрокаПарам1+МасПараметры[СчПарам].ИмяПараметра+"["+МасИндексы[СчИндекс]+"]";
								КонецЦикла;
							Иначе
								КоличествоВыходов=ОпределитьКоличествоВыходовСлоя(Объект, ОпределитьСлойПоИдентификатору(Объект, МасПараметры[СчПарам].ИмяПараметра));
								Если КоличествоВыходов=1 Тогда
									Если СтрокаПарам1<>"" Тогда СтрокаПарам1=СтрокаПарам1+", " КонецЕсли;
									СтрокаПарам1=СтрокаПарам1+МасПараметры[СчПарам].ИмяПараметра;
								Иначе
									Для СчВых = 0 по КоличествоВыходов-1 Цикл
										Если СтрокаПарам1<>"" Тогда СтрокаПарам1=СтрокаПарам1+", " КонецЕсли;
										СтрокаПарам1=СтрокаПарам1+МасПараметры[СчПарам].ИмяПараметра+"["+СтрЗаменить(СчВых,Символы.НПП,"")+"]";
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Объект.ТекстПрограммы=Объект.ТекстПрограммы+
						Ид+"="+Строки[0].Ид+"(["+СтрокаПарам1+"])
						|";
						НоваяСтрока = Объект.ТаблицаПеременных.Добавить();
						НоваяСтрока.ИмяСлоя = ВходящийСлой;
						НоваяСтрока.Ид = Ид;
					Иначе
						КоличествоВходов=ОпределитьКоличествоВходовСлоя(Объект, ВходящийСлой);
						СчИмяПараметра=0; 
						Пока МасПараметры.Количество()>0 Цикл
							СчВходов=0; ТекстПараметры="";
							Для СчПараметры = 0 По КоличествоВходов-1 Цикл
								Если ТекстПараметры<>"" Тогда ТекстПараметры=ТекстПараметры+", " КонецЕсли;
								ТекстПараметры=ТекстПараметры+МасПараметры[СчПараметры].ИмяПараметра+
								               ?(МасПараметры[СчПараметры].Индексы="","","["+МасПараметры[СчПараметры].Индексы+"]");
								СчВходов=СчВходов+1; СчИмяПараметра=СчИмяПараметра+1;
							КонецЦикла;
							Если СчВходов>1 Тогда ТекстПараметры="["+ТекстПараметры+"]" КонецЕсли;
							Пока СчВходов>0 Цикл МасПараметры.Удалить(0); СчВходов=СчВходов-1; КонецЦикла;
							Объект.ТекстПрограммы=Объект.ТекстПрограммы+
							Ид+"="+Строки[0].Ид+"("+ТекстПараметры+")
							|";
							НоваяСтрока = Объект.ТаблицаПеременных.Добавить();
							НоваяСтрока.ИмяСлоя = ВходящийСлой;
							НоваяСтрока.Ид = Ид;
							Если МасПараметры.Количество()>0 Тогда
								Сч=Сч+1;
								Ид="x"+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Объект.ТекстПрограммы=Объект.ТекстПрограммы+
					Ид+"="+Строки[0].Ид+"("+СтрокаПарам+")
					|";
					НоваяСтрока = Объект.ТаблицаПеременных.Добавить();
					НоваяСтрока.ИмяСлоя = ВходящийСлой;
					НоваяСтрока.Ид = Ид;
				КонецЕсли;
			КонецЕсли;
			ВходящийСлой = СтрокаКомп.Входящий; СтрокаПарам=""; Сч=Сч+1; КоличествоПараметров=0; МасПараметры.Очистить();
		КонецЕсли;
		Идентификатор="";
		//МасПараметры.Добавить(ОпределитьИдентификатор(Объект, МасПараметры, СтрокаКомп.Исходящий));
		ИдИсходящего = ОпределитьИдентификатор(Объект, МасПараметры, СтрокаКомп.Исходящий, НомерИсходящего);
		Если ИдИсходящего=Неопределено Тогда
			ВызватьИсключение("Не удалось определить идентификатор исходящего слоя!
			|Исходящий: "+Символ(34)+СтрокаКомп.Исходящий+Символ(34)+"
			|Входящий: "+Символ(34)+СтрокаКомп.Входящий+Символ(34));
		КонецЕсли;
		МасПараметры.Добавить(Новый Структура("ИмяПараметра, Индексы",ОпределитьИдентификатор(Объект, МасПараметры, СтрокаКомп.Исходящий, НомерИсходящего),СтрокаКомп.Индексы));
		Отбор = Новый Структура("ИмяСлоя", СтрокаКомп.Исходящий);
		Строки = Объект.ТаблицаПеременных.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Если Строки.Количество()=1 Тогда
				Идентификатор=Строки[0].Ид;
			Иначе
				Идентификатор=Строки[НомерИсходящего].Ид;
			КонецЕсли;
		Иначе
			Отбор = Новый Структура("ИмяСлоя", СтрокаКомп.Исходящий);
			Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда
				Если Строки.Количество()=1 Тогда
					Идентификатор=Строки[0].Ид;
				Иначе
					Идентификатор=Строки[НомерИсходящего].Ид;
				КонецЕсли;
			Иначе
				ВызватьИсключение("Не удалось определить идентификатор для: "+СтрокаКомп.Исходящий);
			КонецЕсли;
		КонецЕсли;
		Если СтрокаПарам<>"" Тогда СтрокаПарам=СтрокаПарам+", " КонецЕсли;
		СтрокаПарам=СтрокаПарам+Идентификатор+?(СтрокаКомп.Индексы<>"","["+СтрокаКомп.Индексы+"]",""); КоличествоПараметров=КоличествоПараметров+1;
	КонецЦикла;
	Если Сч>0 Тогда
		Ид="x"+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		Отбор=Новый Структура("ИмяСлоя", ВходящийСлой);
		Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			ВызватьИсключение("Не удалось определить идентификатор для: "+ВходящийСлой);
		КонецЕсли;
		Если КоличествоПараметров>1 Тогда
			Если ПроверитьСлойЭтоСлияние(Объект, ВходящийСлой) Тогда
				СчИмяПараметра=0; СтрокаПарам1="";
				//Для Каждого ИмяПараметра Из МасПараметры Цикл
				Для Сч = 0 По МасПараметры.Количество()-1 Цикл
					ИмяПараметра = МасПараметры[Сч].ИмяПараметра;
					Индексы = МасПараметры[Сч].Индексы;
					Если СтрокаПарам1<>"" Тогда СтрокаПарам1=СтрокаПарам1+", " КонецЕсли;
					СтрокаПарам1=СтрокаПарам1+ИмяПараметра+?(Индексы="","","["+Индексы+"]");
				КонецЦикла;
				Объект.ТекстПрограммы=Объект.ТекстПрограммы+
				Ид+"="+Строки[0].Ид+"(["+СтрокаПарам1+"])
				|";
				НоваяСтрока = Объект.ТаблицаПеременных.Добавить();
				НоваяСтрока.ИмяСлоя = ВходящийСлой;
				НоваяСтрока.Ид = Ид;
			Иначе
				КоличествоВходов=ОпределитьКоличествоВходовСлоя(Объект, ВходящийСлой);
				СчИмяПараметра=0; 
				Пока МасПараметры.Количество()>0 Цикл
					СчВходов=0; ТекстПараметры="";
					Для СчПараметры = 0 По КоличествоВходов-1 Цикл
						Если ТекстПараметры<>"" Тогда ТекстПараметры=ТекстПараметры+", " КонецЕсли;
						ТекстПараметры=ТекстПараметры+МасПараметры[СчПараметры].ИмяПараметра+
						               ?(МасПараметры[СчПараметры].Индексы="","","["+МасПараметры[СчПараметры].Индексы+"]");
						СчВходов=СчВходов+1; СчИмяПараметра=СчИмяПараметра+1;
					КонецЦикла;
					Если СчВходов>1 Тогда ТекстПараметры="["+ТекстПараметры+"]" КонецЕсли;
					Пока СчВходов>0 Цикл МасПараметры.Удалить(0); СчВходов=СчВходов-1; КонецЦикла;
					Объект.ТекстПрограммы=Объект.ТекстПрограммы+
					Ид+"="+Строки[0].Ид+"("+ТекстПараметры+")
					|";
					НоваяСтрока = Объект.ТаблицаПеременных.Добавить();
					НоваяСтрока.ИмяСлоя = ВходящийСлой;
					НоваяСтрока.Ид = Ид;
					Если МасПараметры.Количество()>0 Тогда
						Сч=Сч+1;
						Ид="x"+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Объект.ТекстПрограммы=Объект.ТекстПрограммы+
			Ид+"="+Строки[0].Ид+"("+СтрокаПарам+")
			|";
			НоваяСтрока = Объект.ТаблицаПеременных.Добавить();
			НоваяСтрока.ИмяСлоя = ВходящийСлой;
			НоваяСтрока.Ид = Ид;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВходы=""; СтрокаВыходы="";
	Если МассивВходов.Количество()=1 Тогда
		ИмяСлоя = МассивВходов.Получить(0);
		Отбор = Новый Структура("ИмяСлоя", ИмяСлоя);
		Строки = Объект.ТаблицаПеременных.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			СтрокаВходы=Строки[0].Ид;
		Иначе
			Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда
				СтрокаВходы=Строки[0].Ид;
			Иначе
				ВызватьИсключение("Не удалось определить идентификатор для: "+ИмяСлоя);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаВходы="[";
		Для Каждого ИмяСлоя Из МассивВходов Цикл
			Если СтрокаВходы<>"[" Тогда СтрокаВходы=СтрокаВходы+", " КонецЕсли;
			Отбор = Новый Структура("ИмяСлоя", ИмяСлоя);
			Строки = Объект.ТаблицаПеременных.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда
				СтрокаВходы=СтрокаВходы+Строки[0].Ид;
			Иначе
				Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
				Если Строки.Количество()>0 Тогда
					СтрокаВходы=СтрокаВходы+Строки[0].Ид;
				Иначе
					ВызватьИсключение("Не удалось определить идентификатор для: "+ИмяСлоя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СтрокаВходы=СтрокаВходы+"]"
	КонецЕсли;
	Если МассивВыходов.Количество()=1 Тогда
		ИмяСлоя = МассивВыходов.Получить(0);
		Отбор = Новый Структура("ИмяСлоя", ИмяСлоя);
		Строки = Объект.ТаблицаПеременных.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			СтрокаВыходы=Строки[0].Ид;
		Иначе
			Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда
				СтрокаВыходы=Строки[0].Ид;
			Иначе
				ВызватьИсключение("Не удалось определить идентификатор для: "+ИмяСлоя);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаВыходы="[";
		Для Каждого ИмяСлоя Из МассивВыходов Цикл
			Если СтрокаВыходы<>"[" Тогда СтрокаВыходы=СтрокаВыходы+", " КонецЕсли;
			Отбор = Новый Структура("ИмяСлоя", ИмяСлоя);
			Строки = Объект.ТаблицаПеременных.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда
				СтрокаВыходы=СтрокаВыходы+Строки[0].Ид;
			Иначе
				Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
				Если Строки.Количество()>0 Тогда
					СтрокаВыходы=СтрокаВыходы+Строки[0].Ид;
				Иначе
					ВызватьИсключение("Не удалось определить идентификатор для: "+ИмяСлоя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СтрокаВыходы=СтрокаВыходы+"]"
	КонецЕсли;
	
	ТекстТренируемый="";
	//ПрограммныйТекстСлоя=ПрограммныйТекстСлоя+?(Прав(ПрограммныйТекстСлоя,1)="(","",", ")+"trainable="+?(НайденныйСлой.Тренируемый,"True","False");
	Для Каждого СтрокаСлои Из Объект.Слои Цикл
		Если ТекстТренируемый<>"" Тогда ТекстТренируемый=ТекстТренируемый+", " КонецЕсли;
		Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Новый Структура("ИмяСлоя", СтрокаСлои.Имя));
		Если Строки.Количество()=0 Тогда
			ВызватьИсключение("Не удалось определить идентификатор для: "+СтрокаСлои.Имя);
		КонецЕсли;
		ТекстТренируемый=ТекстТренируемый+"'"+Строки[0].Ид+"':"+?(СтрокаСлои.Тренируемый,"True","False")
	КонецЦикла;
	
	Объект.ИдентификаторМодели = ИдМодели;
	ПутьКФайлуМодели = Параметры.ПутьККаталогуОбучения+ИдМодели+".json";
	ПутьПитон=СтрЗаменить(ПутьКФайлуМодели,"\","\\");
	Объект.ТекстПрограммы=Объект.ТекстПрограммы+
	"model = Model("+СтрокаВходы+", "+СтрокаВыходы+", name='"+ИдМодели+"')
	//|model.name = '"+ИдМодели+"'
	|";
	Если ТекстТренируемый<>"" Тогда
		Объект.ТекстПрограммы=Объект.ТекстПрограммы+
		"trainables={"+ТекстТренируемый+"}
		|for layer in model.layers:
		|    layer.trainable=trainables[layer.name]
		|";
		//|for i in range(len(model.layers)):
		//|    model.layers[i].trainable=trainables[i]
		//|";
	КонецЕсли;
	Объект.ТекстПрограммы=Объект.ТекстПрограммы+
	"model_json = model.to_json()
	|with open(u'"+ПутьПитон+"', 'w') as json_file:
	|    json_file.write(model_json)
	|model.summary()
	|";
	
	ПоказыватьГрафически=Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьGraphviz");
	Если ПоказыватьГрафически Тогда
		ПутьПитон=СтрЗаменить(Параметры.ПутьККаталогуОбучения,"\","\\");
		Объект.ТекстПрограммы=Объект.ТекстПрограммы+
		Нейро_ОбщийМодуль.ИдFromKeras("from keras.utils import plot_model")+"
		|user1c_folder = u'"+ПутьПитон+"'
		|plot_model(model, show_shapes=True, to_file=user1c_folder+'"+Объект.ИдентификаторМодели+".png')
		|";
	КонецЕсли;
	
	Возврат Истина
КонецФункции

&НаСервере
Функция СформироватьПрограммныйТекстСлоя(Объект, ИмяСлоя, ИдСлоя) Экспорт
	НайденныйСлой = Неопределено;
	Для Каждого СледСлой Из Объект.Слои Цикл
		Если СледСлой.Имя = ИмяСлоя Тогда
			НайденныйСлой = СледСлой;
			Прервать 
		КонецЕсли;
	КонецЦикла;
	Если НайденныйСлой = Неопределено Тогда
		//Сообщить("Слой с именем "+ИмяСлоя+" отсутствует!");
		Возврат Новый Структура("Сообщение","Слой с именем "+ИмяСлоя+" отсутствует!");
	КонецЕсли;
	Слой = НайденныйСлой.Слой;
	//ПрограммныйТекстСлоя = Слой.ИдОбъекта;
	ПрограммныйТекстСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитСлоя(Слой, "ИдОбъекта");
	Отбор = Новый Структура("ИмяСлоя", НайденныйСлой.ИмяУникальное);
	СтрокиТЧ = Объект.ПараметрыСлоя.НайтиСтроки(Отбор);
	МассивПараметров = Новый Массив;
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		Если СтрокаТЧ.Тип=ПредопределенноеЗначение("Перечисление.Нейро_Типы.Слой") Тогда
			Отбор = Новый Структура("ИмяСлоя", СтрокаТЧ.Значение);
			Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда 
				ТекстПараметра = СтрокаТЧ.Ид+" = "+Строки[0].Ид;
				МассивПараметров.Добавить(ТекстПараметра);
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.Значение<>Неопределено Тогда
			//ТекстПараметра = СтрокаТЧ.Ид+" = " + Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения(СтрокаТЧ.Ид, СтрокаТЧ.Тип, СтрокаТЧ.Значение);
			ТекстПараметра = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения(СтрокаТЧ.Ид, СтрокаТЧ.Тип, СтрокаТЧ.Значение);
			МассивПараметров.Добавить(ТекстПараметра);
		КонецЕсли;
	КонецЦикла;
	ПрограммныйТекстСлоя=ПрограммныйТекстСлоя+"(";
	Если МассивПараметров.Количество()>0 Тогда
		Для Каждого ТекстПараметра Из МассивПараметров Цикл
			ПрограммныйТекстСлоя=ПрограммныйТекстСлоя+ТекстПараметра+", ";
		КонецЦикла;
		ПрограммныйТекстСлоя=СокрП(ПрограммныйТекстСлоя);
		Если Прав(ПрограммныйТекстСлоя,1)="," Тогда
			ПрограммныйТекстСлоя=Лев(ПрограммныйТекстСлоя,СтрДлина(ПрограммныйТекстСлоя)-1)
		КонецЕсли;
	КонецЕсли;
	ПрограммныйТекстСлоя=ПрограммныйТекстСлоя+?(Прав(ПрограммныйТекстСлоя,1)="(","",", ")+"name='"+ИдСлоя+"'";
	ПрограммныйТекстСлоя=ПрограммныйТекстСлоя+")";
	Возврат ПрограммныйТекстСлоя;
КонецФункции

&НаСервере
Функция ОпределитьКоличествоВходовСлоя(Объект, ИмяСлоя)
	Отбор=Новый Структура("Имя", ИмяСлоя);
	Строки=Объект.Слои.НайтиСтроки(Отбор);
	Если Строки.Количество()=0 Тогда Возврат Неопределено КонецЕсли;
	СтрокаСлои = Строки[0];
	Если ТипЗнч(СтрокаСлои.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
		Возврат 1
	КонецЕсли;
	
	ОтборВх=Новый Структура("ИмяУникальное", СтрокаСлои.ИмяУникальное);
	СтрокиВх=Объект.МодельВходящие.НайтиСтроки(ОтборВх);
	Возврат ?(СтрокиВх.Количество()=0,Неопределено,СтрокиВх.Количество());
КонецФункции

&НаСервере
Функция ОпределитьКоличествоВыходовСлоя(Объект, ИмяСлоя)
	Отбор=Новый Структура("Имя", ИмяСлоя);
	Строки=Объект.Слои.НайтиСтроки(Отбор);
	Если Строки.Количество()=0 Тогда Возврат Неопределено КонецЕсли;
	СтрокаСлои = Строки[0];
	Если ТипЗнч(СтрокаСлои.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
		Возврат 1
	КонецЕсли;
	
	ОтборВх=Новый Структура("ИмяУникальное", СтрокаСлои.ИмяУникальное);
	СтрокиВх=Объект.МодельИсходящие.НайтиСтроки(ОтборВх);
	Возврат ?(СтрокиВх.Количество()=0,Неопределено,СтрокиВх.Количество());
КонецФункции

&НаСервере
Функция ОпределитьСлойПоИдентификатору(Объект, Идентификатор)
	Отбор = Новый Структура("Ид", Идентификатор);
	Строки = Объект.ТаблицаПеременных.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 Тогда
		Возврат Строки[0].ИмяСлоя;
	Иначе
		Отбор = Новый Структура("Ид", Идентификатор);
		Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Возврат Строки[0].Ид;
		Иначе
			//Сообщение
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ОпределитьИдентификатор(Объект, МасПараметры, ИмяСлоя, НомерИсходящего)
	Отбор = Новый Структура("ИмяСлоя", ИмяСлоя);
	Строки = Объект.ТаблицаПеременных.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 Тогда
		Если Строки.Количество()>1 Тогда
			Если МасПараметры.Количество()>0 Тогда
				Для Каждого Строка Из Строки Цикл
					НайденПоИд=Ложь;
					Для Сч=0 По МасПараметры.Количество()-1 Цикл
						Если МасПараметры[Сч].ИмяПараметра=Строка.Ид Тогда НайденПоИд=Истина; Прервать КонецЕсли;
					КонецЦикла;
					Если Не НайденПоИд Тогда Возврат Строка.Ид КонецЕсли;
					//Если МасПараметры.Найти(Строка.Ид)=Неопределено Тогда
					//	Возврат Строка.Ид
					//КонецЕсли;
				КонецЦикла;
			Иначе
				Если НомерИсходящего<Строки.Количество() Тогда
					Возврат Строки[НомерИсходящего].Ид;
				Иначе
					Возврат Неопределено
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат Строки[0].Ид;
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("ИмяСлоя", ИмяСлоя);
		Строки = Объект.ТаблицаПрограммныхТекстов.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Если Строки.Количество()>1 Тогда
				Если НомерИсходящего<Строки.Количество() Тогда
					Возврат Строки[НомерИсходящего].Ид;
				Иначе
					Возврат Неопределено
				КонецЕсли;
			Иначе
				Возврат Строки[0].Ид;
			КонецЕсли;
		Иначе
			//Сообщение
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверитьСлойЭтоСлияние(Объект, ИмяСлоя)
	Для Каждого Слой Из Объект.Слои Цикл
		Если Слой.Имя = ИмяСлоя Тогда
			Если ТипЗнч(Слой.Слой) = Тип("СправочникСсылка.Нейро_Слои") Тогда
				Если Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Слой.Слой, "ВидСлоя")=ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.Merge") Тогда
					Возврат Истина
				Иначе
					Возврат Ложь
				КонецЕсли;
			Иначе
				Возврат Ложь
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции

#КонецОбласти

&НаСервере
Функция ВсегоСлоев(Объект) Экспорт
	Результат = 0;
	Для Каждого СтрокаТЧ Из Объект.Слои Цикл
		Если ТипЗнч(СтрокаТЧ.Слой) = Тип("СправочникСсылка.Нейро_Слои") Тогда
			Результат=Результат+1;
		ИначеЕсли ТипЗнч(СтрокаТЧ.Слой) = Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
			Дерево=Новый ДеревоЗначений;
			Дерево.Колонки.Добавить("Свойство");
			Дерево.Колонки.Добавить("Значение");
			Дерево.Колонки.Добавить("Тип");
			Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSON(СтрокаТЧ.Слой.ТекстМоделиJSON, Дерево);
			СтруктураМодели = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSON(Дерево);
			Результат = Результат + ПосчитатьКоличествоСлоевМодели(СтруктураМодели.config.layers);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПосчитатьКоличествоСлоевМодели(МассивСлоев)
	Результат = 0;
	Для Каждого СтруктураСлоя Из МассивСлоев Цикл
		Если СтруктураСлоя.class_name = "Model" Тогда
			Результат = Результат + ПосчитатьКоличествоСлоевМодели(СтруктураСлоя.config.layers)
		Иначе
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ИзменитьИмяМоделиJSON(ТекстМоделиJSON, ИмяМодели) Экспорт
	Ид=СтрЗаменить(Нейро_СозданиеМоделиНаСервере.Транслит(ИмяМодели)," ","_");
	ДеревоJSON.Строки.Очистить();
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(ТекстМоделиJSON, ДеревоJSON); //Заполняет ДеревоJSON
	СтрокаДерева=Нейро_СозданиеМоделиНаСервере.НайтиСтрокуИмяМоделиНаСервере(ДеревоJSON);
	Если СтрокаДерева<>Неопределено Тогда
		СтрокаДерева.Значение = Ид;
		Возврат Нейро_СозданиеМоделиНаСервере.СформироватьСтрокуJSONИзДереваНаСервере(ДеревоJSON);
		//ДЗ.ПолучитьЭлементы().Очистить();
		//ОбработатьМодельИзСтрокиJSON();
		//ТекстМоделиJSON_Просмотр.УстановитьТекст(Объект.ТекстМоделиJSON);
	КонецЕсли;
	Возврат ТекстМоделиJSON;
КонецФункции


ДеревоJSON=Новый ДеревоЗначений;
ДеревоJSON.Колонки.Добавить("Свойство");
ДеревоJSON.Колонки.Добавить("Значение");
ДеревоJSON.Колонки.Добавить("Тип");