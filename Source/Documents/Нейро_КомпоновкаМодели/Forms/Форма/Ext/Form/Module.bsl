&НаКлиенте
Процедура СообщитьОбОшибке(Поле, Текст) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура СлоиПриИзменении(Элемент)
	Если Элемент.ТекущиеДанные<>Неопределено Тогда
		Отбор=Новый ФиксированнаяСтруктура("ИмяСлоя", Элемент.ТекущиеДанные.ИмяУникальное);
		Элементы.ПараметрыСлоя.ОтборСтрок = Отбор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлоиПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если ТипЗнч(Элемент.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
		Если Элемент.ТекущиеДанные.Имя="" Тогда
			Отбор=Новый ФиксированнаяСтруктура("ИмяСлоя", "<>");
		Иначе
			Отбор=Новый ФиксированнаяСтруктура("ИмяСлоя", Элемент.ТекущиеДанные.ИмяУникальное);
		КонецЕсли;
		Элементы.ПараметрыСлоя.ОтборСтрок = Отбор;
		Отбор=Новый ФиксированнаяСтруктура("ИмяУникальное", "<>");
		Элементы.МодельВходящие.ОтборСтрок = Отбор;
		Элементы.МодельИсходящие.ОтборСтрок = Отбор;
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
		Отбор=Новый ФиксированнаяСтруктура("ИмяСлоя", "<>");
		Элементы.ПараметрыСлоя.ОтборСтрок = Отбор;
		Отбор=Новый ФиксированнаяСтруктура("ИмяУникальное", Элемент.ТекущиеДанные.ИмяУникальное);
		Элементы.МодельВходящие.ОтборСтрок = Отбор;
		Элементы.МодельИсходящие.ОтборСтрок = Отбор;
	Иначе
		Отбор=Новый ФиксированнаяСтруктура("ИмяСлоя", "<>");
		Элементы.ПараметрыСлоя.ОтборСтрок = Отбор;
		Отбор=Новый ФиксированнаяСтруктура("ИмяУникальное", "<>");
		Элементы.МодельВходящие.ОтборСтрок = Отбор;
		Элементы.МодельИсходящие.ОтборСтрок = Отбор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлоиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		НовыйСлой = Объект.Слои.Добавить();
		НовыйСлой.Слой = Элемент.ТекущиеДанные.Слой;
		НовыйСлой.Тренируемый = Элемент.ТекущиеДанные.Тренируемый;
		//Префикс = СокрЛП(Элемент.ТекущиеДанные.Слой);
		Префикс = Нейро_ОбщийМодуль.ТолькоБуквыИЦифры(СокрЛП(Элемент.ТекущиеДанные.Слой));
		Отбор = Новый Структура("ИмяУникальное");
		Для Сч=1 По 9999 Цикл
			Имя = Префикс + СтрЗаменить(Сч, Символы.НПП, "");
			Отбор.ИмяУникальное = Имя+"_";
			Строки = Объект.Слои.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда Продолжить КонецЕсли;
			НовыйСлой.Имя = Имя;
			НовыйСлой.ИмяУникальное = Имя+"_";
			Прервать;
		КонецЦикла;
		Если ТипЗнч(Элемент.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
			Отбор = Новый Структура("ИмяСлоя", Элемент.ТекущиеДанные.ИмяУникальное);
			СтрокиПараметров = Объект.ПараметрыСлоя.НайтиСтроки(Отбор);
			Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
				НовыйПараметр = Объект.ПараметрыСлоя.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПараметр, СтрокаПараметра);
				НовыйПараметр.ИмяСлоя = НовыйСлой.ИмяУникальное;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
			Отбор = Новый Структура("ИмяУникальное", Элемент.ТекущиеДанные.ИмяУникальное);
			СтрокиПараметров = Объект.МодельВходящие.НайтиСтроки(Отбор);
			Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
				НовыйПараметр = Объект.МодельВходящие.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПараметр, СтрокаПараметра);
				НовыйПараметр.ИмяУникальное = НовыйСлой.ИмяУникальное;
			КонецЦикла;
			СтрокиПараметров = Объект.МодельИсходящие.НайтиСтроки(Отбор);
			Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
				НовыйПараметр = Объект.МодельИсходящие.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПараметр, СтрокаПараметра);
				НовыйПараметр.ИмяУникальное = НовыйСлой.ИмяУникальное;
			КонецЦикла;
		КонецЕсли;
		Элемент.ТекущаяСтрока = НовыйСлой.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлоиПередУдалением(Элемент, Отказ)
	Если ТипЗнч(Элемент.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
		УдалитьПараметрыСлояНаСервере(Элемент.ТекущиеДанные.ИмяУникальное);
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
		УдалитьСлоиМоделиНаСервере(Элемент.ТекущиеДанные.ИмяУникальное);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьПараметрыСлояНаСервере(ИмяСлоя)
	Отбор = Новый Структура();
	Отбор.Вставить("ИмяСлоя",ИмяСлоя);
	Строки = Объект.ПараметрыСлоя.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		Объект.ПараметрыСлоя.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УдалитьСлоиМоделиНаСервере(ИмяСлоя)
	Отбор = Новый Структура();
	Отбор.Вставить("ИмяУникальное",ИмяСлоя);
	Строки = Объект.МодельВходящие.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		Объект.МодельВходящие.Удалить(Строка);
	КонецЦикла;
	Строки = Объект.МодельИсходящие.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		Объект.МодельИсходящие.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СлоиСлойПриИзменении(Элемент)
	Префикс = Нейро_ОбщийМодуль.ТолькоБуквыИЦифры(СокрЛП(Элемент.ТекстРедактирования));
	Отбор = Новый Структура("ИмяУникальное");
	Для Сч=1 По 9999 Цикл
		Имя = Префикс + СтрЗаменить(Сч, Символы.НПП, "");
		Отбор.ИмяУникальное = Имя+"_";
		Строки = Объект.Слои.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда Продолжить КонецЕсли;
		Элементы.Слои.ТекущиеДанные.Имя = Имя;
		Элементы.Слои.ТекущиеДанные.ИмяУникальное = Имя+"_";
		Прервать;
	КонецЦикла;
	Если ТипЗнч(Элементы.Слои.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
		ТипСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Элементы.Слои.ТекущиеДанные.Слой,"ТипСлоя");
		ВидСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Элементы.Слои.ТекущиеДанные.Слой,"ВидСлоя");
		Если ТипСлоя=ПредопределенноеЗначение("Перечисление.Нейро_ТипыСлоев.InputLayer") 
			Или ВидСлоя=ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.Merge") Тогда
			Элементы.Слои.ТекущиеДанные.Тренируемый=Ложь
		Иначе
			Элементы.Слои.ТекущиеДанные.Тренируемый=Истина
		КонецЕсли;
		ПолучитьОписаниеТиповИзСлоя(Элементы.Слои.ТекущиеДанные.ИмяУникальное, Элементы.Слои.ТекущиеДанные.Слой)
	ИначеЕсли ТипЗнч(Элементы.Слои.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
		Элементы.Слои.ТекущиеДанные.Тренируемый=Ложь;
		ДобавитьМодельВТЧ(Элементы.Слои.ТекущиеДанные.Слой, Элементы.Слои.ТекущиеДанные.ИмяУникальное);
		СлоиПриАктивизацииСтроки(Элементы.Слои);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеТиповИзСлоя(ИмяСлоя, Слой)
	МассивПараметров = Нейро_ОбщийМодуль.ПолучитьПараметрыСлоя(Слой.ТипСлоя);
	Для Каждого СтруктураПараметра Из МассивПараметров Цикл
		НовыйПараметр = Объект.ПараметрыСлоя.Добавить();
		НовыйПараметр.ИмяСлоя=ИмяСлоя;
		НовыйПараметр.Имя=СтруктураПараметра.Рус;
		НовыйПараметр.Ид=СтруктураПараметра.Анг;
		НовыйПараметр.Тип=СтруктураПараметра.Тип;
		Если СтруктураПараметра.Свойство("Значение", НовыйПараметр.Объект) Тогда
			НовыйПараметр.Значение=НовыйПараметр.Объект
		КонецЕсли;
		//НовыйПараметр.ЗначениеПараметра=СтруктураПараметра;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ДобавитьМодельВТЧ(Ссылка, ИмяУникальное)
	Если Ссылка.Пустая() Тогда Возврат КонецЕсли;
	Для Каждого СтрокаВходы Из Ссылка.Входы Цикл
		Для Каждого СтрокаСлой Из Ссылка.Слои Цикл
			Если СтрокаСлой.Имя = СтрокаВходы.ИмяСлоя Тогда
				НоваяСтрВход = Объект.МодельВходящие.Добавить();
				НоваяСтрВход.ИмяУникальное = ИмяУникальное;
				НоваяСтрВход.ИмяСлоя = СтрокаВходы.ИмяСлоя;
				НоваяСтрВход.Форма = СтрокаСлой.Форма;
				НоваяСтрВход.Тип = СтрокаСлой.Тип;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаВыходы Из Ссылка.Выходы Цикл
		Для Каждого СтрокаСлой Из Ссылка.Слои Цикл
			Если СтрокаСлой.Имя = СтрокаВыходы.ИмяСлоя Тогда
				НоваяСтрВыход = Объект.МодельИсходящие.Добавить();
				НоваяСтрВыход.ИмяУникальное = ИмяУникальное;
				НоваяСтрВыход.ИмяСлоя = СтрокаВыходы.ИмяСлоя;
				НоваяСтрВыход.Форма=СтрокаСлой.Форма;
				НоваяСтрВыход.Тип = СтрокаСлой.Тип;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Элементы.Модели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
КонецПроцедуры


&НаКлиенте
Процедура СлоиСлойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение=Элементы.Слои.ТекущиеДанные.Слой Тогда
		СтандартнаяОбработка=Ложь; Возврат
	КонецЕсли;
	УдалитьПараметрыСлояНаСервере(Элементы.Слои.ТекущиеДанные.ИмяУникальное);
КонецПроцедуры


&НаКлиенте
Процедура СлоиИмяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Для Каждого СтрокаСлой Из Объект.Слои Цикл
		Если СтрокаСлой=Элементы.Слои.ТекущиеДанные Тогда Продолжить КонецЕсли;
		Если СтрокаСлой.Имя = Текст Тогда
			Сообщить("Имя уже используется в слое: "+СокрЛП(Объект.Слои.Индекс(СтрокаСлой)+1));
			//Текст="";
			//ПараметрыПолученияДанных.СтрокаПоиска="";
			СтандартнаяОбработка=Ложь; Возврат;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКомпозиция Из Объект.Композиция Цикл
		Если СтрокаКомпозиция.Исходящий = Элементы.Слои.ТекущиеДанные.Имя Тогда
			СтрокаКомпозиция.Исходящий = Текст;
		КонецЕсли;
		Если СтрокаКомпозиция.Входящий = Элементы.Слои.ТекущиеДанные.Имя Тогда
			СтрокаКомпозиция.Входящий = Текст;
		КонецЕсли;
	КонецЦикла;
	//Сообщить("Обновить имя слоя в параметрах и композиции на "+Текст);
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыСлояПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные<>Неопределено Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Тип", Элемент.ТекущиеДанные.Тип);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		Если Элемент.ТекущиеДанные.Объект<>Неопределено Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Значение", Элемент.ТекущиеДанные.Объект);
			НовыйМассив.Добавить(НовыйПараметр);
		КонецЕсли;
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПараметрыСлояЗначение.ПараметрыВыбора = НовыеПараметры;
		Элементы.ПараметрыСлояЗначение.ВыбиратьТип = Элемент.ТекущиеДанные.Значение=Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСлояПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент=Неопределено Или Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя="ПараметрыСлояЗначение" Тогда
		ИсключитьСебя = ?(Элемент.ТекущиеДанные.Объект=Неопределено, Ложь, Истина);
		Элемент.ТекущийЭлемент.ОграничениеТипа = Нейро_ОбщийМодуль.ПолучитьОписанияТипаИзПеречисления(Элемент.ТекущиеДанные.Тип, ИсключитьСебя);
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		Если Элемент.ТекущиеДанные.Тип=ПредопределенноеЗначение("Перечисление.Нейро_Типы.Слой") Тогда
			Для Каждого СтрокаТЧ Из Объект.Слои Цикл
				Если СтрокаТЧ=Элементы.Слои.ТекущиеДанные Тогда Продолжить КонецЕсли;
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СтрокаТЧ.Имя);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыСлояПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИмяСлоя = Элемент.ОтборСтрок.ИмяСлоя;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница=Элементы.ГруппаКомпозиция Тогда
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КомпозицияПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущаяСтрока=Неопределено Тогда Возврат КонецЕсли;
	Если Элемент.ТекущийЭлемент=Элементы.КомпозицияИсходящий Тогда
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		Для Каждого СтрокаСлои Из Объект.Слои Цикл
			Если СтрокаСлои.Имя<>Элемент.ТекущиеДанные.Входящий Тогда
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СтрокаСлои.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Элемент.ТекущийЭлемент=Элементы.КомпозицияВходящий Тогда
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		Для Каждого СтрокаСлои Из Объект.Слои Цикл
			Если СтрокаСлои.Имя<>Элемент.ТекущиеДанные.Исходящий Тогда
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СтрокаСлои.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Элемент.ТекущийЭлемент=Элементы.КомпозицияИндексы Тогда
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		//МасИндексов = СтрРазделить(Элемент.ТекущиеДанные.Индексы,","Ложь);
		Отбор=Новый Структура("Имя",Элемент.ТекущиеДанные.Исходящий);
		Строки=Объект.Слои.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Отбор=Новый Структура("ИмяУникальное",Строки[0].ИмяУникальное);
			Строки = Объект.МодельИсходящие.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда
				Для Сч=0 По Строки.Количество()-1 Цикл
					Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СокрЛП(Сч));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкомпоноватьМодель(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		Записать()
	КонецЕсли;
	Если Объект.ИмяМодели="" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Объект.ИмяМодели";
		Сообщение.Текст = "Не указано имя модели!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ЕстьОшибки=Ложь;
	
	Для Каждого СтрокаСлои Из Объект.Слои Цикл 
		ЕстьИсходящий=Ложь;
		Отбор=Новый Структура("Исходящий", СтрокаСлои.Имя);
		Строки=Объект.Композиция.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда ЕстьИсходящий=Истина КонецЕсли;
		ЕстьВходящий=Ложь;
		Отбор=Новый Структура("Входящий", СтрокаСлои.Имя);
		Строки=Объект.Композиция.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда ЕстьИсходящий=Истина КонецЕсли;
		Если Не (ЕстьИсходящий Или ЕстьВходящий) И Не ПроверитьВхождениеВОболочку(СтрокаСлои) Тогда
			Поле="Объект.Слои["+СтрЗаменить(Объект.Слои.Индекс(СтрокаСлои),Символы.НПП,"")+"].Имя";
			СообщитьОбОшибке(Поле, "Слой "+СтрокаСлои.Имя+" не участвует в композиции!");
			ЕстьОшибки=Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	Доп = Новый Структура("Имя, Приемник", "Models", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("СкомпоноватьМодельПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаСервере
Функция ВсегоСлоев()
	ДокОбъект=РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.ВсегоСлоев(Объект);
КонецФункции

&НаКлиенте
Функция ПроверитьВхождениеВОболочку(СтрокаТЧ)
	ТипыСлоев=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.LayerWrappers"));
	Для Каждого СтрокаСлои Из Объект.Слои Цикл //Искать только оболочки
		Если ТипЗнч(СтрокаСлои.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда //Не оболочка
			Продолжить
		Иначе
			ТипСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлои.Слой, "ТипСлоя"); //Получить список оболочек
			Если СтрокаТЧ=СтрокаСлои Или ТипыСлоев.НайтиПоЗначению(ТипСлоя)=Неопределено Тогда 
				Продолжить 
			КонецЕсли;
		КонецЕсли;                    
		Отбор=Новый Структура("ИмяСлоя, Значение",СтрокаСлои.ИмяУникальное, СтрокаТЧ.Имя);
		Если Объект.ПараметрыСлоя.НайтиСтроки(Отбор).Количество()>0 Тогда Возврат Истина КонецЕсли;
	КонецЦикла;
	Возврат Ложь
КонецФункции

&НаКлиенте
Процедура СкомпоноватьМодельПродолжить(ИмяКаталога, ДополнительныеПараметры) Экспорт
	Если Объект.Композиция.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Композиция", "Не произведена композиция слоев модели!");
		Возврат;
	КонецЕсли;
	
	ТипыСлоевОболчка=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.LayerWrappers")); //Оболочки
	МассивУжеВходов = Новый Массив; МассивУжеВыходов = Новый Массив;
	МассивВходов = Новый Массив; МассивВыходов = Новый Массив;
	Для Каждого СтрокаСлои Из Объект.Слои Цикл
		Отбор = Новый Структура("Исходящий", СтрокаСлои.Имя);
		Строки = Объект.Композиция.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Если МассивУжеВыходов.Найти(СтрокаСлои.Имя)=Неопределено И Не ПроверитьВхождениеВОболочку(СтрокаСлои) Тогда
				МассивВыходов.Добавить(СтрокаСлои.Имя);
				МассивУжеВыходов.Добавить(СтрокаСлои.Имя);
			КонецЕсли;
		КонецЕсли;
		Отбор = Новый Структура("Входящий", СтрокаСлои.Имя);
		Строки = Объект.Композиция.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Если МассивУжеВходов.Найти(СтрокаСлои.Имя)=Неопределено И Не ПроверитьВхождениеВОболочку(СтрокаСлои) Тогда
				ТипСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлои.Слой, "ТипСлоя");
				Если ТипыСлоевОболчка.НайтиПоЗначению(ТипСлоя)=Неопределено Тогда //Не оболочка
					МассивВходов.Добавить(СтрокаСлои.Имя);
					МассивУжеВходов.Добавить(СтрокаСлои.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивВходов.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Композиция", "Входные слои не обнаружены! Проверьте композицию слоев.");
		Возврат
	КонецЕсли;
	Если МассивВыходов.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Композиция", "Выходные слои не обнаружены! Проверьте композицию слоев.");
		Возврат
	КонецЕсли;
	
	
	ИдМодели = СтрЗаменить(Нейро_СозданиеМоделиНаСервере.Транслит(Объект.ИмяМодели), " ", "_");
	Если НЕ СформироватьМодель(ИдМодели) Тогда
		Сообщить("Не удалось скомпоновать модель!");
		Возврат 
	КонецЕсли;
	
	ЕстьОшибки=Ложь;
	Для Каждого СтрокаСлой Из Объект.Слои Цикл
		Если ТипЗнч(СтрокаСлой.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда
			ИмяМодели = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлой.Слой, "ИмяМодели");
			//НоваяСтрока.Ид=СтрЗаменить(Нейро_СозданиеМоделиНаСервере.Транслит(СтрокаСлой.Имя)," ","_");
			ТекстМоделиJSON = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлой.Слой, "ТекстМоделиJSON");
			Если ТекстМоделиJSON="" Тогда
				ТекстСообщения = 
				"Информация о модели отсутствует!
				|Сформируйте модель заново.";
				СообщитьОбОшибке("Объект.Слои["+Объект.Слои.Индекс(СтрокаСлой)+"].Слой", ТекстСообщения);
				ЕстьОшибки=Истина;
			КонецЕсли;
			ТекстМоделиJSON = ИзменитьИмяМоделиJSON(ТекстМоделиJSON, СтрокаСлой.Имя);
			Ид = СтрЗаменить(Нейро_СозданиеМоделиНаСервере.Транслит(СтрокаСлой.Имя)," ","_");
			//ПутьКФайлуМодели = ПутьККаталогуОбучения+ИмяМодели+".json";
			ПутьКФайлуМодели = ПутьККаталогуОбучения+Ид+".json";
			ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуМодели, КодировкаТекста.ANSI);
			ЗаписьТекста.Записать(ТекстМоделиJSON);
			ЗаписьТекста.Закрыть();	
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	//ТекстМоделиJSON=Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Объект.Модель, "ТекстМоделиJSON");
	//Если СокрЛП(ТекстМоделиJSON)="" Тогда
	//	Сообщить("Информация о модели отсутствует! Сформируйте модель заново.");
	//	Возврат;
	//КонецЕсли;
	//ЗаписьТекста = Новый ЗаписьТекста(ПутьККаталогуОбучения+"\model.json", КодировкаТекста.ANSI);
	//ЗаписьТекста.Записать(ТекстМоделиJSON);
	//ЗаписьТекста.Закрыть();	
	//Если Не Нейро_Обучение.СформироватьТекстПрограммы(Объект, ЭтаФорма) Тогда Возврат КонецЕсли;
	//Модифицированность=Истина;
	//
	Оп = Новый ОписаниеОповещения("СкомпоноватьМодельЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", Объект.ИдентификаторМодели+".py");
	ДопПараметры.Вставить("ФайлОшибок", "model_"+Объект.ИдентификаторМодели+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", "model_"+Объект.ИдентификаторМодели+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, ДополнительныеПараметры);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Объект.ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ИзменитьИмяМоделиJSON(ТекстМоделиJSON, ИмяМодели)
	ДокОбъект=РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.ИзменитьИмяМоделиJSON(ТекстМоделиJSON, ИмяМодели);
КонецФункции

&НаСервере
Функция СформироватьМодель(ИдМодели)
	ДокОбъект=РеквизитФормыВЗначение("Объект");
	ДопПараметры=Новый Структура;
	ДопПараметры.Вставить("ПутьККаталогуОбучения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ИдМодели", ИдМодели);
	Возврат ДокОбъект.СформироватьМодель(Объект, ДопПараметры);
КонецФункции

&НаКлиенте
Процедура СкомпоноватьМодельЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Модифицированность = Истина; 
	Объект.СводкаМодели=СообщенияПитон.ПолучитьТекст();
	ПутьКФайлуМодели = Результат+Объект.ИдентификаторМодели+".json";
	ПутьКСхемеМодели = Результат+Объект.ИдентификаторМодели+".png";
	
	Если ИспользоватьGraphviz Тогда
		ОпОп = Новый ОписаниеОповещения("ПослеПоискаФайловВКаталоге", ЭтотОбъект, ПутьКФайлуМодели);
		НачатьПоискФайлов(ОпОп, Результат, Объект.ИдентификаторМодели+".png", Ложь);
	Иначе
		ПрочитатьМодельИзJSON(ПутьКФайлуМодели);
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаФайловВКаталоге(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтаФорма, ДополнительныеПараметры);
	НачатьПомещениеФайла(ОписаниеОповещения,, НайденныеФайлы[0].ПолноеИмя, Ложь, УникальныйИдентификатор); 
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла,ДопПараметры) Экспорт
	Если Не Результат Тогда 
		Возврат; 
	КонецЕсли; 
	СсылкаНаКартинку = Адрес; 
	
	Элементы.ГруппаГрафическаяСхема.Скрыть(); 
	Элементы.ГруппаГрафическаяСхема.Показать(); 
	ПрочитатьМодельИзJSON(ДопПараметры)
	//Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьМодельИзJSON(ПутьКФайлу)
	Текст = Новый ЧтениеТекста(ПутьКФайлу);
	СтрокаJSON = Текст.Прочитать();
	Текст.Закрыть();
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, ПутьКФайлу);
	КонецЕсли;
	Если СтрокаJSON<>Неопределено И СтрДлина(СтрокаJSON)>0 Тогда
		Объект.ТекстМоделиJSON=СтрокаJSON;
		Модифицированность=Истина;
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		ПараметрыФормы = Новый Структура("ТекстМоделиJSON", Объект.ТекстМоделиJSON);
		ОткрытьФорму("Справочник.Нейро_ПодключенныеМодели.Форма.ФормаЭлемента",ПараметрыФормы,ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПредставлениеПараметровПриИзменении(Элементы.ПредставлениеПараметров);
	
	Нейро_РаботаСФайлами.ПолучитьКаталогНейроконструктора(ЭтотОбъект);
	//Оп = Новый ОписаниеОповещения("ПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект);
	//НачатьПолучениеКаталогаВременныхФайлов(Оп);
	
	ИспользоватьGraphviz=Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьGraphviz");
	
	Если ИспользоватьGraphviz Тогда
		Элементы.ГруппаГрафическаяСхема.Показать(); 
		Элементы.ГруппаСводкаМодели.Скрыть();
	Иначе
		Элементы.ГруппаГрафическаяСхема.Скрыть(); 
		Элементы.ГруппаСводкаМодели.Показать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЭтоАдресВременногоХранилища(СсылкаНаКартинку)  Тогда 
		ФайлКартинки = ПолучитьИзВременногоХранилища(СсылкаНаКартинку); 
		ТекущийОбъект.КартинкаМодели = Новый ХранилищеЗначения(ФайлКартинки); 
		УдалитьИзВременногоХранилища(СсылкаНаКартинку); 
		СсылкаНаКартинку = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"КартинкаМодели"); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СсылкаНаКартинку = ПолучитьНавигационнуюСсылку(Объект.Ссылка,"КартинкаМодели");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзМодели(Команда)
	//ПараметрыФормы = Новый Структура("ТекстМоделиJSON", Объект.ТекстМоделиJSON);
	ОткрытьФорму("Справочник.Нейро_ПодключенныеМодели.ФормаВыбора",,ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ИмяФормыИсточника=ПолучитьФорму("Справочник.Нейро_ПодключенныеМодели.ФормаВыбора").ИмяФормы;
	Если ИсточникВыбора.ИмяФормы=ИмяФормыИсточника Тогда
		ЗаполнитьТЧИзМодели(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧИзМодели(МодельСсылка)
	//Сообщить("Заполнить ТЧ из "+МодельСсылка);
	ПостроитьДеревоМоделиНаСервере(МодельСсылка);
	Если Элементы.Слои.ТекущаяСтрока=Неопределено И Объект.Слои.Количество()>0 Тогда
		Элементы.Слои.ТекущаяСтрока=Объект.Слои[0].ПолучитьИдентификатор();
	КонецЕсли;
	СлоиПриАктивизацииСтроки(Элементы.Слои);
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоМоделиНаСервере(МодельСсылка) Экспорт
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Структуры=ДокументОбъект.ПостроитьДеревоМоделиНаСервере(МодельСсылка.ТекстМоделиJSON);	
	Если Структуры.Свойство("Ошибка") Тогда
		ВызватьИсключение(Структуры.Сообщение);
	КонецЕсли;
	//Заголовок=Новый ДеревоЗначений;
	ДеревоШаблон = Структуры.ДеревоJSON.Скопировать();
	Для Каждого СтрокаДЗ Из ДеревоШаблон.Строки Цикл
		СтрокаДЗ.Строки.Очистить();
	КонецЦикла;
	ИмяГруппы = "AUTO"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	МассивМоделей=Новый Массив;
	Нейро_СозданиеМоделиНаСервере.СоздатьВложенныеМодели(ИмяГруппы, Структуры.ДеревоJSON, ДеревоШаблон, МассивМоделей, 0);
	Объект.ИмяМодели = Структуры.СтруктураДереваJSON.config.name;
	ДокументОбъект.ЗаполнитьСлоиНаСервере(Объект, Структуры.СтруктураМодели, МассивМоделей)
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСлояЗначениеПриИзменении(Элемент)
	Элементы.ПараметрыСлояЗначение.ВыбиратьТип = Элементы.ПараметрыСлоя.ТекущиеДанные.Значение=Неопределено;
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСлояЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Элементы.ПараметрыСлоя.ТекущиеДанные.Значение=Неопределено;
	Элементы.ПараметрыСлояЗначение.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпозицияИндексыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если Элементы.Композиция.ТекущиеДанные.Индексы<>"" Тогда 
		Элементы.Композиция.ТекущиеДанные.Индексы=Элементы.Композиция.ТекущиеДанные.Индексы+", " 
	КонецЕсли;
	Элементы.Композиция.ТекущиеДанные.Индексы=Элементы.Композиция.ТекущиеДанные.Индексы+ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура СлоиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	//Если НоваяСтрока И Не Копирование Тогда
	//	Элемент.ТекущиеДанные.Тренируемый=Истина
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьГрафическиПриИзменении(Элемент)
	Нейро_ОбщийМодуль.УстановитьНастройку("ИспользоватьGraphviz", ИспользоватьGraphviz);
КонецПроцедуры

&НаКлиенте
Процедура СлоиПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если ТипЗнч(Элемент.ТекущиеДанные.Слой)=Тип("СправочникСсылка.Нейро_Слои") Тогда
		ТипСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Элемент.ТекущиеДанные.Слой,"ТипСлоя");
		Если ТипСлоя=ПредопределенноеЗначение("Перечисление.Нейро_ТипыСлоев.InputLayer") Тогда
			Элементы.СлоиТренируемый.ТолькоПросмотр=Истина
		Иначе
			Элементы.СлоиТренируемый.ТолькоПросмотр=Ложь
		КонецЕсли;
	Иначе
		Элементы.СлоиТренируемый.ТолькоПросмотр=Истина
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПараметровПриИзменении(Элемент)
	Если ПредставлениеПараметров=0 Тогда
		Элементы.ПараметрыСлояИмя.Видимость=Истина;
		Элементы.ПараметрыСлояИд.Видимость=Ложь;
	ИначеЕсли ПредставлениеПараметров=1 Тогда
		Элементы.ПараметрыСлояИмя.Видимость=Ложь;
		Элементы.ПараметрыСлояИд.Видимость=Истина;
	ИначеЕсли ПредставлениеПараметров=2 Тогда
		Элементы.ПараметрыСлояИмя.Видимость=Истина;
		Элементы.ПараметрыСлояИд.Видимость=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСлояПередУдалением(Элемент, Отказ)
	Отказ=Истина;
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаУдалитьПараметр", ЭтотОбъект, Элемент.ТекущаяСтрока);
	СтрокаУдалить = "Удалить параметр '"+Элемент.ТекущиеДанные.Имя+"' ("+Элемент.ТекущиеДанные.Ид+")?";
	ПоказатьВопрос(Оповещение, СтрокаУдалить, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаУдалитьПараметр(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокаТЧ=Объект.ПараметрыСлоя.НайтиПоИдентификатору(Параметры);
        Объект.ПараметрыСлоя.Удалить(СтрокаТЧ);
    КонецЕсли;
КонецПроцедуры
