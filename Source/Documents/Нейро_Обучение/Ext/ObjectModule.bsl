Перем ДеревоJSON Экспорт;
Перем СтруктураДереваJSON Экспорт;
Перем СтруктураМодели Экспорт;
Перем ДеревоJSON1 Экспорт;
Перем СтруктураДереваJSON1 Экспорт;
//Перем МассивМетрикПоКатегориям;

&НаСервере
Функция ВсегоСлоев() Экспорт
	Дерево=Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Свойство");
	Дерево.Колонки.Добавить("Значение");
	Дерево.Колонки.Добавить("Тип");
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSON(Модель.ТекстМоделиJSON, Дерево);
	СтруктураМодели = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSON(Дерево);
	Если СтруктураМодели=Неопределено Или Не СтруктураМодели.Свойство("class_name") Тогда Возврат 0 КонецЕсли;
	Возврат ПосчитатьКоличествоСлоевМодели(СтруктураМодели.config.layers);
КонецФункции

&НаСервере
Функция ПосчитатьКоличествоСлоевМодели(МассивСлоев)
	Результат = 0;
	Для Каждого СтруктураСлоя Из МассивСлоев Цикл
		Если СтруктураСлоя.class_name = "Model" Тогда
			Результат = Результат + ПосчитатьКоличествоСлоевМодели(СтруктураСлоя.config.layers)
		Иначе
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции


#Область ИзменениеМодели

&НаСервере
Функция ОбработатьМодельНаСервере(Объект, Форма, Очищать=Истина) Экспорт
	Если Очищать Тогда
		Объект.Образцы.Очистить();
		Объект.Цели.Очистить();
	КонецЕсли;
	Форма.ДеревоСлоев.ПолучитьЭлементы().Очистить();
	
	Форма.СтруктураМодели = ПостроитьДеревоМоделиНаСервере(Объект.Модель.ТекстМоделиJSON);	
	Если Форма.СтруктураМодели=Неопределено Тогда
		Возврат Ложь
	КонецЕсли;
	
	//МаксДоп = 7;
	//Дерево=Новый ДеревоЗначений;
	//Дерево.Колонки.Добавить("Свойство");
	//Дерево.Колонки.Добавить("Значение");
	//Дерево.Колонки.Добавить("Тип");
	//Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSON(Модель.ТекстМоделиJSON, Дерево);
	//СтруктураМодели = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSON(Дерево);
	//Если ПосчитатьКоличествоСлоевМодели(СтруктураМодели.config.layers)>МаксДоп Тогда
	//	Возврат Ложь
	//КонецЕсли;
	
	Если Очищать Тогда
		Для Каждого Вход Из Форма.СтруктураМодели.Входы Цикл
			НоваяСтрока = Объект.Образцы.Добавить();
			НоваяСтрока.ИмяСлоя = Вход.ИмяСлоя
		КонецЦикла;
		Для Каждого Выход Из Форма.СтруктураМодели.Выходы Цикл
			НоваяСтрока = Объект.Цели.Добавить();
			НоваяСтрока.ИмяСлоя = Выход.ИмяСлоя;
		КонецЦикла;
	Иначе
		МассивУдалить = Новый Массив;
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			Найдено = Ложь;
			Для Каждого Вход Из Форма.СтруктураМодели.Входы Цикл
				Если СтрокаОбразцы.ИмяСлоя=Вход.ИмяСлоя Тогда
					Найдено = Истина; Прервать
				КонецЕсли;
			КонецЦикла;
			Если Не Найдено Тогда
				МассивУдалить.Добавить(СтрокаОбразцы); 
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивУдалить Цикл
			Объект.Образцы.Удалить(СтрокаТЧ);
		КонецЦикла;
		МассивУдалить.Очистить();
		Для Каждого СтрокаЦели Из Объект.Цели Цикл
			Найдено = Ложь;
			Для Каждого Выход Из Форма.СтруктураМодели.Выходы Цикл
				Если СтрокаЦели.ИмяСлоя=Выход.ИмяСлоя Тогда
					Найдено = Истина; Прервать
				КонецЕсли;
			КонецЦикла;
			Если Не Найдено Тогда
				МассивУдалить.Добавить(СтрокаЦели);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивУдалить Цикл
			Объект.Цели.Удалить(СтрокаТЧ);
		КонецЦикла;
		Для Каждого Вход Из Форма.СтруктураМодели.Входы Цикл
			НоваяСтрока = Неопределено;
			Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
				Если СтрокаОбразцы.ИмяСлоя = Вход.ИмяСлоя Тогда
					НоваяСтрока = СтрокаОбразцы.ИмяСлоя; Прервать
				КонецЕсли;
			КонецЦикла;
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = Объект.Образцы.Добавить();
				НоваяСтрока.ИмяСлоя = Вход.ИмяСлоя
			КонецЕсли;
		КонецЦикла;
		Для Каждого Выход Из Форма.СтруктураМодели.Выходы Цикл
			НоваяСтрока = Неопределено;
			Для Каждого СтрокаЦели Из Объект.Цели Цикл
				Если СтрокаЦели.ИмяСлоя = Выход.ИмяСлоя Тогда
					НоваяСтрока = СтрокаЦели.ИмяСлоя; Прервать
				КонецЕсли;
			КонецЦикла;
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = Объект.Цели.Добавить();
				НоваяСтрока.ИмяСлоя = Выход.ИмяСлоя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Объект.ЗагрузкаВесов.Очистить();
	СтрокаМодель=Форма.ДеревоСлоев.ПолучитьЭлементы().Добавить();
	СтрокаМодель.ИмяСлоя=Объект.Модель.ИмяМодели;
	СтрокаМодель.Модель=Истина;
	СтрокаМодель.ПутьКФайлу=Объект.ПутьККонтрольнойТочке;
	ПостроитьДеревоСлоев(Форма.СтруктураМодели.Слои, СтрокаМодель.ПолучитьЭлементы());

	Возврат Истина
КонецФункции

&НаСервере
Функция ОбработатьМодельНаСервереПриОткрытии(Объект, Форма) Экспорт
	Форма.СтруктураМодели = ПостроитьДеревоМоделиНаСервере(Объект.Модель.ТекстМоделиJSON);	
	Если Форма.СтруктураМодели=Неопределено Тогда
		Возврат Ложь
	КонецЕсли;
	
	//УдалитьЛишниеСлои(Форма.СтруктураМодели.Слои, 0);
	
	Форма.ДеревоСлоев.ПолучитьЭлементы().Очистить();
	СтрокаМодель=Форма.ДеревоСлоев.ПолучитьЭлементы().Добавить();
	СтрокаМодель.ИмяСлоя=Объект.Модель.ИмяМодели;
	СтрокаМодель.Модель=Истина;
	СтрокаМодель.ПутьКФайлу=Объект.ПутьККонтрольнойТочке;
	ПостроитьДеревоСлоев(СтруктураМодели.Слои, СтрокаМодель.ПолучитьЭлементы());
	ЗаполнитьПутиКВесамИзТч(Объект, Форма);
	
	Возврат Истина
КонецФункции

&НаСервере
Процедура УдалитьЛишниеСлои(Слои, СчКол)
	Для Сч = 0 По Слои.Количество()-1 Цикл
		Если Слои[Сч].ИдСлоя="Model" Тогда
			УдалитьЛишниеСлои(Слои[Сч].Параметры.Слои, СчКол)
		Иначе
			СчКол = СчКол + 1;
			Если СчКол>7 Тогда
				Слои[Сч].ИдСлоя = "";
				Слои[Сч].Имя = "";
				Слои[Сч].Параметры = Новый Структура;
				Слои[Сч].Положение = Неопределено;
				Слои[Сч].Тип = Неопределено;
				Слои[Сч].ТипСлоя = Неопределено;
				Слои[Сч].Тренируемый = Ложь;
				Слои[Сч].Форма = Новый Массив;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоСлоев(Слои, ЭлементыДерева)
	Для Каждого СтруктураСлой Из Слои Цикл
		//Если СтруктураСлой.ИдСлоя = "InputLayer" Тогда Продолжить КонецЕсли;
		НовыйЭлемент=ЭлементыДерева.Добавить();
		НовыйЭлемент.ИмяСлоя = СтруктураСлой.Имя;
		Если СтруктураСлой.Параметры.Свойство("Слои") Тогда
			НовыйЭлемент.Модель=Истина;
			ПостроитьДеревоСлоев(СтруктураСлой.Параметры.Слои, НовыйЭлемент.ПолучитьЭлементы())
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПутиКВесамИзТч(Объект, Форма)
	МассивУдалить=Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.ЗагрузкаВесов Цикл
		СтрокаДерева = НайтиСтрокуДереваПоПути(СтрокаТЧ, Форма.ДеревоСлоев.ПолучитьЭлементы(), 0);
		Если СтрокаДерева=Неопределено Тогда
			МассивУдалить.Добавить(СтрокаТЧ);
		Иначе
			СтрокаДерева.ПутьКФайлу = СтрокаТЧ.ПутьКФайлу;
			СтрокаДерева.ЗагружатьПараметры = СтрокаТЧ.ЗагружатьПараметры;
			СтрокаДерева.НеОбучать = СтрокаТЧ.НеОбучать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из МассивУдалить Цикл
		Объект.ЗагрузкаВесов.Удалить(СтрокаТЧ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуДереваПоПути(СтрокаТЧ, СтрокиДерева, Индекс)
	МассивУзлов=СтрРазделить(СтрокаТЧ.Путь,"/",Ложь);
	ИскатьУзел=Ложь;
	Если МассивУзлов.Количество()=0 Тогда
		ИскатьИмя=СтрокаТЧ.ИмяСлоя;
	Иначе
		Если Индекс>МассивУзлов.Количество()-1 Тогда
			ИскатьИмя=СтрокаТЧ.ИмяСлоя;
		Иначе
			ИскатьИмя=МассивУзлов[Индекс]; ИскатьУзел=Истина
		КонецЕсли;
	КонецЕсли;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИмяСлоя=ИскатьИмя Тогда
			Если ИскатьУзел Тогда
				Возврат НайтиСтрокуДереваПоПути(СтрокаТЧ, СтрокаДерева.ПолучитьЭлементы(), Индекс+1)
			Иначе
				Возврат СтрокаДерева
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено
КонецФункции

&НаСервере
Функция ПостроитьДеревоМоделиНаСервере(ТекстМоделиJSON) Экспорт
	//Результат = Новый Структура("Ошибка, Сообщение", Ложь, "");

	ДеревоJSON.Строки.Очистить();
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(ТекстМоделиJSON, ДеревоJSON);
	СтруктураДереваJSON = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON);
	Если СтруктураДереваJSON.Свойство("class_name") Тогда
		Если СтруктураДереваJSON.class_name<>"Model" Тогда
			//Результат.Ошибка = Истина;
			//Результат.Сообщение = "Неверный класс объекта: "+Символ(34)+СтруктураДереваJSON.class_name+Символ(34);
			Возврат Неопределено
		КонецЕсли;
	Иначе
		//Результат.Ошибка = Истина;
		//Результат.Сообщение = "Не удалось определить класс объекта!";
		Возврат Неопределено
	КонецЕсли;
	
	СтруктураМодели=Новый Структура("Слои, Входы, Выходы, Формы, Входящие");
	СтруктураМодели.Слои     = Новый Массив;
	СтруктураМодели.Входы    = Новый Массив;
	СтруктураМодели.Выходы   = Новый Массив;
	СтруктураМодели.Формы    = Новый Массив;
	СтруктураМодели.Входящие = Новый Массив;
	Нейро_СозданиеМоделиНаСервере.ПеребратьМодельИзСтруктурыJSONНаСервере(СтруктураМодели, СтруктураДереваJSON.config);
	
	Возврат СтруктураМодели
КонецФункции

#КонецОбласти

&НаСервере
Функция ПостроитьДеревоИсторииНаСервере(ТекстМоделиJSON) Экспорт

	ДеревоJSON1.Строки.Очистить();
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(ТекстМоделиJSON, ДеревоJSON1);
	СтруктураДереваJSON1 = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON1);
	
	Возврат СтруктураДереваJSON1
КонецФункции

Функция СоздатьКатегорииМетрик(Метрика) Экспорт
	МассивМетрикПоКатегориям=Новый Массив;
	Имена=Новый Массив;
	Имена.Добавить("loss");
	Имена.Добавить("acc");
	Имена.Добавить("ce");
	
	Если ТипЗнч(Метрика)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
		МассивИмен=Нейро_ОбщийМодуль.ПолучитьТекстыИзМассива(Метрика);
		Для Каждого Текст Из МассивИмен Цикл
			Имена.Добавить(Текст);
		КонецЦикла;
	ИначеЕсли Метрика<>Неопределено Тогда
		Если ТипЗнч(Метрика)=Тип("СправочникСсылка.Нейро_Функции") Тогда
			Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Функция");
			Имена.Добавить(Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Тип, Метрика));
		ИначеЕсли ТипЗнч(Метрика)=Тип("ПеречислениеСсылка.Нейро_Метрики") Тогда
			Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Метрика");
			Имена.Добавить(Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Тип, Метрика));
		ИначеЕсли ТипЗнч(Метрика)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
			Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.ФункцияПотерь");
			Имена.Добавить(Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Тип, Метрика));
		//ИначеЕсли НЕ ЗначениеЗаполнено(Метрика) Тогда
		//	Для Каждого ИмяМетрики Из СтруктураДереваJSON1.params.metrics Цикл
		//		
		//	КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МассивМетрики   = Новый Массив;
	МассивВалидации = Новый Массив;
	
	Если СтруктураДереваJSON1.params.Свойство("metrics") Тогда
		Для Каждого ИмяМетрики Из СтруктураДереваJSON1.params.metrics Цикл
			Если Лев(ИмяМетрики, 4)="val_" Тогда
				МассивВалидации.Добавить(ИмяМетрики)
			Иначе
				МассивМетрики.Добавить(ИмяМетрики)
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого КлючИЗначение Из СтруктураДереваJSON1.history Цикл
			Если Лев(КлючИЗначение.Ключ, 4)="val_" Тогда
				МассивВалидации.Добавить(КлючИЗначение.Ключ)
			Иначе
				МассивМетрики.Добавить(КлючИЗначение.Ключ)
			КонецЕсли;
		КонецЦикла;
		//МассивВалидации.Добавить("val_loss");
		//МассивМетрики.Добавить("loss")
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураДереваJSON1.history Цикл
		Если МассивМетрики.Найти(КлючИЗначение.Ключ)=Неопределено И МассивВалидации.Найти(КлючИЗначение.Ключ)=Неопределено Тогда
			МассивМетрики.Добавить(КлючИЗначение.Ключ);
			Имена.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИскатьМетрику Из Имена Цикл
		МассивНайдено = Новый Массив;
		Для Каждого ИмяМетрики Из МассивМетрики Цикл
			Если ИмяМетрики=ИскатьМетрику Или Прав(ИмяМетрики,СтрДлина(ИскатьМетрику)+1)="_"+ИскатьМетрику Тогда
				Если ИмяМетрики=ИскатьМетрику Тогда
					СтруктураМетрики = Новый Структура("ИмяСлоя, Метрика, Валидация");
					СтруктураМетрики.Метрика = ИмяМетрики;
					ИндексВалидации = МассивВалидации.Найти("val_"+ИмяМетрики);
					Если ИндексВалидации<>Неопределено Тогда
						СтруктураМетрики.Валидация = МассивВалидации[ИндексВалидации];
					КонецЕсли;
					МассивНайдено.Добавить(СтруктураМетрики);
				КонецЕсли;
				Для Каждого ИмяМетрики1 Из МассивМетрики Цикл
					Если Прав(ИмяМетрики1,СтрДлина(ИскатьМетрику)+1)="_"+ИскатьМетрику Тогда
						ИмяСлоя=Лев(ИмяМетрики1, СтрДлина(ИмяМетрики1)-(СтрДлина(ИскатьМетрику)+1));
						СтруктураМетрики = Новый Структура("ИмяСлоя, Метрика, Валидация");
						СтруктураМетрики.ИмяСлоя = ИмяСлоя;
						СтруктураМетрики.Метрика = ИмяМетрики1;
						ИндексВалидации = МассивВалидации.Найти("val_"+ИмяМетрики1);
						Если ИндексВалидации<>Неопределено Тогда
							СтруктураМетрики.Валидация = МассивВалидации[ИндексВалидации];
						КонецЕсли;
						МассивНайдено.Добавить(СтруктураМетрики);
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если МассивНайдено.Количество()>0 Тогда
			МассивМетрикПоКатегориям.Добавить(Новый Структура("Тип, Массив",ИскатьМетрику,МассивНайдено));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивМетрикПоКатегориям;
//1."loss"
//2."acc"
//3."ce"
//4.Имя метрики
//5.Имя функции потерь
//6.ИмяСлоя_1-5
//7.val_1-5
//8.val_6
КонецФункции

Функция ПолучитьПоказателиКачества(СтруктураДереваJSON1, МассивМетрикПоКатегориям, Индекс) Экспорт
	Если Индекс>=МассивМетрикПоКатегориям.Количество() Тогда Возврат Неопределено КонецЕсли;
	
	КатегорияМетрики = МассивМетрикПоКатегориям.Получить(Индекс).Значение;
	Метрики=Новый Массив; Валидации=Новый Массив;
	СтруктурыМетрик=Новый Массив; СтруктурыВалидации=Новый Массив;
	ТипМетрики=""; ТипВалидации="";
	Для Каждого СтруктураКатегории Из КатегорияМетрики.Массив Цикл
		Если СтруктураДереваJSON1.history.Свойство(СтруктураКатегории.Метрика) Тогда
			//Метрики.Добавить(СтруктураДереваJSON1.history[СтруктураКатегории.Метрика]);
			//СтруктурыМетрик.Добавить(СтруктураКатегории);
			ОписаниеМетрики = Новый Структура("ИмяСлоя, Показатель, Значения, ЭтоВалидация");
			ОписаниеМетрики.ЭтоВалидация=Ложь;
			ОписаниеМетрики.ИмяСлоя  = СтруктураКатегории.ИмяСлоя;
			ОписаниеМетрики.Показатель  = СтруктураКатегории.Метрика;
			ОписаниеМетрики.Значения = СтруктураДереваJSON1.history[СтруктураКатегории.Метрика];
			Метрики.Добавить(ОписаниеМетрики);
			ТипМетрики=КатегорияМетрики.Тип;
		КонецЕсли;
		Если СтруктураКатегории.Валидация<>Неопределено И СтруктураДереваJSON1.history.Свойство(СтруктураКатегории.Валидация) Тогда
			//Валидации.Добавить(СтруктураДереваJSON1.history[СтруктураКатегории.Метрика]);
			//СтруктурыВалидации.Добавить(СтруктураКатегории);
			ОписаниеМетрики = Новый Структура("ИмяСлоя, Показатель, Значения, ЭтоВалидация");
			ОписаниеМетрики.ЭтоВалидация=Истина;
			ОписаниеМетрики.ИмяСлоя  = СтруктураКатегории.ИмяСлоя;
			ОписаниеМетрики.Показатель  = СтруктураКатегории.Валидация;
			ОписаниеМетрики.Значения = СтруктураДереваJSON1.history[СтруктураКатегории.Валидация];
			Валидации.Добавить(ОписаниеМетрики);
			ТипВалидации=КатегорияМетрики.Тип;
		КонецЕсли;
	КонецЦикла;
	
	Если Валидации.Количество()=0 Тогда
		Если Индекс+1<=МассивМетрикПоКатегориям.Количество()-1 Тогда
			КатегорияМетрики = МассивМетрикПоКатегориям.Получить(Индекс+1).Значение;
			Для Каждого СтруктураКатегории Из КатегорияМетрики.Массив Цикл
				Если СтруктураДереваJSON1.history.Свойство(СтруктураКатегории.Метрика) Тогда
					//Валидации.Добавить(СтруктураДереваJSON1.history[СтруктураКатегории.Метрика]);
					//СтруктурыВалидации.Добавить(СтруктураКатегории);
					ОписаниеМетрики = Новый Структура("ИмяСлоя, Показатель, Значения, ЭтоВалидация");
					ОписаниеМетрики.ЭтоВалидация=Ложь;
					ОписаниеМетрики.ИмяСлоя  = СтруктураКатегории.ИмяСлоя;
					ОписаниеМетрики.Показатель  = СтруктураКатегории.Метрика;
					ОписаниеМетрики.Значения = СтруктураДереваJSON1.history[СтруктураКатегории.Метрика];
					Валидации.Добавить(ОписаниеМетрики);
					ТипВалидации=КатегорияМетрики.Тип;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Метрики, Валидации, ТипМетрики, ТипВалидации", Метрики, Валидации,ТипМетрики,ТипВалидации);
КонецФункции

&НаСервере
Функция ПостроитьДеревоОценкиНаСервере(ТекстМоделиJSON, ИменаСлоев) Экспорт
	ДеревоJSON2=Новый ДеревоЗначений;
	ДеревоJSON2.Колонки.Добавить("Свойство");
	ДеревоJSON2.Колонки.Добавить("Значение");
	ДеревоJSON2.Колонки.Добавить("Тип");
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(ТекстМоделиJSON, ДеревоJSON2);
	СтруктураДереваJSON2 = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON2);
	
	Возврат ПреобразоватьРезультатНаСервере(СтруктураДереваJSON2, ИменаСлоев)
КонецФункции

&НаСервере
Функция ПреобразоватьРезультатНаСервере(СтруктураДереваJSON2, ИменаСлоев) Экспорт
	Имена=Новый Массив;
	Имена.Добавить("loss");
	Имена.Добавить("acc");
	Имена.Добавить("ce");
	Для Каждого ИдМетрики Из СтруктураДереваJSON2.metrics Цикл
		Имена.Добавить(ИдМетрики);
	КонецЦикла;
	
	МассивНайдено = Новый Массив; МассивОбработано = Новый Массив;
	Для Каждого ИскатьМетрику Из Имена Цикл
		Для Сч=0 По СтруктураДереваJSON2.metrics_names.Количество()-1 Цикл
			ИмяМетрики = СтруктураДереваJSON2.metrics_names[Сч];
			Если ИмяМетрики=ИскатьМетрику Или Прав(ИмяМетрики,СтрДлина(ИскатьМетрику)+1)="_"+ИскатьМетрику Тогда
				Если ИмяМетрики=ИскатьМетрику Тогда
					СтруктураМетрики = Новый Структура("ИмяСлоя, Метрика, Значение");
					СтруктураМетрики.Метрика = ИмяМетрики;
					Если ТипЗнч(СтруктураДереваJSON2.values)=Тип("Массив") Тогда
						СтруктураМетрики.Значение = СтруктураДереваJSON2.values[Сч];
					Иначе
						СтруктураМетрики.Значение = СтруктураДереваJSON2.values;
					КонецЕсли;
					МассивНайдено.Добавить(СтруктураМетрики);
					МассивОбработано.Добавить(ИмяМетрики);
				КонецЕсли;
				Для Сч1=0 По СтруктураДереваJSON2.metrics_names.Количество()-1 Цикл
					ИмяМетрики1 = СтруктураДереваJSON2.metrics_names[Сч1];
					Если Прав(ИмяМетрики1,СтрДлина(ИскатьМетрику)+1)="_"+ИскатьМетрику Тогда
						ИмяСлоя=Лев(ИмяМетрики1, СтрДлина(ИмяМетрики1)-(СтрДлина(ИскатьМетрику)+1));
						СтруктураМетрики = Новый Структура("ИмяСлоя, Метрика, Значение");
						СтруктураМетрики.ИмяСлоя = ИмяСлоя;
						СтруктураМетрики.Метрика = ИскатьМетрику;
						Если ТипЗнч(СтруктураДереваJSON2.values)=Тип("Массив") Тогда
							СтруктураМетрики.Значение = СтруктураДереваJSON2.values[Сч1];
						Иначе
							СтруктураМетрики.Значение = СтруктураДереваJSON2.values;
						КонецЕсли;
						МассивНайдено.Добавить(СтруктураМетрики);
						МассивОбработано.Добавить(ИмяМетрики1);
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//Если МассивНайдено.Количество()>0 Тогда
		//	МассивМетрикПоКатегориям.Добавить(Новый Структура("Тип, Массив",ИскатьМетрику,МассивНайдено));
		//КонецЕсли;
	КонецЦикла;
	
	//Если Keras вернул метрики не строкой, а объектом, который невозможно сериализовать в JSON,
	//то массив metrics не заполняется и нужно определить метрики по именам metrics_names
	// (актуально для встроенного tf.Keras, который возвращает объект MeanMetricWrapper вместо "Accuracy")
	Для Сч=0 По СтруктураДереваJSON2.metrics_names.Количество()-1 Цикл
		ИмяМетрики = СтруктураДереваJSON2.metrics_names[Сч];
		Если МассивОбработано.Найти(ИмяМетрики)=Неопределено Тогда
			МасЧасти = СтрРазделить(ИмяМетрики,"_",Ложь);
			Если МасЧасти.Количество()=0 Тогда Продолжить КонецЕсли;
			СтруктураМетрики = Новый Структура("ИмяСлоя, Метрика, Значение");
			Если МасЧасти.Количество()=1 Тогда 
				СтруктураМетрики.ИмяСлоя = "";
				СтруктураМетрики.Метрика = МасЧасти[0];
			Иначе
				СлойВМетрике="";
				Для Каждого ИмяСлоя Из ИменаСлоев Цикл
					Если Лев(ИмяМетрики, СтрДлина(ИмяСлоя)+1)=ИмяСлоя+"_" Тогда
						СлойВМетрике=ИмяСлоя; Прервать
					КонецЕсли;
				КонецЦикла;
				Если СлойВМетрике="" Тогда
					СтруктураМетрики.ИмяСлоя = "";
					СтруктураМетрики.Метрика = ИмяМетрики;
				Иначе
					СтруктураМетрики.ИмяСлоя = СлойВМетрике;
					СтруктураМетрики.Метрика = Прав(ИмяМетрики, СтрДлина(ИмяМетрики)-(СтрДлина(СлойВМетрике)+1));
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(СтруктураДереваJSON2.values)=Тип("Массив") Тогда
				СтруктураМетрики.Значение = СтруктураДереваJSON2.values[Сч];
			Иначе
				СтруктураМетрики.Значение = СтруктураДереваJSON2.values;
			КонецЕсли;
			МассивНайдено.Добавить(СтруктураМетрики);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивНайдено;
КонецФункции

&НаСервере
Функция ДеревоВJSON(Дерево) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписатьСтрокиДереваВJSON(Дерево.Строки, ЗаписьJSON);
	ЗаписьJSON.ЗаписатьКонецМассива();
	Возврат ЗаписьJSON.Закрыть();	
КонецФункции

&НаСервере
Процедура ЗаписатьСтрокиДереваВJSON(Строки, ЗаписьJSON)
	Для Каждого Строка Из Строки Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("Name");
		ЗаписьJSON.ЗаписатьЗначение(Строка.ИмяСлоя);
		ЗаписьJSON.ЗаписатьИмяСвойства("Path");
		ЗаписьJSON.ЗаписатьЗначение(Строка.ПутьКФайлу);
		ЗаписьJSON.ЗаписатьИмяСвойства("LoadParameters");
		ЗаписьJSON.ЗаписатьЗначение(Строка.ЗагружатьПараметры);
		ЗаписьJSON.ЗаписатьИмяСвойства("Freeze");
		ЗаписьJSON.ЗаписатьЗначение(Строка.НеОбучать);
		//ЗаписьJSON.ЗаписатьИмяСвойства("Loss");
		//ЗаписьJSON.ЗаписатьЗначение(Строка.ФункцияПотерь);
		//ЗаписьJSON.ЗаписатьИмяСвойства("Optimizer");
		//ЗаписьJSON.ЗаписатьЗначение(Строка.Оптимизатор);
		//ЗаписьJSON.ЗаписатьИмяСвойства("Metrics");
		//ЗаписьJSON.ЗаписатьЗначение(Строка.Метрика);
		//ЗаписьJSON.ЗаписатьИмяСвойства("LossWeights");
		//ЗаписьJSON.ЗаписатьЗначение(Строка.ВесаПотерь);
		ЗаписьJSON.ЗаписатьИмяСвойства("KeyParameters");
		ЗаписьJSON.ЗаписатьЗначение(Строка.КлючПараметров);
		ЗаписьJSON.ЗаписатьИмяСвойства("Childs");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Если Строка.Строки.Количество()>0 Тогда
			ЗаписатьСтрокиДереваВJSON(Строка.Строки, ЗаписьJSON)
		КонецЕсли;
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьПараметрыКомпиляции(Объект, ЗагрузкаПараметров, СтрокаРодитель) Экспорт
	Для Каждого СтрокаДЗ Из СтрокаРодитель.Строки Цикл
		ПутьКУзлу = ПолучитьПолныйПутьКУзлуНаСервере(СтрокаДЗ);
		Отбор = Новый Структура("Путь, ИмяСлоя", ПутьКУзлу, СтрокаДЗ.ИмяСлоя);
		Строки=Объект.ЗагрузкаВесов.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Строка = Строки[0];
			Если ЗначениеЗаполнено(Строка.Оптимизатор) Или ЗначениеЗаполнено(Строка.ФункцияПотерь) 
				Или ЗначениеЗаполнено(Строка.Метрика) Или ЗначениеЗаполнено(Строка.ВесаПотерь) Тогда
				СтрокаДЗ.КлючПараметров = Строка.Путь+?(Строка.Путь="","","/")+Строка.ИмяСлоя;
				НоваяСтрока = ЗагрузкаПараметров.Добавить();
				НоваяСтрока.Ключ = СтрокаДЗ.КлючПараметров;
				НоваяСтрока.ФункцияПотерь = СформироватьТекстПрограммыФункцияПотерь(Строка.ФункцияПотерь);
				НоваяСтрока.Оптимизатор = СформироватьТекстПрограммыОптимизатор(Строка.Оптимизатор);
				НоваяСтрока.Метрика = СформироватьТекстПрограммыМетрики(Строка.Метрика);
				НоваяСтрока.ВесаПотерь = СформироватьТекстПрограммыВесаПотерь(Строка.ВесаПотерь);
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДЗ.Строки.Количество()>0 Тогда
			ПреобразоватьПараметрыКомпиляции(Объект, ЗагрузкаПараметров, СтрокаДЗ)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПрограммыФункцияПотерь(Значение)
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "None"
	ИначеЕсли ТипЗнч(Значение)=Тип("СправочникСсылка.Нейро_Функции") Или ТипЗнч(Значение)=Тип("СправочникСсылка.Нейро_Массивы")  Тогда
		Возврат Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ТипЗнч(Значение), Значение);
	Иначе
		Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.ФункцияПотерь");
		Возврат Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип, Значение);
	КонецЕсли;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыОптимизатор(Значение)
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "None"
	ИначеЕсли ТипЗнч(Значение)=Тип("ПеречислениеСсылка.Нейро_Оптимизаторы") Тогда
		Возврат "'"+Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_Оптимизаторы", Значение)+"'";
	ИначеЕсли ТипЗнч(Значение)=Тип("СправочникСсылка.Нейро_Функции") Тогда
		Возврат Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ТипЗнч(Значение), Значение);
	КонецЕсли;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыМетрики(Значение)
	Если ТипЗнч(Значение)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
		Возврат Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ТипЗнч(Значение),Значение);
	Иначе
		Если ТипЗнч(Значение)=Тип("СправочникСсылка.Нейро_Функции") Тогда
			Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Функция");
			Возврат "["+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип, Значение)+"]";
		ИначеЕсли ТипЗнч(Значение)=Тип("ПеречислениеСсылка.Нейро_Метрики") Тогда
			Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Метрика");
			Возврат "["+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип, Значение)+"]";
		ИначеЕсли ТипЗнч(Значение)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
			Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.ФункцияПотерь");
			Возврат "["+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип, Значение)+"]";
		Иначе
			Возврат "None"
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыВесаПотерь(Значение)
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "None"
	ИначеЕсли ТипЗнч(Значение)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
		Возврат Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ТипЗнч(Значение), Значение);
	Иначе
		Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Вещественное");
		Возврат "["+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип, Значение)+"]";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьПолныйПутьКУзлуНаСервере(СтрокаДЗ) Экспорт
	Родитель = СтрокаДЗ.Родитель;
	Если Родитель=Неопределено Тогда
		Возврат ""
	Иначе
		ИмяУзла=ПолучитьПолныйПутьКУзлуНаСервере(Родитель);
		Возврат ИмяУзла+?(ИмяУзла="","","/")+Родитель.ИмяСлоя
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПостроитьДеревоНаСервере(ТекстМоделиJSON) Экспорт
	ДеревоJSON2=Новый ДеревоЗначений;
	ДеревоJSON2.Колонки.Добавить("Свойство");
	ДеревоJSON2.Колонки.Добавить("Значение");
	ДеревоJSON2.Колонки.Добавить("Тип");
	
	//Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(ТекстМоделиJSON, ДеревоJSON2);
	//СтруктураДереваJSON2 = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON2);
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSON(ТекстМоделиJSON, ДеревоJSON2);
	СтруктураДереваJSON2 = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSON(ДеревоJSON2);
	
	//Возврат ПреобразоватьРезультатНаСервере(СтруктураДереваJSON2)
	Возврат СтруктураДереваJSON2
КонецФункции


ДеревоJSON=Новый ДеревоЗначений;
ДеревоJSON.Колонки.Добавить("Свойство");
ДеревоJSON.Колонки.Добавить("Значение");
ДеревоJSON.Колонки.Добавить("Тип");

ДеревоJSON1=Новый ДеревоЗначений;
ДеревоJSON1.Колонки.Добавить("Свойство");
ДеревоJSON1.Колонки.Добавить("Значение");
ДеревоJSON1.Колонки.Добавить("Тип");
