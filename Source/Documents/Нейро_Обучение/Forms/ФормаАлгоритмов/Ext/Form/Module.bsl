&НаКлиенте
Процедура СообщитьОбОшибке(Поле, Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура СписокАлгоритмовАлгоритмПриИзменении(Элемент)
	//Индекс=СписокАлгоритмов.Индекс(СписокАлгоритмов.НайтиПоИдентификатору(Элементы.СписокАлгоритмов.ТекущаяСтрока));
	Индекс = Элементы.СписокАлгоритмов.ТекущиеДанные.Номер;
	Алгоритм = Элементы.СписокАлгоритмов.ТекущиеДанные.Алгоритм;
	Отбор = Новый Структура("Номер", Индекс);
	Строки = ПараметрыАлгоритма.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		ПараметрыАлгоритма.Удалить(Строка);
	КонецЦикла;
	Элементы.СписокАлгоритмов.ТекущиеДанные.Присваивать = АлгоритмВозвращаетРезультат(Алгоритм);
	СоздатьПараметрыАлгоритма(Индекс, Алгоритм);
	Комментарий = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Алгоритм, "Описание");
КонецПроцедуры

&НаСервере
Функция АлгоритмВозвращаетРезультат(Алгоритм)
	Возврат Алгоритм.ВозвращаетРезультат;
КонецФункции

&НаСервере
Процедура СоздатьПараметрыАлгоритма(Индекс, Алгоритм)
	Для Сч = 0 По Алгоритм.Параметры.Количество()-1 Цикл
		Параметр = Алгоритм.Параметры[Сч];
		НоваяСтрока = ПараметрыАлгоритма.Добавить();
		НоваяСтрока.Номер          = Индекс;
		НоваяСтрока.НомерПараметра = Параметр.НомерСтроки;
		НоваяСтрока.Идентификатор  = Параметр.Имя;
		НоваяСтрока.Комментарий    = Параметр.Описание;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокАлгоритмовПриАктивизацииСтроки(Элемент)
	Если Элементы.СписокАлгоритмов.ТекущаяСтрока=Неопределено Тогда
		Возврат
	КонецЕсли;
	//Индекс=СписокАлгоритмов.Индекс(СписокАлгоритмов.НайтиПоИдентификатору(Элементы.СписокАлгоритмов.ТекущаяСтрока));
	Индекс = Элементы.СписокАлгоритмов.ТекущиеДанные.Номер;
	Элементы.Параметры.ОтборСтрок = Новый ФиксированнаяСтруктура("Номер", Индекс);
	Комментарий = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Элементы.СписокАлгоритмов.ТекущиеДанные.Алгоритм, "Описание");
КонецПроцедуры

&НаКлиенте
Процедура СписокАлгоритмовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Номер = ПолучитьНовыйНомер();
		//Тз = СписокАлгоритмов.Выгрузить(,"Номер");
		//Если Тз.Количество()>1 Тогда
		//	Тз.Сортировать("Номер Убыв");
		//	Элемент.ТекущиеДанные.Номер = Тз[0].Номер+1;
		//КонецЕсли;
		Элементы.Параметры.ОтборСтрок = Новый ФиксированнаяСтруктура("Номер", Элемент.ТекущиеДанные.Номер);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьНовыйНомер()
	Тз = СписокАлгоритмов.Выгрузить(,"Номер");
	Если Тз.Количество()>1 Тогда
		Тз.Сортировать("Номер Убыв");
		Возврат Тз[0].Номер+1;
	Иначе
		Возврат 0
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПараметрыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если Элемент.ТекущиеДанные.Тип=ПредопределенноеЗначение("Перечисление.Нейро_Типы.Строка") Тогда
		Элементы.ПараметрыЗначение.КнопкаВыбора=Истина
	Иначе
		Элементы.ПараметрыЗначение.КнопкаВыбора=Неопределено
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя="ПараметрыЗначение" Тогда
		Если Элемент.ТекущиеДанные.Тип=ПредопределенноеЗначение("Перечисление.Нейро_Типы.Строка") Тогда
			Элементы.ПараметрыЗначение.КнопкаВыбора=Истина
		Иначе
			Элементы.ПараметрыЗначение.КнопкаВыбора=Неопределено
		КонецЕсли;	
		//Элемент.ТекущийЭлемент.ОграничениеТипа = Нейро_ОбщийМодуль.ПолучитьОписаниеТипаИзПеречисления(Элемент.ТекущиеДанные.Тип);
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		Если Элемент.ТекущиеДанные.Тип=ПредопределенноеЗначение("Перечисление.Нейро_Типы.Слой") Тогда
			ОписаниеТипа = Нейро_ОбщийМодуль.ПолучитьОписаниеТипаИзПеречисления(ПредопределенноеЗначение("Перечисление.Нейро_Типы.Строка"));
			Для Каждого ИмяСлоя Из ИменаСлоев Цикл
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ИмяСлоя.Значение);
			КонецЦикла;
		Иначе
			ОписаниеТипа = Нейро_ОбщийМодуль.ПолучитьОписаниеТипаИзПеречисления(Элемент.ТекущиеДанные.Тип);
		КонецЕсли;
		Если ОписаниеТипа<>Неопределено Тогда
			Элемент.ТекущийЭлемент.ОграничениеТипа = ОписаниеТипа;
		Иначе
			Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("СписокАлгоритмов") Тогда
		ИмяСписка = Параметры.СписокАлгоритмов.ИмяСписка;
		ИменаСлоев.ЗагрузитьЗначения(Параметры.СписокАлгоритмов.ИменаСлоев);
		ЭтаФорма.Заголовок = "Преобразования для: "+Параметры.СписокАлгоритмов.Заголовок;
		
		Для Каждого СтруктураАлгоритма Из Параметры.СписокАлгоритмов.Алгоритмы Цикл
			НоваяСтрока = СписокАлгоритмов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураАлгоритма);
		КонецЦикла;
		
		Для Каждого СтруктураПараметров Из Параметры.СписокАлгоритмов.ПараметрыАлгоритмов Цикл
			НоваяСтрока = ПараметрыАлгоритма.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокАлгоритмовПередУдалением(Элемент, Отказ)
	Индекс = Элементы.СписокАлгоритмов.ТекущиеДанные.Номер;
	Отбор = Новый Структура("Номер", Индекс);
	Строки = ПараметрыАлгоритма.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		ПараметрыАлгоритма.Удалить(Строка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокАлгоритмовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = СписокАлгоритмов.Добавить();
		НоваяСтрока.Алгоритм = Элемент.ТекущиеДанные.Алгоритм;
		НоваяСтрока.Номер = ПолучитьНовыйНомер();
		Отбор = Новый Структура("Номер", Элемент.ТекущиеДанные.Номер);
		Строки = ПараметрыАлгоритма.НайтиСтроки(Отбор);
		Для Каждого Строка Из Строки Цикл
			НовыйПараметр = ПараметрыАлгоритма.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, Строка);
			НовыйПараметр.Номер = НоваяСтрока.Номер;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	Если СокрЛП(ИмяСписка)="" Тогда
		СообщитьОбОшибке("ИмяСписка", "Укажите имя для списка преобразований!");
		Возврат;
	КонецЕсли;
	
	Если СписокАлгоритмов.Количество()=0 Тогда
		СообщитьОбОшибке("СписокАлгоритмов", "Отсутствуют алгоритмы!");
		Возврат;
	КонецЕсли;
	
	МассивАлгоритмов = Новый Массив;
	Для Каждого СтрокаАлгоритм Из СписокАлгоритмов Цикл
		СтруктураАлгоритма = Новый Структура("Номер, Алгоритм, Присваивать");
		ЗаполнитьЗначенияСвойств(СтруктураАлгоритма, СтрокаАлгоритм);
		МассивАлгоритмов.Добавить(СтруктураАлгоритма);
	КонецЦикла;
	
	МассивПараметров = Новый Массив;
	Для Каждого СтрокаПараметр Из ПараметрыАлгоритма Цикл
		СтруктураПараметра = Новый Структура("Номер, НомерПараметра, Идентификатор, Комментарий, Тип, Значение");
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, СтрокаПараметр);
		МассивПараметров.Добавить(СтруктураПараметра);
	КонецЦикла;
	
	Закрыть(Новый Структура("Имя, Алгоритмы, Параметры", ИмяСписка, МассивАлгоритмов, МассивПараметров));
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписок(Команда)
	Если СписокАлгоритмов.Количество()>0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьСписок", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(Оповещение, "Очистить список алгоритмов?", Режим, 0);
	Иначе
		ПослеЗакрытияВопросаОчиститьСписок(КодВозвратаДиалога.Нет, Неопределено)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьСписок(Результат, ДопПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        СписокАлгоритмов.Очистить();
		ПараметрыАлгоритма.Очистить();
    КонецЕсли;

	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтаФорма,"ЗагрузитьСписокАлгоритмов");
	ОткрытьФорму("Справочник.Нейро_СпискиАлгоритмов.ФормаВыбора",ПараметрыВыбора,ЭтаФорма,,,,ОбработкаВыбора);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСписок(Команда)
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтаФорма,"СохранитьСписокАлгоритмов");
	ОткрытьФорму("Справочник.Нейро_СпискиАлгоритмов.ФормаВыбора",ПараметрыВыбора,ЭтаФорма,,,,ОбработкаВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт
    Если Значение = Неопределено Тогда  ///Если ничего не выбрать - вернется пустое значение (Неопределено)
        Возврат;
    КонецЕсли;

	Если ДопПараметры = "СохранитьСписокАлгоритмов" Тогда 
		ЗаписатьСписокАлгоритмовВСправочник(Значение)
	ИначеЕсли ДопПараметры = "ЗагрузитьСписокАлгоритмов" Тогда 
		МассивАлгоритмов = ПолучитьСписокАлгоритмов(Значение);
		Для Каждого Алгоритм Из МассивАлгоритмов Цикл
			НоваяСтрока = СписокАлгоритмов.Добавить();
			НоваяСтрока.Номер = ПолучитьНовыйНомер();
			НоваяСтрока.Алгоритм = Алгоритм;
			Отбор = Новый Структура("Номер", НоваяСтрока.Номер);
			Строки = ПараметрыАлгоритма.НайтиСтроки(Отбор);
			Для Каждого Строка Из Строки Цикл
				ПараметрыАлгоритма.Удалить(Строка);
			КонецЦикла;
			НоваяСтрока.Присваивать = АлгоритмВозвращаетРезультат(НоваяСтрока.Алгоритм);
			СоздатьПараметрыАлгоритма(НоваяСтрока.Номер, НоваяСтрока.Алгоритм);
		КонецЦикла;
		Если СписокАлгоритмов.Количество()>0 Тогда
			Элементы.СписокАлгоритмов.ТекущаяСтрока = СписокАлгоритмов.Получить(СписокАлгоритмов.Количество()-1).ПолучитьИдентификатор();
			СписокАлгоритмовПриАктивизацииСтроки(Элементы.СписокАлгоритмов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСписокАлгоритмовВСправочник(СпискиАлгоритмовСсылка)
	СправочникОбъект = СпискиАлгоритмовСсылка.ПолучитьОбъект();
	СправочникОбъект.Алгоритмы.Очистить();
	Для Каждого СтрокаАлгоритм Из СписокАлгоритмов Цикл
		НоваяСтрока = СправочникОбъект.Алгоритмы.Добавить();
		НоваяСтрока.Алгоритм = СтрокаАлгоритм.Алгоритм;
	КонецЦикла;
	СправочникОбъект.Записать();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокАлгоритмов(СпискиАлгоритмовСсылка)
	Результат = Новый Массив;
	Для Каждого СтрокаАлгоритм Из СпискиАлгоритмовСсылка.Алгоритмы Цикл
		Результат.Добавить(СтрокаАлгоритм.Алгоритм);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.Параметры.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Строка") Тогда
		СтандартнаяОбработка=Ложь;
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Если Элементы.Параметры.ТекущиеДанные.Значение<>Неопределено И Элементы.Параметры.ТекущиеДанные.Значение<>"" Тогда
			Файл = Новый Файл(Элементы.Параметры.ТекущиеДанные.Значение);
			ДиалогОткрытияФайла.Каталог=Файл.Путь;
			ДиалогОткрытияФайла.ПолноеИмяФайла = Файл.Имя;
			Фильтр = "Файл "+Файл.Расширение+"|*"+Файл.Расширение+"|Все файлы (*.*)|*.*";
			ДиалогОткрытияФайла.Фильтр = Фильтр;
		Иначе
			ДиалогОткрытияФайла.Фильтр = "Все файлы (*.*)|*.*";
		КонецЕсли;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаОбразца", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаОбразца(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.Параметры.ТекущиеДанные.Значение = СтрЗаменить(ВыбранныеФайлы[0],"\","\\");
КонецПроцедуры

