&НаКлиенте
Перем ВопросОставитьСлои;

&НаКлиенте
Процедура СообщитьОбОшибке(Поле, Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Точность=4; Подписи=Истина; //Параметры отображения диаграмм
	
	Элементы.Комментарий.СписокВыбора.Добавить("Оценка");
	Элементы.Комментарий.СписокВыбора.Добавить("Прогноз");
	Элементы.Комментарий.СписокВыбора.Добавить("Оценка и прогноз");
	
	СтрокаПрогнозДоп = ПрогнозДоп.Добавить();
	СтрокаПрогнозДоп.Свойство = "Преобразования";
	СтрокаПрогнозДоп.Значение = Объект.СписокПрогноза;
	//Элементы.ПрогнозДоп.ТекущаяСтрока = СтрокаПрогнозДоп.ПолучитьИдентификатор();
	//ПрогнозДопПриАктивизацииСтроки(Элементы.ПрогнозДоп);
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Перемешивать=Истина;
		ПостроитьДеревоМоделиНаСервереПриОткрытии();
	Иначе
		Если Объект.ТекстПрограммы<>"" Тогда
			ТекстПрограммы=Объект.ТекстПрограммы;
		КонецЕсли;
		ПостроитьДеревоМоделиНаСервереПриОткрытии();
		Для Каждого СтрокаДерева Из ДеревоСлоев.ПолучитьЭлементы() Цикл
			Элементы.ДеревоСлоев.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Истина);
		КонецЦикла;
		Если Объект.Показатели<>"" Тогда
			Попытка
				ПостроитьДеревоИсторииНаСервере(Объект.Показатели);
			Исключение
				Объект.Показатели="";
			КонецПопытки;
			НомерДиаграммы=0;
			Элементы.ДиаграммыНазад.Доступность=НомерДиаграммы>0;
			Элементы.ДиаграммыДалее.Доступность=НомерДиаграммы<СписокМетрикПоКатегориям.Количество()-1;
			ПостроитьДиаграммы(НомерДиаграммы);
		КонецЕсли;
		Если Объект.ПоказателиОценки<>"" Тогда
			ПостроитьДеревоОценкиНаСервере(Объект.ПоказателиОценки);
		КонецЕсли;
		ПутьКСетиЗагрузкаПриИзменении(Неопределено);
		Если Объект.РезультатПрогноза<>"" Тогда
			РезультатПрогноза = ПостроитьСтруктуруДереваНаСервере(Объект.РезультатПрогноза);
			ДеревоПрогнозов.ПолучитьЭлементы().Очистить();
			Для Каждого КиЗ Из РезультатПрогноза Цикл
				СтрокаДЗ = ДеревоПрогнозов.ПолучитьЭлементы().Добавить();
				СтрокаДЗ.Свойство = КиЗ.Значение.layer;
				СтрокаДЗ.Значение = Новый Структура("Значения", КиЗ.Значение.values);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьЭлементовГенератор();
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Вид", ПредопределенноеЗначение("Перечисление.Нейро_ВидыПользовательскогоГенератора.Общий"));
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ПользовательскийГенератор.ПараметрыВыбора = НовыеПараметры;
	
	Элементы.ПоказатьНормализацию.Видимость = Объект.Нормализация<>"" И Объект.Нормализация<>"[]";
	//Элементы.ПоказатьНормализацию1.Видимость = Объект.Нормализация<>"" И Объект.Нормализация<>"[]";
	ПоказатьНормализацию1();
	
	ЗаполнитьТаблицыДоп();

	Отбор=Новый ФиксированнаяСтруктура("Видимость", Истина);
	Элементы.ОбразцыДоп.ОтборСтрок = Отбор;
	Элементы.ЦелиДоп.ОтборСтрок = Отбор;
	
	ОтображениеПараметровКомпиляции();
	
	Нейро_РаботаСФайлами.ПолучитьКаталогНейроконструктора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПараметровКомпиляции()

	Элементы.ФункцияПотерь.ВыбиратьТип=Объект.ФункцияПотерь=Неопределено;
	Если Объект.ФункцияПотерь<>Неопределено Тогда
		ФункцияПотерьПриИзменении(Элементы.ФункцияПотерь);
	КонецЕсли;
	
	Элементы.Оптимизатор.ВыбиратьТип=Объект.Оптимизатор=Неопределено;
	Если Объект.Оптимизатор<>Неопределено Тогда
		ОптимизаторПриИзменении(Элементы.Оптимизатор);
	КонецЕсли;

	Элементы.Метрика.ВыбиратьТип=Объект.Метрика=Неопределено;
	Если Объект.Метрика<>Неопределено Тогда
		МетрикаПриИзменении(Элементы.Метрика);
	КонецЕсли;
	
	Элементы.ВесаПотерь.ВыбиратьТип=Объект.ВесаПотерь=Неопределено;
	Если Объект.ВесаПотерь<>Неопределено Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицыДоп()
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ПропуститьСтрок";
	НоваяСтрока.Представление = "Пропустить строк";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Разделитель";
	НоваяСтрока.Представление = "Разделитель";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Колонки";
	НоваяСтрока.Представление = "Индексы колонок";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ИмяГенератора";
	НоваяСтрока.Представление = "Генератор";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ЦелиГенератора";
	НоваяСтрока.Представление = "Цели";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ТекстИзКаталога";
	НоваяСтрока.Представление = "Загружать из каталога";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ПоказатьСписокФайлов";
	НоваяСтрока.Представление = "смотреть список файлов";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ПутьКСловарю";
	НоваяСтрока.Представление = "Путь к словарю";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Кодировка";
	НоваяСтрока.Представление = "Кодировка";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Переформировать";
	НоваяСтрока.Представление = "Изменить форму";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="НовыйТипДанных";
	НоваяСтрока.Представление = "Тип данных";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Векторизация";
	НоваяСтрока.Представление = "Векторизация";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="РежимВекторизации";
	НоваяСтрока.Представление = "Режим";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Последовательности";
	НоваяСтрока.Представление = "Последовательности";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ДлинаПоследовательности";
	НоваяСтрока.Представление = "Длина последовательности";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="МестоДополнения";
	НоваяСтрока.Представление = "Место дополнения";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="МестоУсечения";
	НоваяСтрока.Представление = "Место усечения";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Нормализовать";
	НоваяСтрока.Представление = "Нормализовать";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="НормализоватьКолонки";
	НоваяСтрока.Представление = "Колонки";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Масштабировать";
	НоваяСтрока.Представление = "Диапазон масштабирования";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="МасштабироватьОбъединить";
	НоваяСтрока.Представление = "Объединить колонки";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="ПрямоеКодирование";
	НоваяСтрока.Представление="Прямое кодирование";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Классов";
	НоваяСтрока.Представление="Количество классов";
	
	НоваяСтрока=ОбразцыДоп.Добавить();
	НоваяСтрока.Свойство="Преобразования";
	НоваяСтрока.Представление="Преобразования";
	
	//Цели
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="ПропуститьСтрок";
	НоваяСтрока.Представление = "Пропустить строк";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Разделитель";
	НоваяСтрока.Представление = "Разделитель";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Колонки";
	НоваяСтрока.Представление = "Индексы колонок";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="НомерКолонки";
	НоваяСтрока.Представление = "Индекс колонки";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="УдалитьКолонку";
	НоваяСтрока.Представление = "Удалить колонку";
	//НоваяСтрока=ЦелиДоп.Добавить();
	//НоваяСтрока.Свойство="СоСловарем";
	//НоваяСтрока.Представление = "Загружать со словарем";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="ИмяГенератора";
	НоваяСтрока.Представление = "Получить из генератора";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Переформировать";
	НоваяСтрока.Представление = "Изменить форму";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="ПутьКСловарю";
	НоваяСтрока.Представление = "Путь к словарю";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Кодировка";
	НоваяСтрока.Представление = "Кодировка";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="НовыйТипДанных";
	НоваяСтрока.Представление = "Тип данных";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Векторизация";
	НоваяСтрока.Представление = "Векторизация";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Последовательности";
	НоваяСтрока.Представление = "Последовательности";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="ДлинаПоследовательности";
	НоваяСтрока.Представление = "Длина последовательности";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="МестоДополнения";
	НоваяСтрока.Представление = "Место дополнения";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="МестоУсечения";
	НоваяСтрока.Представление = "Место усечения";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Нормализовать";
	НоваяСтрока.Представление = "Нормализовать";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Масштабировать";
	НоваяСтрока.Представление = "Диапазон масштабирования";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="ПрямоеКодирование";
	НоваяСтрока.Представление = "Прямое кодирование";

	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Классов";
	НоваяСтрока.Представление="Количество классов";
	
	НоваяСтрока=ЦелиДоп.Добавить();
	НоваяСтрока.Свойство="Преобразования";
	НоваяСтрока.Представление="Преобразования";
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	Подсказка=""; ПодсказкаЦели="";
	
	Если ВопросОставитьСлои Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчищатьТЧ", ЭтотОбъект);
		СтрокаУдалить = "Оставить совпадающие по именам слои?";
		ПоказатьВопрос(Оповещение, СтрокаУдалить, Режим);
	Иначе
		ПослеЗакрытияВопросаОчищатьТЧ(КодВозвратаДиалога.Нет, Неопределено)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчищатьТЧ(Результат, Параметры) Экспорт
	Очищать = НЕ ?(Результат=КодВозвратаДиалога.Да,Истина,Ложь);
	ПостроитьДеревоМоделиНаСервере(Очищать);
	Для Каждого СтрокаДерева Из ДеревоСлоев.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСлоев.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоМоделиНаСервере(Очищать=Истина)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//Если ДокументОбъект.ВсегоСлоев()>7 Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Поле = "Объект.Модель";
	//	Сообщение.Текст = "В демонстрационной версии модель ограничена 7 слоями!";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
	
	Если Не ДокументОбъект.ОбработатьМодельНаСервере(Объект, ЭтаФорма, Очищать) Тогда
		ВызватьИсключение("Не удалось распознать модель!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоМоделиНаСервереПриОткрытии()
	Если Объект.Модель.Пустая() Или Объект.Модель.ТекстМоделиJSON="" Тогда Возврат КонецЕсли;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не ДокументОбъект.ОбработатьМодельНаСервереПриОткрытии(Объект, ЭтаФорма) Тогда
		ВызватьИсключение("Не удалось распознать модель!");
	КонецЕсли;
КонецПроцедуры

#Область Образцы

&НаКлиенте
Процедура ОбразцыПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ПутьКФайлу=Элемент.ТекстРедактирования;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла для загрузки";	
	Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки.Пустая() Тогда
		Если ПутьКФайлу="" Тогда
			Фильтр = "Текстовый файл (*.txt)|*.txt|Файл в формате NumPy (*.npy)|*.npy|Все файлы (*.*)|*.*";
		Иначе
			Файл = Новый Файл(ПутьКФайлу);
			Если Файл.Расширение=".npy" Тогда
				Фильтр = "Файл в формате NumPy (*.npy)|*.npy|Текстовый файл (*.txt)|*.txt|Все файлы (*.*)|*.*";
			ИначеЕсли Файл.Расширение=".txt" Тогда
				Фильтр = "Текстовый файл (*.txt)|*.txt|Файл в формате NumPy (*.npy)|*.npy|Все файлы (*.*)|*.*";
			Иначе
				Фильтр = "Все файлы (*.*)|*.*|Текстовый файл (*.txt)|*.txt|Файл в формате NumPy (*.npy)|*.npy";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") Тогда
			Фильтр = "Файл в формате NumPy (*.npy)|*.npy";
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
			Фильтр = "Текстовый файл (*.txt)|*.txt|Все файлы (*.*)|*.*";
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
			Если Элементы.Образцы.ТекущиеДанные.ТекстИзКаталога Тогда
				ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
				ДиалогОткрытияФайла.Каталог=ПутьКФайлу;
				ДиалогОткрытияФайла.Заголовок = "Укажите каталог с текстами";	
			Иначе
				Фильтр = "Текстовый файл (*.txt)|*.txt|Все файлы (*.*)|*.*";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ИспользоватьГенератор И 
		Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") И
		Элементы.Образцы.ТекущиеДанные.ИмяГенератора<>"" Тогда
		Отбор=Новый Структура("Имя", Элементы.Образцы.ТекущиеДанные.ИмяГенератора);
		Строки = Объект.ДанныеИзображений.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 И Строки[0].Источник=1 Тогда
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ДиалогОткрытияФайла.Каталог=ПутьКФайлу;
			ДиалогОткрытияФайла.Заголовок = "Укажите каталог изображений";	
		КонецЕсли;
	КонецЕсли;
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаОбразца", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаОбразца(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.Образцы.ТекущиеДанные.ПутьКФайлу = ВыбранныеФайлы[0];
	Файл = Новый Файл(ВыбранныеФайлы[0]);
	Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки.Пустая() Тогда
		Если Объект.ИспользоватьГенератор И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) Тогда
			
		ИначеЕсли Файл.Расширение=".npy" Тогда
			Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy");
			Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюОбразцыЗавершение", ЭтотОбъект, Элементы.Образцы.ТекущиеДанные.ПолучитьИдентификатор());
			Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Образцы.ТекущиеДанные.ПутьКФайлу, Оповещение);
		ИначеЕсли Файл.Расширение=".txt" Тогда
			Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст");
			Элементы.Образцы.ТекущиеДанные.ТипДанных="";
			Элементы.Образцы.ТекущиеДанные.Форма="";
		Иначе
			Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица");
			Элементы.Образцы.ТекущиеДанные.ТипДанных="";
			Элементы.Образцы.ТекущиеДанные.Форма="";
		КонецЕсли;
	ИначеЕсли ЭтоГенераторИзображенийИзКаталога(Элементы.Образцы.ТекущиеДанные) Тогда
		Элементы.Образцы.ТекущиеДанные.ТипДанных="";
		Элементы.Образцы.ТекущиеДанные.Форма="";
		Элементы.Образцы.ТекущиеДанные.СпособЗагрузки = Неопределено;
	ИначеЕсли Файл.Расширение=".npy" Тогда
		Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюОбразцыЗавершение", ЭтотОбъект, Элементы.Образцы.ТекущиеДанные.ПолучитьИдентификатор());
		Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Образцы.ТекущиеДанные.ПутьКФайлу, Оповещение);
	ИначеЕсли Файл.Расширение=".txt" Тогда
		Элементы.Образцы.ТекущиеДанные.ТипДанных="";
		Элементы.Образцы.ТекущиеДанные.Форма="";
	Иначе
		Элементы.Образцы.ТекущиеДанные.ТипДанных="";
		Элементы.Образцы.ТекущиеДанные.Форма="";
	КонецЕсли;
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОбразцыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	СтрокаОбразцы=Объект.Образцы.НайтиПоИдентификатору(ДополнительныеПараметры);
	Если Результат.Тип.Пустая() Тогда
		СтрокаОбразцы.ТипДанных = Результат.Descr
	Иначе
		СтрокаОбразцы.ТипДанных = Результат.Тип
	КонецЕсли;
	СтрокаОбразцы.Форма = Результат.Форма;
	СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy");
	ИзменитьВидимостьОбразцы();
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыПутьКФайлуПриИзменении(Элемент)
	Файл = Новый Файл(Элементы.Образцы.ТекущиеДанные.ПутьКФайлу);
	Если Файл.Расширение=".npy" Тогда
		Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюОбразцыЗавершение", ЭтотОбъект, Элементы.Образцы.ТекущиеДанные.ПолучитьИдентификатор());
		Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Образцы.ТекущиеДанные.ПутьКФайлу, Оповещение);
	Иначе
		Элементы.Образцы.ТекущиеДанные.ТипДанных="";
		Элементы.Образцы.ТекущиеДанные.Форма="";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыПриАктивизацииСтроки(Элемент)
	Если Элементы.Образцы.ТекущиеДанные<>Неопределено Тогда
		Элементы.ОбразцыТипГенератора.ТолькоПросмотр=Ложь;
		Если Объект.ИспользоватьГенератор Тогда
			Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
				//Или Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
					Элементы.ОбразцыТипГенератора.ТолькоПросмотр=Истина;
			КонецЕсли;
		КонецЕсли;
		
		//МассивОтбора=Новый Массив;
		Для Каждого СтрокаДоп Из ОбразцыДоп Цикл
			Если СтрокаДоп.Свойство="ПоказатьСписокФайлов" Тогда Продолжить КонецЕсли;
			СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные[СтрокаДоп.Свойство];
		//	Если СтрокаДоп.Свойство="Разделитель" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.Разделитель;
		//	ИначеЕсли СтрокаДоп.Свойство="ПропуститьСтрок" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.ПропуститьСтрок;
		//	ИначеЕсли СтрокаДоп.Свойство="Колонки" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.Колонки;
		//	ИначеЕсли СтрокаДоп.Свойство="ТекстИзКаталога" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.ТекстИзКаталога;
		//	ИначеЕсли СтрокаДоп.Свойство="ПутьКСловарю" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.ПутьКСловарю;
		//	ИначеЕсли СтрокаДоп.Свойство="НовыйТипДанных" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.НовыйТипДанных;
		//	ИначеЕсли СтрокаДоп.Свойство="Векторизация" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.Векторизация;
		//	ИначеЕсли СтрокаДоп.Свойство="РежимВекторизации" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.РежимВекторизации;
		//	ИначеЕсли СтрокаДоп.Свойство="Нормализовать" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.Нормализовать;
		//	ИначеЕсли СтрокаДоп.Свойство="ПрямоеКодирование" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.ПрямоеКодирование;
		//	ИначеЕсли СтрокаДоп.Свойство="ДлинаПоследовательности" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.ДлинаПоследовательности;
		//	ИначеЕсли СтрокаДоп.Свойство="МестоДополнения" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.МестоДополнения;
		//	ИначеЕсли СтрокаДоп.Свойство="МестоУсечения" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.МестоУсечения;
		//	ИначеЕсли СтрокаДоп.Свойство="Классов" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.Классов;
		//	ИначеЕсли СтрокаДоп.Свойство="Переформировать" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.Переформировать;
		//	ИначеЕсли СтрокаДоп.Свойство="ИмяГенератора" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.ИмяГенератора;
		//	ИначеЕсли СтрокаДоп.Свойство="ЦелиГенератора" Тогда
		//		СтрокаДоп.Значение = Элементы.Образцы.ТекущиеДанные.ЦелиГенератора;
		//	КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ИзменитьВидимостьОбразцы();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьОбразцы()
	Если Элементы.Образцы.ТекущиеДанные=Неопределено 
		Или Элементы.Образцы.ТекущиеДанные.СпособЗагрузки.Пустая() Тогда 
		Для Каждого СтрокаДоп Из ОбразцыДоп Цикл
			СтрокаДоп.Видимость=Ложь;
			Если Объект.ИспользоватьГенератор И Элементы.Образцы.ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) Тогда
				Если СтрокаДоп.Свойство="ИмяГенератора" Тогда
					СтрокаДоп.Видимость=Истина;
				//ИначеЕсли СтрокаДоп.Свойство="ЦелиГенератора" Тогда
				//	Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя",Элементы.Образцы.ТекущиеДанные.ИмяГенератора));
				//	Если Строки.Количество()>0 И Строки[0].Источник=0 Тогда //Изображения из массива Numpy
				//		СтрокаДоп.Видимость=Истина;
				//	КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//Если СтрокаДоп.Свойство="ИмяГенератора" И Объект.ИспользоватьГенератор И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) Тогда
			//	Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя",Элементы.Образцы.ТекущиеДанные.ИмяГенератора));
			//	Если Строки.Количество()>0 И Строки[0].Источник=1 Тогда
			//		СтрокаДоп.Видимость=Истина;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		Отбор=Новый ФиксированнаяСтруктура("Видимость", Истина);
		Элементы.ОбразцыДоп.ОтборСтрок = Отбор;
		Возврат 
	КонецЕсли;
	
	МассивВидимых=Новый Массив;
	Если Объект.ИспользоватьГенератор Тогда
		Если ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) Тогда
			МассивВидимых.Добавить("ИмяГенератора");
		КонецЕсли;
	КонецЕсли;
	МассивВидимых.Добавить("Последовательности");
	Если Элементы.Образцы.ТекущиеДанные.Последовательности Тогда
		МассивВидимых.Добавить("ДлинаПоследовательности");
		МассивВидимых.Добавить("МестоДополнения");
		Если Элементы.Образцы.ТекущиеДанные.ДлинаПоследовательности>0 Тогда
			МассивВидимых.Добавить("МестоУсечения");
		КонецЕсли;
	КонецЕсли;
	Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") Тогда
		Если Объект.ИспользоватьГенератор И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ИмяГенератора) Тогда
			МассивВидимых.Добавить("ЦелиГенератора");
		КонецЕсли;
		//МассивВидимых.Добавить("ПутьКСловарю");
		//Если Элементы.Образцы.ТекущиеДанные.ПутьКСловарю<>"" Тогда
		//	МассивВидимых.Добавить("Векторизация");
		//	Если Элементы.Образцы.ТекущиеДанные.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
		//		МассивВидимых.Добавить("РежимВекторизации");
		//	КонецЕсли;
		//Иначе
			МассивВидимых.Добавить("НовыйТипДанных");
			МассивВидимых.Добавить("Переформировать");
			МассивВидимых.Добавить("Нормализовать");
			Если ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.Нормализовать) Тогда
				МассивВидимых.Добавить("НормализоватьКолонки");
			КонецЕсли;
			Если Элементы.Образцы.ТекущиеДанные.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
				МассивВидимых.Добавить("Масштабировать");
				МассивВидимых.Добавить("МасштабироватьОбъединить");
			КонецЕсли;
			МассивВидимых.Добавить("ПрямоеКодирование");
			Если Элементы.Образцы.ТекущиеДанные.ПрямоеКодирование=Истина Тогда
				МассивВидимых.Добавить("Классов");
			КонецЕсли;
		//КонецЕсли;
		МассивВидимых.Добавить("Преобразования");
	ИначеЕсли Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
		МассивВидимых.Добавить("ПропуститьСтрок");
		МассивВидимых.Добавить("Разделитель");
		МассивВидимых.Добавить("Колонки");
		Если Объект.ИспользоватьГенератор И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ИмяГенератора) Тогда
			МассивВидимых.Добавить("ЦелиГенератора");
		КонецЕсли;
		МассивВидимых.Добавить("НовыйТипДанных");
		МассивВидимых.Добавить("Переформировать");
		МассивВидимых.Добавить("Нормализовать");
		Если ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.Нормализовать) Тогда
			МассивВидимых.Добавить("НормализоватьКолонки");
		КонецЕсли;
		Если Элементы.Образцы.ТекущиеДанные.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
			МассивВидимых.Добавить("Масштабировать");
			МассивВидимых.Добавить("МасштабироватьОбъединить");
		КонецЕсли;
		МассивВидимых.Добавить("ПрямоеКодирование");
		Если Элементы.Образцы.ТекущиеДанные.ПрямоеКодирование=Истина Тогда
			МассивВидимых.Добавить("Классов");
		КонецЕсли;
		МассивВидимых.Добавить("Преобразования");
		//Если Объект.ИспользоватьГенератор И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ИмяГенератора) Тогда
		//	МассивВидимых.Добавить("ЦелиГенератора");
		//Иначе
		//	//МассивВидимых.Добавить("Переформировать");
		//	МассивВидимых.Добавить("Нормализовать");
		//	МассивВидимых.Добавить("ПрямоеКодирование");
		//	Если Элементы.Образцы.ТекущиеДанные.ПрямоеКодирование=Истина Тогда
		//		МассивВидимых.Добавить("Классов");
		//	КонецЕсли;
		//КонецЕсли;
	ИначеЕсли Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
		Если Объект.ИспользоватьГенератор И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ИмяГенератора) Тогда
			МассивВидимых.Добавить("ЦелиГенератора");
		КонецЕсли;
		МассивВидимых.Добавить("ТекстИзКаталога");
		Если Элементы.Образцы.ТекущиеДанные.ТекстИзКаталога Тогда
			МассивВидимых.Добавить("ПоказатьСписокФайлов");
		КонецЕсли;
		МассивВидимых.Добавить("ПутьКСловарю");
		МассивВидимых.Добавить("Кодировка");
		МассивВидимых.Добавить("Векторизация");
		Если Элементы.Образцы.ТекущиеДанные.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПлотныеВекторы") Тогда
			//МассивВидимых.Добавить("ДлинаПоследовательности");
			//МассивВидимых.Добавить("МестоДополнения");
			//Если Элементы.Образцы.ТекущиеДанные.ДлинаПоследовательности>0 Тогда
			//	МассивВидимых.Добавить("МестоУсечения");
			//КонецЕсли;
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
			МассивВидимых.Добавить("РежимВекторизации");
		КонецЕсли;
		//Если Объект.ИспользоватьГенератор И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ТипГенератора) И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ИмяГенератора) Тогда
		//	МассивВидимых.Добавить("ЦелиГенератора");
		//Иначе
		//	МассивВидимых.Добавить("ТекстИзКаталога");
		//	МассивВидимых.Добавить("ПутьКСловарю");
		//	МассивВидимых.Добавить("Векторизация");
		//	Если Элементы.Образцы.ТекущиеДанные.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПлотныеВекторы") Тогда
		//		МассивВидимых.Добавить("ДлинаПоследовательности");
		//		МассивВидимых.Добавить("МестоДополнения");
		//		Если Элементы.Образцы.ТекущиеДанные.ДлинаПоследовательности>0 Тогда
		//			МассивВидимых.Добавить("МестоУсечения");
		//		КонецЕсли;
		//	ИначеЕсли Элементы.Образцы.ТекущиеДанные.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
		//		МассивВидимых.Добавить("РежимВекторизации");
		//	КонецЕсли;
		//КонецЕсли;
		МассивВидимых.Добавить("Преобразования");
	КонецЕсли;
	Если Объект.ИспользоватьГенератор Тогда
		Если Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") 
			И ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.ИмяГенератора) Тогда
			Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя",Элементы.Образцы.ТекущиеДанные.ИмяГенератора));
			Если Строки.Количество()>0 И Строки[0].Источник=1 Тогда //flow_from_directory
				МассивВидимых.Очистить();
				МассивВидимых.Добавить("ИмяГенератора");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Для Каждого СтрокаДоп Из ОбразцыДоп Цикл
		Если МассивВидимых.Найти(СтрокаДоп.Свойство)<>Неопределено Тогда
			СтрокаДоп.Видимость=Истина;
			//Если СтрокаДоп.Свойство="ПутьКСловарю" Тогда
			//	Элементы.ОбразцыДопЗначение.КнопкаВыбора=Истина;
			//КонецЕсли;
		Иначе
			СтрокаДоп.Видимость=Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Отбор=Новый ФиксированнаяСтруктура("Видимость", Истина);
	Элементы.ОбразцыДоп.ОтборСтрок = Отбор;
	
	ИзменитьПодсказкуОбразцы(Элементы.ОбразцыДоп.ТекущиеДанные);
	ИзменитьПодсказкуЦели(Элементы.ЦелиДоп.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыДопЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.ОбразцыДоп.ТекущиеДанные.Свойство = "ПутьКСловарю" Тогда
		СтандартнаяОбработка=Ложь;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ПутьКФайлу=Элементы.ОбразцыДоп.ТекущиеДанные.Значение;
		ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
		Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
		Если Поз>0 Тогда
			ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
		КонецЕсли;
		Фильтр = НСтр("ru = 'JavaScript Object Notation '; en = 'JavaScript Object Notation '")+ "(*.json)|*.json";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Укажите имя файла словаря";	
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаСловаря", ЭтотОбъект, 1);
		ДиалогОткрытияФайла.Показать(ОпОп);
	ИначеЕсли Элементы.ОбразцыДоп.ТекущиеДанные.Свойство = "ИмяГенератора" Тогда
		СписокГенераторов=Новый СписокЗначений;
		Если Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
			Для Каждого СтрокаТЧ Из Объект.ВременныеПоследовательности Цикл
				СписокГенераторов.Добавить(СтрокаТЧ.Имя);
			КонецЦикла;
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
			Для Каждого СтрокаТЧ Из Объект.ДанныеИзображений Цикл
				СписокГенераторов.Добавить(СтрокаТЧ.Имя);
			КонецЦикла;
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Пользовательский") Тогда
			Для Каждого СтрокаТЧ Из Объект.ПользовательскиеГенераторы Цикл
				СписокГенераторов.Добавить(СтрокаТЧ.Имя);
			КонецЦикла;
		КонецЕсли;
		СписокГенераторов.Добавить("+","Новый",,БиблиотекаКартинок.СоздатьЭлементСписка);
		ЭлементСГ = СписокГенераторов.НайтиПоЗначению(Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
		ОписаниеО = Новый ОписаниеОповещения("ОбразцыДопВыборГенератораИзСписка", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеО, СписокГенераторов, Элемент, ЭлементСГ);
	ИначеЕсли Элементы.ОбразцыДоп.ТекущиеДанные.Свойство = "ЦелиГенератора" Тогда
		СтандартнаяОбработка=Ложь;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Файл = Новый Файл(Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
		//ПутьКФайлу=Элементы.ОбразцыДоп.ТекущиеДанные.Значение;
		ДиалогОткрытияФайла.ПолноеИмяФайла = Файл.ПолноеИмя;
		ДиалогОткрытияФайла.Каталог=Файл.Путь;
		Фильтр = "Файл в формате NumPy (*.npy)|*.npy";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Укажите имя файла массива NumPy";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаЦелиГенератора", ЭтотОбъект, 1);
		ДиалогОткрытияФайла.Показать(ОпОп);
	ИначеЕсли Элементы.ОбразцыДоп.ТекущиеДанные.Свойство = "Преобразования" Тогда
		СписокПреобразований=Новый СписокЗначений;
		//СписокИмен = ПолучитьИменаСписковАлгоритмов();
		Для Каждого ИмяСписка Из ПолучитьИменаСписковАлгоритмов() Цикл
			СписокПреобразований.Добавить(ИмяСписка,,,БиблиотекаКартинок.ВнешнийИсточникДанныхФункция);
		КонецЦикла;
		СписокПреобразований.Добавить("+","Новый",,БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокПреобразований.Добавить("++","Скопировать",,БиблиотекаКартинок.СкопироватьОбъект);
		СписокПреобразований.Добавить("-","Удалить",,БиблиотекаКартинок.Удалить);
		ЭлементСП = СписокПреобразований.НайтиПоЗначению(Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
		ОписаниеО = Новый ОписаниеОповещения("ОбразцыЦелиДопВыборСпискаПреобразований", ЭтотОбъект, "ОбразцыДоп");
		ПоказатьВыборИзСписка(ОписаниеО, СписокПреобразований, Элемент, ЭлементСП);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаЦелиГенератора(ВыбранныеФайлы, НомерИсточника) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.ОбразцыДоп.ТекущиеДанные.Значение = ВыбранныеФайлы[0];
	Элементы.Образцы.ТекущиеДанные.ЦелиГенератора = ВыбранныеФайлы[0];
	//ИзменитьВидимостьОбразцы();
	//Модифицированность=Истина;   
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыДопВыборГенератораИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент=Неопределено Тогда Возврат КонецЕсли;
	Если ВыбранныйЭлемент.Значение="+" Тогда
		//Если Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
		//	Префикс="ВременныхПоследовательностей";
		//	Тч=Объект.ВременныеПоследовательности;
		//	ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаГенератораВременныхРядов";
		//ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
		//	Префикс="ДанныхИзображений";
		//	Тч=Объект.ДанныеИзображений;
		//	ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаГенератораИзображений";
		//КонецЕсли;
		//Для Сч=1 По 9999 Цикл
		//	НовоеИмя=Префикс+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		//	Отбор=Новый Структура("Имя", НовоеИмя);
		//	Строки=Тч.НайтиСтроки(Отбор);
		//	Если Строки.Количество()=0 Тогда Прервать КонецЕсли;
		//КонецЦикла;
		//ПараметрыФормы=Новый Структура("Имя, ПараметрыГенератора",НовоеИмя,Неопределено);
		//ОписаниеО = Новый ОписаниеОповещения("ПослеЗакрытияФормыГенератораИзображений", ЭтотОбъект, Элементы.Образцы.ТекущиеДанные.ТипГенератора);
		//ОткрытьФорму(ИмяФормыГенератора,ПараметрыФормы,ЭтотОбъект,,,,ОписаниеО,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		НовыйГенератор();
	Иначе
		Элементы.ОбразцыДоп.ТекущиеДанные.Значение=ВыбранныйЭлемент.Значение;
		Элементы.Образцы.ТекущиеДанные[Элементы.ОбразцыДоп.ТекущиеДанные.Свойство]=Элементы.ОбразцыДоп.ТекущиеДанные.Значение;
		ИзменитьВидимостьОбразцы();
		Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйГенератор()
	Если Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
		Префикс="ВременныхРядов";
		Тч=Объект.ВременныеПоследовательности;
		ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаГенератораВременныхРядов";
	ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
		Префикс="ДанныхИзображений";
		Тч=Объект.ДанныеИзображений;
		ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаГенератораИзображений";
	ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Пользовательский") Тогда
		Префикс="Пользовательский";
		Тч=Объект.ПользовательскиеГенераторы;
		ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаПользовательскогоГенератора";
	КонецЕсли;
	Для Сч=1 По 9999 Цикл
		НовоеИмя=Префикс+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		Отбор=Новый Структура("Имя", НовоеИмя);
		Строки=Тч.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда Прервать КонецЕсли;
	КонецЦикла;
	МассивСлоев = ПолучитьМассивНормализаторовМасштабирования(Истина, Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
	ПараметрыФормы=Новый Структура("Имя, ПараметрыГенератора, МассивСлоев",НовоеИмя,Неопределено,МассивСлоев);
	ОписаниеО = Новый ОписаниеОповещения("ПослеЗакрытияФормыГенератораИзображений", ЭтотОбъект, Элементы.Образцы.ТекущиеДанные.ТипГенератора);
	ОткрытьФорму(ИмяФормыГенератора,ПараметрыФормы,ЭтотОбъект,,,,ОписаниеО,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыДопЗначениеПриИзменении(Элемент)
	Элементы.Образцы.ТекущиеДанные[Элементы.ОбразцыДоп.ТекущиеДанные.Свойство]=Элементы.ОбразцыДоп.ТекущиеДанные.Значение;
	Модифицированность=Истина;
	Если Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="Векторизация" Или Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="ДлинаПоследовательности"
		Или Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="ПрямоеКодирование" Или Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="ПутьКСловарю"
		Или Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="ИмяГенератора"
		Или Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="Последовательности"
		Или Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="ДлинаПоследовательности"
		Или Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="Нормализовать" Тогда
		ИзменитьВидимостьОбразцы();
	КонецЕсли;
	Если Элементы.ОбразцыДоп.ТекущиеДанные.Свойство="ЦелиГенератора" Тогда
		ЦелиДопПриАктивизацииЯчейки(Элементы.ЦелиДоп);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыСпособЗагрузкиПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Элементы.Образцы.ТекущиеДанные.СпособЗагрузки) Тогда
		Элементы.Образцы.ТекущиеДанные.ТипДанных="";
		Элементы.Образцы.ТекущиеДанные.Форма="";
	КонецЕсли;
	Если Объект.ИспользоватьГенератор Тогда
		Элементы.ОбразцыТипГенератора.ТолькоПросмотр=Ложь;
		Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
			//Или Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
			Элементы.Образцы.ТекущиеДанные.ТипГенератора=Неопределено;
			Элементы.ОбразцыТипГенератора.ТолькоПросмотр=Истина;
		КонецЕсли;
	КонецЕсли;
	ИзменитьВидимостьОбразцы();
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыДопПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Элементы.ОбразцыДопЗначение.КнопкаВыбора = 
	 (Элемент.ТекущиеДанные.Свойство="ПутьКСловарю" 
	  Или Элемент.ТекущиеДанные.Свойство="ИмяГенератора" 
	  Или Элемент.ТекущиеДанные.Свойство="ЦелиГенератора"
	  Или Элемент.ТекущиеДанные.Свойство="Преобразования");
	ИзменитьПодсказкуОбразцы(Элементы.ОбразцыДоп.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыДопПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если Элемент.ТекущийЭлемент=Элементы.ОбразцыДопЗначение Тогда
		Если Элемент.ТекущийЭлемент.СписокВыбора.Количество()>0 Тогда
			Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство="Разделитель" Тогда
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить(",", "Запятая");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить(" ", "Пробел");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\t", "Табулятор");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\v", "Вертикальный табулятор");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\\", "Обратная дробь");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\r", "Возврат каретки");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\n", "Новая строка");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\0", "Null");
		ИначеЕсли Элемент.ТекущиеДанные.Свойство="ЦелиГенератора" Тогда
			ВсеЦели = "";
			Для Каждого СтрокаЦели Из Объект.Цели Цикл
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СтрокаЦели.ИмяСлоя);
				Если ВсеЦели<>"" Тогда ВсеЦели=ВсеЦели+", " КонецЕсли;
				ВсеЦели=ВсеЦели+СтрокаЦели.ИмяСлоя;
			КонецЦикла;
			Если Объект.Цели.Количество()>1 Тогда
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить("["+ВсеЦели+"]");
			КонецЕсли;
		ИначеЕсли Элемент.ТекущиеДанные.Свойство="Масштабировать" Тогда
			МассивСлоев = ПолучитьМассивНормализаторовМасштабирования(Истина, Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
			Для Каждого ИмяСлоя Из МассивСлоев Цикл
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ИмяСлоя);
			КонецЦикла;
		ИначеЕсли Элемент.ТекущиеДанные.Свойство="Кодировка" Тогда
			Элемент.ТекущийЭлемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьКодировкиТекста())
			//ЗаполнитьСписокВыбораКодировкиТекста(Элемент.ТекущийЭлемент.СписокВыбора)
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство="ПутьКСловарю" Или Элемент.ТекущиеДанные.Свойство="ИмяГенератора" Или 
			Элемент.ТекущиеДанные.Свойство="ПоказатьСписокФайлов" Или Элемент.ТекущиеДанные.Свойство="Преобразования" Тогда
			Элементы.ОбразцыДопЗначение.КнопкаОткрытия=Истина
		Иначе
			Элементы.ОбразцыДопЗначение.КнопкаОткрытия=Неопределено
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКодировкиТекста()
	Кодировки = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьОбщийМакет("Нейро_Кодировки"));
	Возврат СтрРазделить(Кодировки,Символы.ВК+Символы.ПС,Ложь)
	//СписокВыбора.ЗагрузитьЗначения(СтрРазделить(Кодировки,Символы.ВК+Символы.ПС,Ложь))
КонецФункции

&НаКлиенте
Процедура ОбразцыДопЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	Если Элементы.ОбразцыДоп.ТекущиеДанные.Свойство = "ИмяГенератора" Тогда
		Если Элементы.ОбразцыДоп.ТекущиеДанные.Значение="" Тогда
			НовыйГенератор();
		Иначе
			Если Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
				Тч=Объект.ВременныеПоследовательности;
				ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаГенератораВременныхРядов";
				ИмяТЧ = "ВременныеПоследовательности";
				МассивСлоев = ПолучитьМассивНормализаторовМасштабирования(Истина, Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
			ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
				Тч=Объект.ДанныеИзображений;
				ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаГенератораИзображений";
				ИмяТЧ = "ДанныеИзображений";
				МассивСлоев = Новый Массив;
			ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Пользовательский") Тогда
				Тч=Объект.ПользовательскиеГенераторы;
				ИмяФормыГенератора="Документ.Нейро_Обучение.Форма.ФормаПользовательскогоГенератора";
				ИмяТЧ = "ПользовательскиеГенераторы";
				МассивСлоев = Новый Массив;
				Отбор=Новый Структура("Имя", Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
				Строки = Объект.ПользовательскиеГенераторыПараметры.НайтиСтроки(Отбор);
				Для Каждого Строка Из Строки Цикл
					ДопПараметрыГенератора = Новый Структура("Идентификатор,Тип,Значение");
					ДопПараметрыГенератора.Идентификатор = Строка.Идентификатор;
					ДопПараметрыГенератора.Тип           = Строка.Тип;
					ДопПараметрыГенератора.Значение      = Строка.Значение;
					//ЗаполнитьЗначенияСвойств(ДопПараметрыГенератора, Строка);
					МассивСлоев.Добавить(ДопПараметрыГенератора);
				КонецЦикла;
			КонецЕсли;
			Отбор=Новый Структура("Имя", Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
			Строки = Тч.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда
				Возврат;
			Иначе
				ПараметрыГенератора=КолонкиВСтруктуру(ИмяТЧ);
				ЗаполнитьЗначенияСвойств(ПараметрыГенератора, Строки[0]);
			КонецЕсли;
			ПараметрыФормы=Новый Структура("Имя, ПараметрыГенератора, МассивСлоев",Элементы.ОбразцыДоп.ТекущиеДанные.Значение,ПараметрыГенератора,МассивСлоев);
			ОписаниеО = Новый ОписаниеОповещения("ПослеЗакрытияФормыГенератораИзображений", ЭтотОбъект, Элементы.Образцы.ТекущиеДанные.ТипГенератора);
			ОткрытьФорму(ИмяФормыГенератора,ПараметрыФормы,ЭтотОбъект,,,,ОписаниеО,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	ИначеЕсли Элементы.ОбразцыДоп.ТекущиеДанные.Свойство = "ПоказатьСписокФайлов" Тогда
		ПосмотретьСписокФайлов(Элементы.ОбразцыДоп.ТекущиеДанные);
	ИначеЕсли Элементы.ОбразцыДоп.ТекущиеДанные.Свойство = "Преобразования" Тогда
		ОткрытьФормуАлгоритмов("ОбразцыДоп");
		//Если Элементы.ОбразцыДоп.ТекущиеДанные.Значение="" Тогда
		//	НовыйСписокПреобразований(Элементы.Образцы);
		//Иначе
		//	Отбор=Новый Структура("ИмяСписка", Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
		//	Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
		//	Если Строки.Количество()=0 Тогда
		//		Возврат;
		//	КонецЕсли;
		//	ФСтруктураАлгоритмы = КолонкиВФиксированнуюСтруктуру("Алгоритмы");
		//	МассивАлгоритмов = Новый Массив;
		//	Для Каждого СтрокаТЧ Из Строки Цикл
		//		СтруктураАлгоритмы=Новый Структура(ФСтруктураАлгоритмы);
		//		ЗаполнитьЗначенияСвойств(СтруктураАлгоритмы, СтрокаТЧ);
		//		МассивАлгоритмов.Добавить(СтруктураАлгоритмы);
		//	КонецЦикла;
		//	
		//	Строки = Объект.ПараметрыАлгоритмов.НайтиСтроки(Отбор);
		//	ФСтруктураАлгоритмы = КолонкиВФиксированнуюСтруктуру("ПараметрыАлгоритмов");
		//	МассивПараметровАлгоритмов = Новый Массив;
		//	Для Каждого СтрокаТЧ Из Строки Цикл
		//		СтруктураАлгоритмы=Новый Структура(ФСтруктураАлгоритмы);
		//		ЗаполнитьЗначенияСвойств(СтруктураАлгоритмы, СтрокаТЧ);
		//		МассивПараметровАлгоритмов.Добавить(СтруктураАлгоритмы);
		//	КонецЦикла;
		//	
		//	ИменаСлоев = Новый Массив;
		//	Для Каждого СтрокаСлой Из Объект.Образцы Цикл
		//		ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
		//	КонецЦикла;
		//	Для Каждого СтрокаСлой Из Объект.Цели Цикл
		//		ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
		//	КонецЦикла;
		//	//ПараметрыД = Новый Структура;
		//	//ПараметрыД.Вставить("ИменаСлоев", ИменаСлоев);
		//	//ПараметрыД.Вставить("Заголовок", "Образец - "+Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
		//	//Оп = Новый ОписаниеОповещения("ПослеЗакрытияФормыАлгоритмов", ЭтотОбъект, "ИмяСписка");
		//	//ОткрытьФорму("Документ.Нейро_Обучение.Форма.ФормаАлгоритмов", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		//	
		//	СтруктураСписка = Новый Структура;
		//	СтруктураСписка.Вставить("ИменаСлоев", ИменаСлоев);
		//	СтруктураСписка.Вставить("Заголовок", "Образец - "+Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
		//	СтруктураСписка.Вставить("ИмяСписка", Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
		//	СтруктураСписка.Вставить("Алгоритмы", МассивАлгоритмов);
		//	СтруктураСписка.Вставить("ПараметрыАлгоритмов", МассивПараметровАлгоритмов);
		//	ПараметрыД = Новый Структура("СписокАлгоритмов", СтруктураСписка);
		//	//ПараметрыД.Вставить("ИменаСлоев", ИменаСлоев);
		//	//ПараметрыД.Вставить("Заголовок", "Образец - "+Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
		//	Оп = Новый ОписаниеОповещения("ПослеЗакрытияФормыАлгоритмов", ЭтотОбъект, Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
		//	ОткрытьФорму("Документ.Нейро_Обучение.Форма.ФормаАлгоритмов", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		//КонецЕсли;
	Иначе
		Если Элементы.ОбразцыДоп.ТекущиеДанные=Неопределено Или Элементы.ОбразцыДоп.ТекущиеДанные.Значение="" Тогда Возврат КонецЕсли;
		
		Текст = Новый ЧтениеТекста(Элементы.ОбразцыДоп.ТекущиеДанные.Значение);
		СтрокаJSON = Текст.Прочитать();
		Текст.Закрыть();
		
		ПараметрыД = Новый Структура;
		ПараметрыД.Вставить("ТекстМоделиJSON", СтрокаJSON);
		Оп = Новый ОписаниеОповещения("ПослеПросмотраСловаряJSON", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.Нейро_ДеревоJSON", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КолонкиВСтруктуру(ИмяТЧ)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Тз=ДокументОбъект[ИмяТЧ].ВыгрузитьКолонки();
	Результат = Новый Структура;
	Для Каждого Колонка Из Тз.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Возврат Результат
КонецФункции

&НаСервере
Функция КолонкиВФиксированнуюСтруктуру(ИмяТЧ)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Тз=ДокументОбъект[ИмяТЧ].ВыгрузитьКолонки();
	СтрокаКлючей = "";
	Для Каждого Колонка Из Тз.Колонки Цикл
		Если СтрокаКлючей <> "" Тогда СтрокаКлючей = СтрокаКлючей + ", " КонецЕсли;
		СтрокаКлючей = СтрокаКлючей + Колонка.Имя;
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(СтрокаКлючей);
КонецФункции

&НаКлиенте
Процедура ПослеПросмотраСловаряJSON(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодсказкуОбразцы(Строка)
	Если Строка=Неопределено Тогда Возврат КонецЕсли;
	
	Если Строка.Свойство="ПропуститьСтрок" Тогда
		Подсказка="Таблица будет загружена начиная со строки, после указанной";
	ИначеЕсли Строка.Свойство="Разделитель" Тогда
		Подсказка="По этому символу будут разделяться колонки при загрузке из файла";
	ИначеЕсли Строка.Свойство="Колонки" Тогда
		Подсказка="Укажите индексы колонок через запятую. Остальные колонки игнорируются.";
	ИначеЕсли Строка.Свойство="УдалитьКолонку" Тогда
		Подсказка="Колонка в источнике будет удалена после копирования";
	ИначеЕсли Строка.Свойство="Переформировать" Тогда
		Подсказка="Введите новые измерения массива через запятую";
	ИначеЕсли Строка.Свойство="ИмяГенератора" Тогда
		Если Элементы.Образцы.ТекущиеДанные.ТипГенератора = ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
			Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя", Строка.Значение));
			Если Строки.Количество()=0 Тогда
				Подсказка="Выберите 'Новый' из списка или нажмите кнопку 'Открыть' для создания генератора временных последовательностей.";
			Иначе
				Если Строки[0].Источник = 0 Тогда
					Подсказка="Стандартный генератор временных последовательностей. Выберите генератор из списка или нажмите кнопку 'Открыть'.";
				ИначеЕсли Строки[0].Источник = 1 Тогда
					Подсказка="Пользовательский Учебный генератор. Выберите генератор из списка или нажмите кнопку 'Открыть'.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.ТипГенератора = ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
			Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя", Строка.Значение));
			Если Строки.Количество()=0 Тогда
				Подсказка="Выберите 'Новый' из списка или нажмите кнопку 'Открыть' для создания генератора данных изображений.";
			Иначе
				Если Строки[0].Источник = 0 Тогда
					Подсказка="Загрузка образцов из массива Numpy. Выберите генератор из списка или нажмите кнопку 'Открыть'.";
				ИначеЕсли Строки[0].Источник = 1 Тогда
					Подсказка="Загрузка образцов из указанного каталога. Выберите генератор из списка или нажмите кнопку 'Открыть'.";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Подсказка="Выберите генератор изображений или временных последовательностей";
	ИначеЕсли Строка.Свойство="ЦелиГенератора" Тогда
		Подсказка="Цель, которая будет передана генератору во время обучения. Выберите имя слоя из списка либо файл Numpy на диске.";
	ИначеЕсли Строка.Свойство="ПутьКСловарю" Тогда
		Подсказка="Содержит индексы слов для векторизации текста.";
		Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
			Подсказка=Подсказка+" (обязательный)";
		Иначе
			Подсказка=Подсказка+" (если не указано, не используется)";
		КонецЕсли;
	ИначеЕсли Строка.Свойство="ТекстИзКаталога" Тогда
		Подсказка="Загружает все файлы в указанном каталоге";
	ИначеЕсли Строка.Свойство="НовыйТипДанных" Тогда
		Подсказка="Новый тип данных для всех элементов массива";
	ИначеЕсли Строка.Свойство="Векторизация" Тогда
		Подсказка="";
		Если Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") Тогда
			Подсказка="Ожидается последовательность чисел (индексы в словаре). Возможно прямое кодирование";
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
			Подсказка="Ожидается текст. Возможно преобразование в последовательности и прямое кодирование";
		ИначеЕсли Элементы.Образцы.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
			Подсказка="Способ преобразования текста в числа";
			Если Строка.Значение=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПлотныеВекторы") Тогда
				Подсказка="Преобразует текст в матрицу, где значение каждого элемента равно индексу слова в словаре";
			ИначеЕсли Строка.Значение=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
				Подсказка="Преобразует текст в двоичную матрицу классов, где элемент с индексом слова в словаре равен 1, остальные 0";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Строка.Свойство="РежимВекторизации" Тогда
		Подсказка="Способ, которым будут рассчитываться значения в матрице классов";
	ИначеЕсли Строка.Свойство="Нормализовать" Тогда
		Если Строка.Значение = ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Стандартизация") Тогда
			Подсказка="Из массива будет вычтено среднее, затем результат делится на стандартное отклонение";
		ИначеЕсли Строка.Значение = ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
			Подсказка="Минимаксная функция, выполняет линейное преобразование так, чтобы получаемые значения находились в нужном диапазоне."
		Иначе
			Подсказка="Входные данные проходят процесс 'выравнивания', т.е. приведения к определённому интервалу, например [0,1] или [-1,1]"
		КонецЕсли;
	ИначеЕсли Строка.Свойство="НормализоватьКолонки" Тогда
		Подсказка="Введите список индексов колонок через запятую. Если не указаны, нормализуется вся таблица";
	ИначеЕсли Строка.Свойство="ПрямоеКодирование" Тогда
		Подсказка="Список чисел будет преобразован в двоичную матрицу классов";
	ИначеЕсли Строка.Свойство="Классов" Тогда
		Подсказка="Количество классов в матрице классов (0 - Авто)";
	ИначеЕсли Строка.Свойство="ДлинаПоследовательности" Тогда
		Подсказка="Уравнивает количество слов (индексов) во всех строках текста";
	ИначеЕсли Строка.Свойство="МестоДополнения" Тогда
		Подсказка="Если строка короче остальных, дополняет последовательность нулями";
	ИначеЕсли Строка.Свойство="МестоУсечения" Тогда
		Подсказка="Если строка длинее остальных, обрезает скраю";
	ИначеЕсли Строка.Свойство="Масштабировать" Тогда
		Подсказка="Значение каждого элемента будет смаcштабировано в указанном диапазоне (Минимум,Максимум). Например: 0,1 (от 0 до 1)";
	ИначеЕсли Строка.Свойство="МасштабироватьОбъединить" Тогда
		Подсказка="При масштабировании колонки таблицы объединяются для расширения диапазона значений";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоГенераторИзображенийИзКаталога(СтрокаТЧ)
	Если Не Объект.ИспользоватьГенератор Тогда Возврат Ложь КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТЧ.ТипГенератора) И СокрЛП(СтрокаТЧ.ИмяГенератора)<>"" Тогда
		Если СтрокаТЧ.ТипГенератора = ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
			Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя", СтрокаТЧ.ИмяГенератора));
			Если Строки.Количество()>0 И Строки[0].Источник = 1 Тогда Возврат Истина КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь
КонецФункции

#КонецОбласти

#Область Цели

&НаКлиенте
Процедура ЦелиПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
		СписокОбразцов = Новый СписокЗначений;
		//НачальноеЗначение=Элемент.ТекстРедактирования;
		Для Каждого СтрОбразцы Из Объект.Образцы Цикл
			СписокОбразцов.Добавить(СтрОбразцы.ИмяСлоя);
		КонецЦикла;
		ЭлементСЗ=СписокОбразцов.НайтиПоЗначению(Элемент.ТекстРедактирования);
		ОповещениеВыбораЦелиИсточникаИзСписка = Новый ОписаниеОповещения("ПослеВыбораЦелиИсточникаИзСписка", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОповещениеВыбораЦелиИсточникаИзСписка, СписокОбразцов, Элемент, ЭлементСЗ);
		Возврат
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ПутьКФайлу=Элемент.ТекстРедактирования;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	Если Элементы.Цели.ТекущиеДанные.СпособЗагрузки.Пустая() Тогда
		Если ПутьКФайлу="" Тогда
			Фильтр = "Текстовый файл (*.txt)|*.txt|Файл в формате NumPy (*.npy)|*.npy|Все файлы (*.*)|*.*";
		Иначе
			Файл = Новый Файл(ПутьКФайлу);
			Если Файл.Расширение=".npy" Тогда
				Фильтр = "Файл в формате NumPy (*.npy)|*.npy|Текстовый файл (*.txt)|*.txt|Все файлы (*.*)|*.*";
			ИначеЕсли Файл.Расширение=".txt" Тогда
				Фильтр = "Текстовый файл (*.txt)|*.txt|Файл в формате NumPy (*.npy)|*.npy|Все файлы (*.*)|*.*";
			Иначе
				Фильтр = "Все файлы (*.*)|*.*|Текстовый файл (*.txt)|*.txt|Файл в формате NumPy (*.npy)|*.npy";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") Тогда
			Фильтр = "Файл в формате NumPy (*.npy)|*.npy";
		ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ТекстоваяТаблица") Тогда
			Фильтр = "Текстовый файл (*.txt)|*.txt|Все файлы (*.*)|*.*";
		ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
			//Если Элементы.Цели.ТекущиеДанные.ТекстИзКаталога Тогда
			//	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			//	ДиалогОткрытияФайла.Каталог=ПутьКФайлу;
			//Иначе
				Фильтр = "Текстовый файл (*.txt)|*.txt|Все файлы (*.*)|*.*";
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла для загрузки";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаЦели", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаЦели(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.Цели.ТекущиеДанные.ПутьКФайлу = ВыбранныеФайлы[0];
	Файл = Новый Файл(ВыбранныеФайлы[0]);
	Если Элементы.Цели.ТекущиеДанные.СпособЗагрузки.Пустая() Тогда
		Если Файл.Расширение=".npy" Тогда
			Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy");
			Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЦелиЗавершение", ЭтотОбъект, Элементы.Цели.ТекущиеДанные.ПолучитьИдентификатор());
			Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Цели.ТекущиеДанные.ПутьКФайлу, Оповещение);
		ИначеЕсли Файл.Расширение=".txt" Тогда
			Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст");
			Элементы.Цели.ТекущиеДанные.ТипДанных="";
			Элементы.Цели.ТекущиеДанные.Форма="";
		Иначе
			Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ТекстоваяТаблица");
			Элементы.Цели.ТекущиеДанные.ТипДанных="";
			Элементы.Цели.ТекущиеДанные.Форма="";
		КонецЕсли;
	ИначеЕсли Файл.Расширение=".npy" Тогда
		Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЦелиЗавершение", ЭтотОбъект, Элементы.Цели.ТекущиеДанные.ПолучитьИдентификатор());
		Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Цели.ТекущиеДанные.ПутьКФайлу, Оповещение);
	ИначеЕсли Файл.Расширение=".txt" Тогда
		Элементы.Цели.ТекущиеДанные.ТипДанных="";
		Элементы.Цели.ТекущиеДанные.Форма="";
	Иначе
		Элементы.Цели.ТекущиеДанные.ТипДанных="";
		Элементы.Цели.ТекущиеДанные.Форма="";
	КонецЕсли;
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюЦелиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	СтрокаОбразцы=Объект.Цели.НайтиПоИдентификатору(ДополнительныеПараметры);
	Если Результат.Тип.Пустая() Тогда
		СтрокаОбразцы.ТипДанных = Результат.Descr
	Иначе
		СтрокаОбразцы.ТипДанных = Результат.Тип
	КонецЕсли;
	СтрокаОбразцы.Форма = Результат.Форма;
	СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy");
	ИзменитьВидимостьЦели();
КонецПроцедуры

&НаКлиенте
Процедура ЦелиПутьКФайлуПриИзменении(Элемент)
	Файл = Новый Файл(Элементы.Цели.ТекущиеДанные.ПутьКФайлу);
	Если Файл.Расширение=".npy" Тогда
		Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЦелиЗавершение", ЭтотОбъект, Элементы.Цели.ТекущиеДанные.ПолучитьИдентификатор());
		Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Цели.ТекущиеДанные.ПутьКФайлу, Оповещение);
	Иначе
		Элементы.Цели.ТекущиеДанные.ТипДанных="";
		Элементы.Цели.ТекущиеДанные.Форма="";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЦелиИсточникаИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент=Неопределено Тогда Возврат КонецЕсли;
	Элементы.Цели.ТекущиеДанные.ПутьКФайлу = ВыбранныйЭлемент;
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦелиПриАктивизацииСтроки(Элемент)
	Если Элементы.Цели.ТекущиеДанные<>Неопределено Тогда
		//МассивОтбора=Новый Массив;
		Для Каждого СтрокаДоп Из ЦелиДоп Цикл
			СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные[СтрокаДоп.Свойство];
			//Если СтрокаДоп.Свойство="Разделитель" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.Разделитель;
			//ИначеЕсли СтрокаДоп.Свойство="ПропуститьСтрок" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.ПропуститьСтрок;
			//ИначеЕсли СтрокаДоп.Свойство="НомерКолонки" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.НомерКолонки;
			////ИначеЕсли СтрокаДоп.Свойство="СоСловарем" Тогда
			////	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.СоСловарем;
			//ИначеЕсли СтрокаДоп.Свойство="ПутьКСловарю" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.ПутьКСловарю;
			//ИначеЕсли СтрокаДоп.Свойство="НовыйТипДанных" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.НовыйТипДанных;
			//ИначеЕсли СтрокаДоп.Свойство="Векторизация" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.Векторизация;
			//ИначеЕсли СтрокаДоп.Свойство="Нормализовать" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.Нормализовать;
			//ИначеЕсли СтрокаДоп.Свойство="ПрямоеКодирование" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.ПрямоеКодирование;
			//ИначеЕсли СтрокаДоп.Свойство="Классов" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.Классов;
			//ИначеЕсли СтрокаДоп.Свойство="Переформировать" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.Переформировать;
			//ИначеЕсли СтрокаДоп.Свойство="УдалитьКолонку" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.УдалитьКолонку;
			//ИначеЕсли СтрокаДоп.Свойство="ИмяГенератора" Тогда
			//	СтрокаДоп.Значение = Элементы.Цели.ТекущиеДанные.ИмяГенератора;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ИзменитьВидимостьЦели();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьЦели()
	Если Элементы.Цели.ТекущиеДанные=Неопределено Тогда 
		//Или Элементы.Цели.ТекущиеДанные.СпособЗагрузки.Пустая()
		Для Каждого СтрокаДоп Из ЦелиДоп Цикл
			СтрокаДоп.Видимость=Ложь;
		КонецЦикла;
		Отбор=Новый ФиксированнаяСтруктура("Видимость", Истина);
		Элементы.ЦелиДоп.ОтборСтрок = Отбор;
		Возврат 
	КонецЕсли;
	
	МассивВидимых=Новый Массив;
	
	Если Объект.ИспользоватьГенератор И Объект.ВидГенератора=0 Тогда
		МассивВидимых.Добавить("ИмяГенератора");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы.Цели.ТекущиеДанные.СпособЗагрузки) Тогда
		МассивВидимых.Добавить("Последовательности");
		Если Элементы.Цели.ТекущиеДанные.Последовательности Тогда
			МассивВидимых.Добавить("ДлинаПоследовательности");
			МассивВидимых.Добавить("МестоДополнения");
			Если Элементы.Цели.ТекущиеДанные.ДлинаПоследовательности>0 Тогда
				МассивВидимых.Добавить("МестоУсечения");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") Тогда
		//МассивВидимых.Добавить("ПутьКСловарю");
		//Если Элементы.Цели.ТекущиеДанные.ПутьКСловарю="" Тогда
			МассивВидимых.Добавить("Переформировать");
			МассивВидимых.Добавить("НовыйТипДанных");
			МассивВидимых.Добавить("ПрямоеКодирование");
			Если Элементы.Цели.ТекущиеДанные.ПрямоеКодирование Тогда
				МассивВидимых.Добавить("Классов");
			КонецЕсли;
			МассивВидимых.Добавить("Нормализовать");
			Если Элементы.Цели.ТекущиеДанные.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
				МассивВидимых.Добавить("Масштабировать");
			КонецЕсли;
		//Иначе
		//	МассивВидимых.Добавить("Векторизация");
		//КонецЕсли;
		МассивВидимых.Добавить("Преобразования");
	ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ТекстоваяТаблица") Тогда
		МассивВидимых.Добавить("ПропуститьСтрок");
		МассивВидимых.Добавить("Разделитель");
		МассивВидимых.Добавить("Колонки");
		МассивВидимых.Добавить("Переформировать");
		МассивВидимых.Добавить("НовыйТипДанных");
		МассивВидимых.Добавить("ПрямоеКодирование");
		Если Элементы.Цели.ТекущиеДанные.ПрямоеКодирование Тогда
			МассивВидимых.Добавить("Классов");
		КонецЕсли;
		МассивВидимых.Добавить("Нормализовать");
		Если Элементы.Цели.ТекущиеДанные.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
			МассивВидимых.Добавить("Масштабировать");
		КонецЕсли;
		МассивВидимых.Добавить("Преобразования");
	ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
		//МассивВидимых.Добавить("ТекстИзКаталога");
		МассивВидимых.Добавить("ПутьКСловарю");
		МассивВидимых.Добавить("Кодировка");
		МассивВидимых.Добавить("Векторизация");
		//МассивВидимых.Добавить("НомерКолонки");
		МассивВидимых.Добавить("Преобразования");
	ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
		МассивВидимых.Добавить("НомерКолонки");
		МассивВидимых.Добавить("УдалитьКолонку");
		//МассивВидимых.Добавить("СоСловарем");
		МассивВидимых.Добавить("ПутьКСловарю");
		Если Элементы.Цели.ТекущиеДанные.ПутьКСловарю<>"" Тогда
			МассивВидимых.Добавить("Векторизация");
		Иначе
			МассивВидимых.Добавить("Переформировать");
			МассивВидимых.Добавить("НовыйТипДанных");
			МассивВидимых.Добавить("Нормализовать");
			Если Элементы.Цели.ТекущиеДанные.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
				МассивВидимых.Добавить("Масштабировать");
			КонецЕсли;
			МассивВидимых.Добавить("ПрямоеКодирование");
			Если Элементы.Цели.ТекущиеДанные.ПрямоеКодирование Тогда
				МассивВидимых.Добавить("Классов");
			КонецЕсли;
		КонецЕсли;
		//ИзменитьВидимостьЦелиКолонкаИзОбразцов(МассивВидимых);
		МассивВидимых.Добавить("Преобразования");
	КонецЕсли;
	Для Каждого СтрокаДоп Из ЦелиДоп Цикл
		Если МассивВидимых.Найти(СтрокаДоп.Свойство)<>Неопределено Тогда
			СтрокаДоп.Видимость=Истина;
			//Если СтрокаДоп.Свойство="ПутьКСловарю" Тогда
			//	Элементы.ЦелиДопЗначение.КнопкаВыбора=Истина;
			//КонецЕсли;
		Иначе
			СтрокаДоп.Видимость=Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Отбор=Новый ФиксированнаяСтруктура("Видимость", Истина);
	Элементы.ЦелиДоп.ОтборСтрок = Отбор;
	
	ИзменитьПодсказкуЦели(Элементы.ЦелиДоп.ТекущиеДанные)
КонецПроцедуры

&НаКлиенте
Процедура ЦелиДопПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Элементы.ЦелиДопЗначение.КнопкаВыбора = (Элемент.ТекущиеДанные.Свойство="ПутьКСловарю"
	                                         Или Элемент.ТекущиеДанные.Свойство="Преобразования");
	ИзменитьПодсказкуЦели(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЦелиДопЗначениеПриИзменении(Элемент)
	Элементы.Цели.ТекущиеДанные[Элементы.ЦелиДоп.ТекущиеДанные.Свойство]=Элементы.ЦелиДоп.ТекущиеДанные.Значение;
	Модифицированность=Истина;
	Если Элементы.ЦелиДоп.ТекущиеДанные.Свойство="ПутьКСловарю" Или Элементы.ЦелиДоп.ТекущиеДанные.Свойство="ПрямоеКодирование" 
		Или Элементы.ЦелиДоп.ТекущиеДанные.Свойство="Последовательности"
		Или Элементы.ЦелиДоп.ТекущиеДанные.Свойство="ДлинаПоследовательности"
		Или Элементы.ЦелиДоп.ТекущиеДанные.Свойство="Нормализовать" Тогда
		ИзменитьВидимостьЦели();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦелиСпособЗагрузкиПриИзменении(Элемент)
	ИзменитьВидимостьЦели();
КонецПроцедуры

&НаКлиенте
Процедура ЦелиДопЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.ЦелиДоп.ТекущиеДанные.Свойство = "ПутьКСловарю" Тогда
		СтандартнаяОбработка=Ложь;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ПутьКФайлу=Элементы.ЦелиДоп.ТекущиеДанные.Значение;
		ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
		Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
		Если Поз>0 Тогда
			ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
		КонецЕсли;
		Фильтр = НСтр("ru = 'JavaScript Object Notation '; en = 'JavaScript Object Notation '")+ "(*.json)|*.json";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Укажите имя файла словаря";	
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаСловаря", ЭтотОбъект, 2);
		ДиалогОткрытияФайла.Показать(ОпОп);
	ИначеЕсли Элементы.ЦелиДоп.ТекущиеДанные.Свойство = "Преобразования" Тогда
		СписокПреобразований=Новый СписокЗначений;
		Для Каждого ИмяСписка Из ПолучитьИменаСписковАлгоритмов() Цикл
			СписокПреобразований.Добавить(ИмяСписка,,,БиблиотекаКартинок.ВнешнийИсточникДанныхФункция);
		КонецЦикла;
		СписокПреобразований.Добавить("+","Новый",,БиблиотекаКартинок.СоздатьЭлементСписка);
		СписокПреобразований.Добавить("++","Скопировать",,БиблиотекаКартинок.СкопироватьОбъект);
		СписокПреобразований.Добавить("-","Удалить",,БиблиотекаКартинок.Удалить);
		ЭлементСП = СписокПреобразований.НайтиПоЗначению(Элементы.ЦелиДоп.ТекущиеДанные.Значение);
		ОписаниеО = Новый ОписаниеОповещения("ОбразцыЦелиДопВыборСпискаПреобразований", ЭтотОбъект, "ЦелиДоп");
		ПоказатьВыборИзСписка(ОписаниеО, СписокПреобразований, Элемент, ЭлементСП);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦелиДопПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если Элемент.ТекущийЭлемент=Элементы.ЦелиДопЗначение Тогда
		Если Элемент.ТекущийЭлемент.СписокВыбора.Количество()>0 Тогда
			Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство="Разделитель" Тогда
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить(",", "Запятая");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить(" ", "Пробел");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\t", "Табулятор");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\v", "Вертикальный табулятор");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\\", "Обратная дробь");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\r", "Возврат каретки");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\n", "Новая строка");
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить("\0", "Null");
		ИначеЕсли Элемент.ТекущиеДанные.Свойство="ИмяГенератора" Тогда
			Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
				Если ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) И СтрокаОбразцы.ИмяГенератора<>"" Тогда
					Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СтрокаОбразцы.ИмяСлоя);
					Если ЗначениеЗаполнено(СтрокаОбразцы.ЦелиГенератора) Тогда
						Если Лев(СтрокаОбразцы.ЦелиГенератора,1)="[" И Прав(СтрокаОбразцы.ЦелиГенератора,1)="]" Тогда
							ЦелиГенератора = Сред(СтрокаОбразцы.ЦелиГенератора,2, СтрДлина(СтрокаОбразцы.ЦелиГенератора)-2);
							МассивЦелиГенератора = СтрРазделить(ЦелиГенератора,",",Ложь);
							Для Сч = 0 По МассивЦелиГенератора.Количество()-1 Цикл
								Элемент.ТекущийЭлемент.СписокВыбора.Добавить(СтрокаОбразцы.ИмяСлоя+"["+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"")+"]");
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Элемент.ТекущиеДанные.Свойство="Масштабировать" Тогда
			МассивСлоев = ПолучитьМассивНормализаторовМасштабирования(Ложь, Элементы.Цели.ТекущиеДанные.ИмяСлоя);
			Для Каждого ИмяСлоя Из МассивСлоев Цикл
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ИмяСлоя);
			КонецЦикла;
		ИначеЕсли Элемент.ТекущиеДанные.Свойство="Кодировка" Тогда
			//ЗаполнитьСписокВыбораКодировкиТекста(Элемент.ТекущийЭлемент.СписокВыбора)
			Элемент.ТекущийЭлемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьКодировкиТекста())
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство="ПутьКСловарю" Или
			 Элемент.ТекущиеДанные.Свойство="Преобразования" Тогда
			Элементы.ЦелиДопЗначение.КнопкаОткрытия=Истина
		Иначе
			Элементы.ЦелиДопЗначение.КнопкаОткрытия=Неопределено
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодсказкуЦели(Строка)
	Если Строка=Неопределено Тогда Возврат КонецЕсли;
	
	Если Строка.Свойство="ПропуститьСтрок" Тогда
		ПодсказкаЦели="Таблица будет загружена начиная со строки, после указанной";
	ИначеЕсли Строка.Свойство="Разделитель" Тогда
		ПодсказкаЦели="По этому символу будет определяться колонка при загрузке из файла";
	ИначеЕсли Строка.Свойство="Колонки" Тогда
		ПодсказкаЦели="Укажите индексы колонок через запятую. Остальные колонки игнорируются.";
	ИначеЕсли Строка.Свойство="НомерКолонки" Тогда
		ПодсказкаЦели="Номер колонки, которую нужно взять из источника";
		ОбразецИсточник=Неопределено;
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			Если СтрокаОбразцы.ИмяСлоя=Элементы.Цели.ТекущиеДанные.ПутьКФайлу Тогда
				ОбразецИсточник=СтрокаОбразцы; Прервать
			КонецЕсли;
		КонецЦикла;
		Если ОбразецИсточник=Неопределено Тогда
			ПодсказкаЦели="Неверный источник!";
			Возврат
		КонецЕсли;
		Если ОбразецИсточник.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
			ПодсказкаЦели="Номер колонки, которую нужно взять из источника (после векторизации)";
		КонецЕсли;
	ИначеЕсли Строка.Свойство="УдалитьКолонку" Тогда
		ПодсказкаЦели="Колонка в источнике будет удалена после копирования";
	ИначеЕсли Строка.Свойство="Переформировать" Тогда
		ПодсказкаЦели="Введите новые измерения массива через запятую";
	ИначеЕсли Строка.Свойство="ПутьКСловарю" Тогда
		ПодсказкаЦели="Содержит индексы слов для векторизации текста. Если не указан, не используется";
	ИначеЕсли Строка.Свойство="НовыйТипДанных" Тогда
		ПодсказкаЦели="Новый тип данных для всех элементов массива";
	ИначеЕсли Строка.Свойство="Векторизация" Тогда
		ПодсказкаЦели="";
		Если Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
			ОбразецИсточник=Неопределено;
			Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
				Если СтрокаОбразцы.ИмяСлоя=Элементы.Цели.ТекущиеДанные.ПутьКФайлу Тогда
					ОбразецИсточник=СтрокаОбразцы; Прервать
				КонецЕсли;
			КонецЦикла;
			Если ОбразецИсточник=Неопределено Тогда
				ПодсказкаЦели="Неверный источник!";
				Возврат
			КонецЕсли;
			Если ОбразецИсточник.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") Тогда
				ПодсказкаЦели="Ожидается число (индекс в словаре). Возможно прямое кодирование";
			ИначеЕсли ОбразецИсточник.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
				ПодсказкаЦели="Ожидается текст (1 слово). Возможно преобразование в последовательности и прямое кодирование";
			ИначеЕсли ОбразецИсточник.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
				ПодсказкаЦели="Несовместимый исчточник!";
			КонецЕсли;
		ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") Тогда
			ПодсказкаЦели="Ожидается число (индекс в словаре). Возможно прямое кодирование";
		ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ТекстоваяТаблица") Тогда
			ПодсказкаЦели="Ожидается текст (1 слово). Возможно преобразование в последовательности и прямое кодирование";
		ИначеЕсли Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
			ПодсказкаЦели="Ожидается текст (1 слово). Возможно преобразование в последовательности и прямое кодирование";
		КонецЕсли;
	ИначеЕсли Строка.Свойство="Нормализовать" Тогда
		Если Строка.Значение = ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Стандартизация") Тогда
			ПодсказкаЦели="Значение каждого элемента будет поделено на количество уникальных значений во всем массиве";
		ИначеЕсли Строка.Значение = ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
			ПодсказкаЦели="Минимаксная функция, выполняет линейное преобразование так, чтобы получаемые значения находились в нужном диапазоне."
		Иначе
			ПодсказкаЦели="Входные данные проходят процесс 'выравнивания', т.е. приведения к определённому интервалу, например [0,1] или [-1,1]"
		КонецЕсли;
		Если Элементы.Цели.ТекущиеДанные.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
			ОбразецИсточник=Неопределено;
			Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
				Если СтрокаОбразцы.ИмяСлоя=Элементы.Цели.ТекущиеДанные.ПутьКФайлу Тогда
					ОбразецИсточник=СтрокаОбразцы; Прервать
				КонецЕсли;
			КонецЦикла;
			Если ОбразецИсточник=Неопределено Тогда
				ПодсказкаЦели="Неверный источник!";
				Возврат
			КонецЕсли;
			Если ОбразецИсточник.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
				ПодсказкаЦели="Несовместимый исчточник!";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Строка.Свойство="ПрямоеКодирование" Тогда
		ПодсказкаЦели="Список чисел будет преобразован в двоичную матрицу классов";
	ИначеЕсли Строка.Свойство="Классов" Тогда
		ПодсказкаЦели="Количество классов в матрице классов (0 - Авто)";
	ИначеЕсли Строка.Свойство="ИмяГенератора" Тогда
		ПодсказкаЦели="Выберите из списка генератор (должен быть задан в образцах), из которого будут получены цели для данного слоя";
	ИначеЕсли Строка.Свойство="Масштабировать" Тогда
		ПодсказкаЦели="Значение каждого элемента будет смаcштабировано в указанном диапазоне (Минимум,Максимум). Например: 0,1 (от 0 до 1)";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаСловаря(ВыбранныеФайлы, НомерИсточника) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Если НомерИсточника=1 Тогда
		Элементы.ОбразцыДоп.ТекущиеДанные.Значение = ВыбранныеФайлы[0];
		Элементы.Образцы.ТекущиеДанные.ПутьКСловарю = ВыбранныеФайлы[0];
		ИзменитьВидимостьОбразцы();
	ИначеЕсли НомерИсточника=2 Тогда
		Элементы.ЦелиДоп.ТекущиеДанные.Значение = ВыбранныеФайлы[0];
		Элементы.Цели.ТекущиеДанные.ПутьКСловарю = ВыбранныеФайлы[0];
	КонецЕсли;
	//Модифицированность=Истина;   
КонецПроцедуры

#Область Компиляция

&НаКлиенте
Процедура ФункцияПотерьОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ФункцияПотерь.ВыбиратьТип=Истина;
	Элементы.ДекорацияФункцияПотерь.Заголовок="";
КонецПроцедуры

&НаКлиенте
Процедура ФункцияПотерьПриИзменении(Элемент)
	//Элементы.ФункцияПотерь.Подсказка="";
	Если Объект.ФункцияПотерь<>Неопределено Тогда
		Элементы.ФункцияПотерь.ВыбиратьТип=Ложь;
		Если ТипЗнч(Объект.ФункцияПотерь)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
			Элементы.ДекорацияФункцияПотерь.Заголовок=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ФункцииПотерь",Объект.ФункцияПотерь);
		ИначеЕсли ТипЗнч(Объект.ФункцияПотерь)=Тип("СправочникСсылка.Нейро_Функции") Тогда
			Элементы.ДекорацияФункцияПотерь.Заголовок=Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Неопределено, Объект.ФункцияПотерь);
			НаложитьОграничениеВыбора(Элементы.ФункцияПотерь, "ФункцияПотерь");
		ИначеЕсли ТипЗнч(Объект.ФункцияПотерь)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
			МассивТекстов = Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Неопределено, Объект.ФункцияПотерь);
			Элементы.ДекорацияФункцияПотерь.Заголовок="";
			Для Каждого Текст Из МассивТекстов Цикл
				Если Элементы.ДекорацияФункцияПотерь.Заголовок<>"" Тогда Элементы.ДекорацияФункцияПотерь.Заголовок=Элементы.ДекорацияФункцияПотерь.Заголовок+", " КонецЕсли;
				Элементы.ДекорацияФункцияПотерь.Заголовок=Элементы.ДекорацияФункцияПотерь.Заголовок+Текст;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаложитьОграничениеВыбора(Элемент, ИмяТипа)
	НейроТип = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Типы", ИмяТипа);
	//Если Элемент.ТекущиеДанные<>Неопределено Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Тип", НейроТип);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		//Если Элемент.ТекущиеДанные.Объект<>Неопределено Тогда
		//	НовыйПараметр = Новый ПараметрВыбора("Отбор.Значение", Элемент.ТекущиеДанные.Объект);
		//	НовыйМассив.Добавить(НовыйПараметр);
		//КонецЕсли;
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элемент.ПараметрыВыбора = НовыеПараметры;
		//Элементы.ПараметрыСлояЗначение.ВыбиратьТип = Элемент.ТекущиеДанные.Значение=Неопределено;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОптимизаторПриИзменении(Элемент)
	//Элементы.Оптимизатор.Подсказка="";
	Если Объект.Оптимизатор<>Неопределено Тогда
		Элементы.Оптимизатор.ВыбиратьТип=Ложь;
		Если ТипЗнч(Объект.Оптимизатор)=Тип("ПеречислениеСсылка.Нейро_Оптимизаторы") Тогда
			Элементы.ДекорацияОптимизатор.Заголовок=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_Оптимизаторы",Объект.Оптимизатор);
		ИначеЕсли ТипЗнч(Объект.Оптимизатор)=Тип("СправочникСсылка.Нейро_Функции") Тогда
			//Значение = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Объект.Оптимизатор, "Значение");
			Элементы.ДекорацияОптимизатор.Заголовок = Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Неопределено, Объект.Оптимизатор);
			НаложитьОграничениеВыбора(Элементы.Оптимизатор, "Оптимизатор");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОптимизаторОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Оптимизатор.ВыбиратьТип=Истина;
	Элементы.ДекорацияОптимизатор.Заголовок = "";
КонецПроцедуры

&НаКлиенте
Процедура МетрикаПриИзменении(Элемент)
	//Элементы.Метрика.Подсказка="";
	Если Объект.Метрика<>Неопределено Тогда
		Элементы.Метрика.ВыбиратьТип=Ложь;
		Если ТипЗнч(Объект.Метрика)=Тип("ПеречислениеСсылка.Нейро_Метрики") Тогда
			Элементы.ДекорацияМетрика.Заголовок=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_Метрики",Объект.Метрика);
		ИначеЕсли ТипЗнч(Объект.Метрика)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
			Элементы.ДекорацияМетрика.Заголовок=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ФункцииПотерь",Объект.Метрика);
		ИначеЕсли ТипЗнч(Объект.Метрика)=Тип("СправочникСсылка.Нейро_Функции") Тогда
			Элементы.ДекорацияМетрика.Заголовок=Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Неопределено, Объект.Метрика);
			МасТипы = Новый Массив;
			МасТипы.Добавить(Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Типы", "Метрика"));
			МасТипы.Добавить(Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Типы", "ФункцияПотерь"));
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Тип", МасТипы);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Метрика.ПараметрыВыбора = НовыеПараметры;
		ИначеЕсли ТипЗнч(Объект.Метрика)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
			МассивТекстов = Нейро_ОбщийМодуль.ПолучитьТекстИзЗНачения(Неопределено, Объект.Метрика);
			Элементы.ДекорацияМетрика.Заголовок="";
			Для Каждого Текст Из МассивТекстов Цикл
				Если Элементы.ДекорацияМетрика.Заголовок<>"" Тогда Элементы.ДекорацияМетрика.Заголовок=Элементы.ДекорацияМетрика.Заголовок+", " КонецЕсли;
				Элементы.ДекорацияМетрика.Заголовок=Элементы.ДекорацияМетрика.Заголовок+Текст;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МетрикаОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Метрика.ВыбиратьТип=Истина;
	Элементы.ДекорацияМетрика.Заголовок="";
КонецПроцедуры

&НаКлиенте
Процедура ВесаПотерьПриИзменении(Элемент)
	Если Объект.ВесаПотерь<>Неопределено Тогда
		Элементы.ВесаПотерь.ВыбиратьТип=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВесаПотерьОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ВесаПотерь.ВыбиратьТип=Истина;
КонецПроцедуры

&НаКлиенте
Процедура Обучить(Команда)
	ЕстьОшибки=Ложь;
	Если Объект.Модель.Пустая() Тогда
		СообщитьОбОшибке("Объект.Модель", "Модель не выбрана!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если Объект.Образцы.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Образцы", "Отсутствуют входные слои!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если Объект.Цели.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Цели", "Отсутствуют выходные слои!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если Объект.ФункцияПотерь=Неопределено Или Объект.ФункцияПотерь.Пустая() Тогда
		СообщитьОбОшибке("Объект.ФункцияПотерь", "Не указана целевая функция потерь!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если Объект.Оптимизатор=Неопределено Или Объект.Оптимизатор.Пустая() Тогда
		СообщитьОбОшибке("Объект.Оптимизатор", "Не указан оптимизатор!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если ГенераторЗагрузкаИзКаталога(СтрокаОбразцы) Тогда
			Если СтрокаОбразцы.ПутьКФайлу="" Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Не указан путь к каталогу данных!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Продолжить
		КонецЕсли;
		Файл = Новый Файл(СтрокаОбразцы.ПутьКФайлу);
		Если СтрокаОбразцы.СпособЗагрузки.Пустая() Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан способ загрузки данных!");
			ЕстьОшибки=Истина;
		КонецЕсли;
		Если СтрокаОбразцы.ПутьКФайлу="" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Не указан путь к файлу данных!");
			ЕстьОшибки=Истина;
		КонецЕсли;
		Если СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И Файл.Расширение<>".npy" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Неверный тип файла! Ожидается .npy");
			ЕстьОшибки=Истина;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки<>ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И Файл.Расширение=".npy" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Неверный тип файла для данного способа загрузки!");
			ЕстьОшибки=Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.СпособЗагрузки.Пустая() Тогда
			Если Объект.ИспользоватьГенератор И СокрЛП(СтрокаЦели.ИмяГенератора)<>"" Тогда
				ЕстьОшибки=Не ПроверитьГенераторДляЦели(СтрокаЦели);
			Иначе
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].СпособЗагрузки", "Не указан способ загрузки данных!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЕсли;
		Файл = Новый Файл(СтрокаЦели.ПутьКФайлу);
		Если СтрокаЦели.ПутьКФайлу="" Тогда
			Если Объект.ИспользоватьГенератор И СокрЛП(СтрокаЦели.ИмяГенератора)<>"" Тогда
				ЕстьОшибки=Не ПроверитьГенераторДляЦели(СтрокаЦели);
			Иначе
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Не указан путь к файлу данных!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		ИначеЕсли СтрокаЦели.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
			Отбор = Новый Структура("ИмяСлоя", СтрокаЦели.ПутьКФайлу);
			Строки = Объект.Образцы.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Неверное имя слоя источника!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		ИначеЕсли СтрокаЦели.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") И Файл.Расширение<>".npy" Тогда
			СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Неверный тип файла! Ожидается .npy");
			ЕстьОшибки=Истина;
		ИначеЕсли СтрокаЦели.СпособЗагрузки<>ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") И Файл.Расширение=".npy" Тогда
			СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Неверный тип файла для данного способа загрузки!");
			ЕстьОшибки=Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст")  Тогда
			Если СтрокаОбразцы.ПутьКСловарю="" Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан путь к словарю!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Если СтрокаОбразцы.Векторизация.Пустая() Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан способ векторизации текста!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И СтрокаОбразцы.ПутьКСловарю<>""  Тогда
		Иначе
			Если СтрокаОбразцы.ПрямоеКодирование И СтрокаОбразцы.Классов=0 Тогда
				Поле="Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ИмяСлоя";
				СообщитьОбОшибке(Поле, "Не указано число классов для прямого кодирования!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
			Если СтрокаЦели.ПутьКСловарю="" Тогда
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].СпособЗагрузки", "Не указан путь к словарю!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Если СтрокаЦели.Векторизация.Пустая() Тогда
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].СпособЗагрузки", "Не указан способ векторизации текста!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	ЕстьОшибки = ЕстьОшибкиВДеревеСлоев(ДеревоСлоев.ПолучитьЭлементы());
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаТч Из Объект.ЗагрузкаВесов Цикл
		Если ЗначениеЗаполнено(СтрокаТч.ФункцияПотерь) Или ЗначениеЗаполнено(СтрокаТч.Оптимизатор) Тогда
			Если Не ЗначениеЗаполнено(СтрокаТч.ФункцияПотерь) Тогда
				СтрокаДЗ=НайтиСтрокуЗагрузкиВесовВДереве(ДеревоСлоев.ПолучитьЭлементы(), СтрокаТч);
				Если СтрокаДЗ<>Неопределено Тогда
					Элементы.ДеревоСлоев.ТекущаяСтрока=СтрокаДЗ.ПолучитьИдентификатор();
					СообщитьОбОшибке("ВложенныеФункцияПотерь", "Недостаточно параметров компиляции модели!");
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТч.Оптимизатор) Тогда
				СтрокаДЗ=НайтиСтрокуЗагрузкиВесовВДереве(ДеревоСлоев.ПолучитьЭлементы(), СтрокаТч);
				Если СтрокаДЗ<>Неопределено Тогда
					Элементы.ДеревоСлоев.ТекущаяСтрока=СтрокаДЗ.ПолучитьИдентификатор();
					СообщитьОбОшибке("ВложенныеОптимизатор", "Недостаточно параметров компиляции модели!");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Доп=Новый Структура("Имя, Приемник", "Training", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("ОбучитьПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
	
КонецПроцедуры

&НаКлиенте
Функция ГенераторЗагрузкаИзКаталога(СтрокаТЧ)
	Если Не Объект.ИспользоватьГенератор Тогда Возврат Ложь КонецЕсли;
	Если СтрокаТЧ.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") И ЗначениеЗаполнено(СтрокаТЧ.ИмяГенератора) Тогда
		Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя", СтрокаТЧ.ИмяГенератора));
		Если Строки.Количество()>0 И Строки[0].Источник=1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь
КонецФункции

&НаКлиенте
Функция ПроверитьГенераторДляЦели(СтрокаЦели)
	Если Объект.ИспользоватьГенератор И СокрЛП(СтрокаЦели.ИмяГенератора)<>"" Тогда
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			Если СтрокаОбразцы.ИмяСлоя=СтрокаЦели.ИмяГенератора Тогда
				Если ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) Тогда
					Если ЗначениеЗаполнено(СтрокаОбразцы.ИмяГенератора) Тогда
						Если СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
							Тч = Объект.ВременныеПоследовательности;
						ИначеЕсли СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
							Тч = Объект.ДанныеИзображений;
						КонецЕсли;
						Строки = Тч.НайтиСтроки(Новый Структура("Имя", СтрокаОбразцы.ИмяГенератора));
						Если Строки.Количество()=0 Тогда
							СообщитьОбОшибке("ОбразцыДоп", "Неверный генератор!");
							Возврат Ложь
						Иначе
							Возврат Истина
						КонецЕсли;
					Иначе
						СообщитьОбОшибке("ОбразцыДоп", "Не выбран генератор!");
						Возврат Ложь
					КонецЕсли;
				Иначе
					СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ТипГенератора", "Не выбран тип генератора!");
					Возврат Ложь
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь
КонецФункции

&НаКлиенте
Функция НайтиСтрокуЗагрузкиВесовВДереве(ЭлементыДЗ, СтрокаТч)
	Для Каждого СтрокаДЗ Из ЭлементыДЗ Цикл
		ПутьКУзлу = ПолучитьПолныйПутьКУзлу(СтрокаДЗ);
		Отбор = Новый Структура("Путь, ИмяСлоя", ПутьКУзлу, СтрокаДЗ.ИмяСлоя);
		Строки=Объект.ЗагрузкаВесов.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Возврат СтрокаДЗ;
		КонецЕсли;
		Дочерние = СтрокаДЗ.ПолучитьЭлементы();
		Если Дочерние.Количество()>0 Тогда
			Строка = НайтиСтрокуЗагрузкиВесовВДереве(Дочерние, СтрокаТч);
			Если Строка<>Неопределено Тогда Возврат Строка КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено
КонецФункции

&НаКлиенте
Функция ЕстьОшибкиВДеревеСлоев(Строки)
	Результат=Ложь;
	Для Каждого Строка Из Строки Цикл
		Если Строка.ЗагружатьПараметры И Строка.ПутьКФайлу="" Тогда
			//Поле = "ДеревоСлоев["+СокрЛП(Строка.ПолучитьИдентификатор())+"].ЗагружатьПараметры";
			СообщитьОбОшибке("ДеревоСлоев", Строка.ИмяСлоя+": для загрузки параметров компиляции необходимо указать путь к файлу обученной сети!");
			Результат=Истина;
		КонецЕсли;
		Дочерние = Строка.ПолучитьЭлементы();
		Если Дочерние.Количество()>0 Тогда
			Результат1=ЕстьОшибкиВДеревеСлоев(Дочерние);
			Если Результат1 Тогда Результат=Результат1 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыОбучения(МасНомераСтрок, СтруктураПараметров)
	Возврат Нейро_Обучение.СформироватьТекстПрограммыОбучения(Объект, МасНомераСтрок, СтруктураПараметров, Объект.ОтображениеВыполнения, ЗагрузкаПараметров);
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыОбученияГенератор(МасНомераСтрок, СтруктураПараметров)
	Возврат Нейро_Обучение.СформироватьТекстПрограммыОбученияГенератор(Объект, МасНомераСтрок, СтруктураПараметров, Объект.ОтображениеВыполнения, ЗагрузкаПараметров);
КонецФункции

&НаКлиенте
Процедура ОбучитьПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	ПрефиксИмени = "Fit_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	ИмяФайлаМодели = ПрефиксИмени+"_"+Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Объект.Модель,"ИмяМодели")+".json";
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлРезультатов", ПрефиксИмени+"_history.json");
	СтруктураПараметров.Вставить("ФайлМодели", ИмяФайлаМодели);
	СтруктураПараметров.Вставить("ИдентификаторFromJSON", Нейро_ОбщийМодуль.ПолучитьИдентификаторИзРегистра("TokenizerFromJSON"));
	СтруктураПараметров.Вставить("ФайлЗагрузкиВесов", ПрефиксИмени+"_weights_paths.json");
	СтруктураПараметров.Вставить("ФайлНормализации", ПрефиксИмени+"_normalization.json");
	
	МасНомераСтрок=Новый Массив;
	
	СтрокаЗагрузкиВесовJSON = ПолучитьСтрокуСлоиJSON();
	
	Если Объект.ИспользоватьГенератор Тогда
		СтруктураПараметров.Вставить("ОГенераторе", ПрефиксИмени+"_gen.txt");
		Сформировано = СформироватьТекстПрограммыОбученияГенератор(МасНомераСтрок, СтруктураПараметров);
		//ТекстПрограммы=СформироватьТекстПрограммыОбученияГенератор(МасНомераСтрок, СтруктураПараметров);
	Иначе
		Сформировано = СформироватьТекстПрограммыОбучения(МасНомераСтрок, СтруктураПараметров);
	КонецЕсли;
	Если Сформировано.Ошибка Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения, Сформировано.Текст, , "Ошибка при формировании текста программы!");
		Возврат
	Иначе
		Объект.ТекстПрограммы = Сформировано.Текст;
		ТекстПрограммы = Сформировано.Текст;
	КонецЕсли;
	
	НомераСтрок.Очистить();
	Для Каждого СтруктураНомера Из МасНомераСтрок Цикл
		НоваяСтрока = НомераСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНомера);
		НоваяСтрока.Номер = НоваяСтрока.Номер + 1;
	КонецЦикла;
	
	ПутьКФайлуМодели = ПутьККаталогуОбучения+ИмяФайлаМодели;
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуМодели, КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Объект.Модель,"ТекстМоделиJSON"));
	ЗаписьТекста.Закрыть();	
	
	ПутьКФайлуЗагрузкиВесов = ПутьККаталогуОбучения+ПрефиксИмени+"_weights_paths.json";
	//СтрокаЗагрузкиВесовJSON = ПолучитьСтрокуСлоиJSON();
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуЗагрузкиВесов, КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(СтрокаЗагрузкиВесовJSON);
	ЗаписьТекста.Закрыть();	
	
	Оп = Новый ОписаниеОповещения("ОбучитьЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлРезультатов", ПрефиксИмени+"_History.json");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	//ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	Если Объект.ОтображениеВыполнения<1 Тогда
		ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	Иначе
		ДопПараметры.Вставить("ФайлСообщений", Неопределено);
	КонецЕсли;
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Объект.ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбучитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ФайлРезультатов);
	СтрокаJSON = Текст.Прочитать();
	Текст.Закрыть();
	Объект.Показатели = СтрокаJSON;
	
	УдалятьФайлыПослеВыполнения = Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения");
	Если УдалятьФайлыПослеВыполнения Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлРезультатов);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОГенераторе") Тогда
		Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ОГенераторе);
		Объект.ОГенераторах = Текст.Прочитать();
		Текст.Закрыть();
		Если УдалятьФайлыПослеВыполнения Тогда
			НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ОГенераторе);
		КонецЕсли;
	КонецЕсли;
	
	Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ФайлНормализации);
	Объект.Нормализация = Текст.Прочитать();
	Текст.Закрыть();
	Если УдалятьФайлыПослеВыполнения Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлНормализации);
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));

	Элементы.ПоказатьНормализацию.Видимость = Объект.Нормализация<>"" И Объект.Нормализация<>"[]";
	ПоказатьНормализацию1();
	
	//НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлРезультатов);
	//НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлНормализации);
	
	
	//Если ЕстьГенераторИзображенияИЗКаталогаСВалидацией() Тогда
	//	Для Сч=1 По СообщенияПитон.КоличествоСтрок() Цикл
	//		СтрокаСообщения = СообщенияПитон.ПолучитьСтроку(Сч);
	//	КонецЦикла;
	//КонецЕсли;
	
	ПостроитьДеревоИсторииНаСервере(СтрокаJSON);
	НомерДиаграммы=0;
	Элементы.ДиаграммыНазад.Доступность=НомерДиаграммы>0;
	Элементы.ДиаграммыДалее.Доступность=НомерДиаграммы<СписокМетрикПоКатегориям.Количество()-1;
	ПостроитьДиаграммы(НомерДиаграммы);
	Элементы.Закладки.ТекущаяСтраница=Элементы.ГруппаДиаграмма;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНормализацию1()
	Элементы.ПоказатьНормализацию1.Видимость = Объект.Нормализация<>"" И Объект.Нормализация<>"[]";
	Элементы.ДенормализоватьПрогноз.Видимость = Объект.Нормализация<>"" И Объект.Нормализация<>"[]";
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаВыполнения(Результат, ДополнительныеПараметры) Экспорт
	Если Не ТипЗнч(Результат)=Тип("Структура") Тогда Возврат КонецЕсли;
	Элементы.Закладки.ТекущаяСтраница = Элементы.ГруппаТекстПрограммы;
	Если Результат.НомераСтрок.Количество()>0 Тогда
		ПредыдущийНомер = 0; //СтрокаНомер = Неопределено;
		НомерСтрокиСОшибкой = Результат.НомераСтрок[Результат.НомераСтрок.Количество()-1];
		Для Сч=0 По НомераСтрок.Количество()-1 Цикл
			Если НомераСтрок[Сч].Номер = НомерСтрокиСОшибкой
				Или (НомерСтрокиСОшибкой>ПредыдущийНомер И НомерСтрокиСОшибкой<НомераСтрок[Сч].Номер) Тогда
				Элементы.НомераСтрок.ТекущаяСтрока = НомераСтрок[Сч].ПолучитьИдентификатор(); 
				НомераСтрокПриАктивизацииСтроки(Элементы.НомераСтрок);
				Прервать
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Результат.Ошибки.Количество()>0 Тогда
		парам = новый Структура;
		парам.вставить("Сообщения",Результат);
		ОткрытьФорму("ОбщаяФорма.Нейро_ФормаПоказатьОшибки",парам,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммы(Индекс)
	Показатели = ПолучитьПоказателиКачества(Индекс);
	Если Показатели=Неопределено Тогда Возврат КонецЕсли;
	
	Метрика1=ОпределитьМетрикуПоИдентификатору(Показатели.ТипМетрики);
	Диаграмма1.Очистить();
	Попытка
		Диаграмма1.Точки.Очистить();
		Диаграмма1.Серии.Очистить();
	Исключение
		
	КонецПопытки;
	Диаграмма1.ОтображатьЗаголовок=Истина;
	Диаграмма1.ВидПодписей=ВидПодписейКДиаграмме.СерияЗначение;
	//Диаграмма1.ОбластьЗаголовка.Текст = Показатели.ТипМетрики;
	Диаграмма1.ОбластьЗаголовка.Текст = Метрика1;
	Диаграмма1.Обновление=Ложь;
	Диаграмма1.ВидПодписей=ВидПодписейКДиаграмме.Значение;
	Если Показатели.Метрики.Количество()>0 Тогда
		Для Сч=1 По Показатели.Метрики[0].Значения.Количество() Цикл
			//Точка = Диаграмма1.Точки.Добавить(СокрЛП(Сч));
			Точка = Диаграмма1.Точки.Добавить(СокрЛП(СтруктураИстории.epoch[Сч-1]));
		КонецЦикла;
	КонецЕсли;
	//Диаграмма1.КоличествоСерий = Показатели.Метрики.Количество();
	Для Каждого ОписаниеМетрики Из Показатели.Метрики Цикл
		Показатель=ОпределитьМетрикуПоИдентификатору(ОписаниеМетрики.Показатель);
		Серия = Диаграмма1.Серии.Добавить(?(ОписаниеМетрики.ИмяСлоя=Неопределено,Показатель,ОписаниеМетрики.ИмяСлоя));
		Серия.Маркер=ТипМаркераДиаграммы.Нет;
	КонецЦикла;
	
	Для Сч=0 По Показатели.Метрики.Количество()-1 Цикл
		ОписаниеМетрики = Показатели.Метрики[Сч];
		//Диаграмма1.Точки[Сч].Текст = ?(ОписаниеМетрики.ИмяСлоя=Неопределено,"",ОписаниеМетрики.ИмяСлоя+", ")+ОписаниеМетрики.Показатель; 
		Для Сч1=0 По Показатели.Метрики[Сч].Значения.Количество()-1 Цикл
			Значение = Показатели.Метрики[Сч].Значения.Получить(Сч1);
			Диаграмма1.УстановитьЗначение(Сч1, Сч, Значение); 
		КонецЦикла;
	КонецЦикла;
	
	Диаграмма1.ФорматЗначенийВПодписях="ЧДЦ="+СокрЛП(Точность);
	Диаграмма1.ВидПодписей=?(Подписи,ВидПодписейКДиаграмме.Значение,ВидПодписейКДиаграмме.Нет);
	Диаграмма1.Обновление = Истина;
	
	Диаграмма2.Очистить();
	Диаграмма2.ОбластьЗаголовка.Текст = "";
	Если Показатели.Валидации.Количество()=0 Тогда Возврат КонецЕсли;
	ЭтоВалидация=Ложь;
	Для Каждого СтруктураВалидации Из Показатели.Валидации Цикл
		Если СтруктураВалидации.ЭтоВалидация Тогда ЭтоВалидация=Истина КонецЕсли;
		Прервать;
	КонецЦикла;
	Метрика2=ОпределитьМетрикуПоИдентификатору(Показатели.ТипВалидации);
	Попытка
		Диаграмма2.Точки.Очистить();
		Диаграмма2.Серии.Очистить();
	Исключение
		//Совместимость со старыми версиями
	КонецПопытки;
	Диаграмма2.ОтображатьЗаголовок=Истина;
	Диаграмма2.ВидПодписей=ВидПодписейКДиаграмме.СерияЗначение;
	//Диаграмма2.ОбластьЗаголовка.Текст = Показатели.ТипМетрики;
	Диаграмма2.ОбластьЗаголовка.Текст = СокрЛП(Метрика2)+?(ЭтоВалидация,Символы.ВК+"(Проверка)","");
	Диаграмма2.Обновление=Ложь;
	Диаграмма2.ВидПодписей=ВидПодписейКДиаграмме.Значение;
	Для Сч=1 По Показатели.Валидации[0].Значения.Количество() Цикл
		//Точка = Диаграмма2.Точки.Добавить(СокрЛП(Сч));
		Точка = Диаграмма2.Точки.Добавить(СокрЛП(СтруктураИстории.epoch[Сч-1]));
	КонецЦикла;
	Для Каждого ОписаниеМетрики Из Показатели.Валидации Цикл
		Показатель=ОпределитьМетрикуПоИдентификатору(ОписаниеМетрики.Показатель, ЭтоВалидация);
		Серия = Диаграмма2.Серии.Добавить(?(ОписаниеМетрики.ИмяСлоя=Неопределено,Показатель,ОписаниеМетрики.ИмяСлоя));
		Серия.Маркер=ТипМаркераДиаграммы.Нет;
	КонецЦикла;
	
	Для Сч=0 По Показатели.Валидации.Количество()-1 Цикл
		ОписаниеМетрики = Показатели.Валидации[Сч];
		Для Сч1=0 По Показатели.Валидации[Сч].Значения.Количество()-1 Цикл
			Значение = Показатели.Валидации[Сч].Значения.Получить(Сч1);
			Диаграмма2.УстановитьЗначение(Сч1, Сч, Значение); 
		КонецЦикла;
	КонецЦикла;
	
	Диаграмма2.ФорматЗначенийВПодписях="ЧДЦ="+СокрЛП(Точность);
	Диаграмма2.ВидПодписей=?(Подписи,ВидПодписейКДиаграмме.Значение,ВидПодписейКДиаграмме.Нет);
	Диаграмма2.Обновление = Истина;
КонецПроцедуры

&НаСервере
Функция ОпределитьМетрикуПоИдентификатору(Идентификатор, ЭтоВалидация=Ложь)
	Идентификатор1=Идентификатор;
	Если ЭтоВалидация И Лев(Идентификатор,4)="val_" Тогда
		Идентификатор1=Прав(Идентификатор1, СтрДлина(Идентификатор1)-4);
	КонецЕсли;
		
	Если Идентификатор1="loss" Тогда
		Возврат "Потери"
	ИначеЕсли Идентификатор1="acc" Тогда
		Возврат "Верность"
	ИначеЕсли Идентификатор1="ce" Тогда
		Возврат "Перекрестная энтропия"
	ИначеЕсли Идентификатор1="lr" Тогда
		Возврат "Скорость обучения"
	Иначе
		Метрика=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Метрики", Идентификатор1);
		Если Метрика=Неопределено Тогда
			Метрика=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ФункцииПотерь", Идентификатор1);
		КонецЕсли;
		Если Метрика=Неопределено Тогда
			Метрика=Идентификатор1;
		КонецЕсли;
		Возврат Метрика
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПостроитьДеревоИсторииНаСервере(СтрокаJSON)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураИстории = ДокументОбъект.ПостроитьДеревоИсторииНаСервере(СтрокаJSON);	
	Если СтруктураИстории=Неопределено Тогда
		ВызватьИсключение("Не удалось разобрать файл результатов!");
	КонецЕсли;
	//СтруктураИстории = ДокументОбъект.ПолучитьСтруктуруИстории();
	
	ИменаСлоев=Новый Массив;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		ИменаСлоев.Добавить(СтрокаОбразцы.ИмяСлоя)
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		ИменаСлоев.Добавить(СтрокаЦели.ИмяСлоя)
	КонецЦикла;
	
	СписокМетрикПоКатегориям.Очистить();
	//Если Объект.Метрика=Неопределено Или Объект.Метрика.Пустая() Тогда Возврат КонецЕсли;
	Если СтруктураИстории.Свойство("params") Тогда
		МассивМетрикПоКатегориям=ДокументОбъект.СоздатьКатегорииМетрик(Объект.Метрика);
		Для Каждого СтруктМетрики Из МассивМетрикПоКатегориям Цикл
			СписокМетрикПоКатегориям.Добавить(СтруктМетрики);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПостроитьСтруктуруДереваНаСервере(СтрокаJSON)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПостроитьДеревоНаСервере(СтрокаJSON);	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиКачества(Индекс)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПолучитьПоказателиКачества(СтруктураИстории, СписокМетрикПоКатегориям, Индекс);
КонецФункции

&НаКлиенте
Процедура КонструкторДанныхИзТабличногоДокумента(Команда)
	Доп=Новый Структура("Имя, Приемник", "Data", "ПутьККаталогу");
	Оп = Новый ОписаниеОповещения("КонструкторДанныхИзТабличногоДокументаПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторДанныхИзТабличногоДокументаПродолжить(Результат, ДополнительныеПараметры) Экспорт
	ПараметрыД = Новый Структура;
	МассивИмен=Новый Массив;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		МассивИмен.Добавить(СтрокаОбразцы.ИмяСлоя);
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		МассивИмен.Добавить(СтрокаЦели.ИмяСлоя);
	КонецЦикла;
	ПараметрыД.Вставить("ИменаСлоев", МассивИмен);
	ПараметрыД.Вставить("ПутьККаталогу", ПутьККаталогу);
	Оп = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораДанных", ЭтотОбъект);
	ОткрытьФорму("Обработка.Нейро_КонструкторДанных.Форма", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораДанных(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия<>Неопределено Тогда
		Для Каждого СтруктураДанных Из РезультатЗакрытия Цикл
			Отбор=Новый Структура("ИмяСлоя", СтруктураДанных.ИмяСлоя);
			Строки = Объект.Образцы.НайтиСтроки(Отбор);
			Если Строки.Количество()>0 Тогда
				Строка = Строки[0];
				Строка.ПутьКСловарю = СтруктураДанных.ПутьКСловарю;
				Строка.ПутьКФайлу = СтруктураДанных.ПутьКФайлу;
				Файл = Новый Файл(СтруктураДанных.ПутьКФайлу);
				Если Файл.Расширение=".npy" Тогда
					Строка.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy");
					Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюОбразцыЗавершение", ЭтотОбъект, Строка.ПолучитьИдентификатор());
					Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Строка.ПутьКФайлу, Оповещение);
				ИначеЕсли Файл.Расширение=".txt" Тогда
					Строка.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст");
					Строка.ТипДанных="";
					Строка.Форма="";
				КонецЕсли;
			Иначе
				Строки = Объект.Цели.НайтиСтроки(Отбор);
				Если Строки.Количество()>0 Тогда
					Строка = Строки[0];
					Строка.ПутьКСловарю = СтруктураДанных.ПутьКСловарю;
					Строка.ПутьКФайлу = СтруктураДанных.ПутьКФайлу;
					Файл = Новый Файл(СтруктураДанных.ПутьКФайлу);
					Если Файл.Расширение=".npy" Тогда
						Строка.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy");
						Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЦелиЗавершение", ЭтотОбъект, Строка.ПолучитьИдентификатор());
						Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Строка.ПутьКФайлу, Оповещение);
					ИначеЕсли Файл.Расширение=".txt" Тогда
						Строка.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст");
						Строка.ТипДанных="";
						Строка.Форма="";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммыНазад(Команда)
	Если НомерДиаграммы>0 Тогда
		НомерДиаграммы=НомерДиаграммы-1;
		ПостроитьДиаграммы(НомерДиаграммы)
	КонецЕсли;
	Элементы.ДиаграммыНазад.Доступность=НомерДиаграммы>0;
	Элементы.ДиаграммыДалее.Доступность=НомерДиаграммы<СписокМетрикПоКатегориям.Количество()-1;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммыДалее(Команда)
	Если НомерДиаграммы<СписокМетрикПоКатегориям.Количество()-1 Тогда
		НомерДиаграммы=НомерДиаграммы+1;
		ПостроитьДиаграммы(НомерДиаграммы)
	КонецЕсли;
	Элементы.ДиаграммыНазад.Доступность=НомерДиаграммы>0;
	Элементы.ДиаграммыДалее.Доступность=НомерДиаграммы<СписокМетрикПоКатегориям.Количество()-1;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСетиЗагрузкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДиалогЗагрузкиСети("ПутьКСетиЗагрузка")
КонецПроцедуры

&НаКлиенте
Процедура ПутьККонтрольнойТочкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДиалогЗагрузкиСети("ПутьККонтрольнойТочке")
КонецПроцедуры

&НаКлиенте
Процедура ПутьККонтрольнойТочкеПриИзменении(Элемент)
	СтрокиДС=ДеревоСлоев.ПолучитьЭлементы();
	Если СтрокиДС.Количество()>0 Тогда СтрокиДС[0].ПутьКФайлу=Объект.ПутьККонтрольнойТочке; КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСетиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДиалогЗагрузкиСети("ПутьКСети",Истина)
КонецПроцедуры

&НаКлиенте
Процедура ДиалогЗагрузкиСети(Приемник, Сохранение=Ложь)
	Режим = ?(Сохранение,РежимДиалогаВыбораФайла.Сохранение,РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	//ПутьКФайлу=Объект.ПутьККонтрольнойТочке;
	ПутьКФайлу=Объект[Приемник];
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	Фильтр = "Hierarchical Data Format v5 (*.h5)|*.h5";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла для "+?(Сохранение,"сохранения","загрузки");	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаСетиЗагрузка", ЭтотОбъект, Приемник);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаСетиЗагрузка(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Объект[ДополнительныеПараметры] = ВыбранныеФайлы[0];
	Если ДополнительныеПараметры="ПутьККонтрольнойТочке" Тогда
		СтрокиДС=ДеревоСлоев.ПолучитьЭлементы();
		Если СтрокиДС.Количество()>0 Тогда СтрокиДС[0].ПутьКФайлу=ВыбранныеФайлы[0]; КонецЕсли;
	КонецЕсли;
	ПутьКСетиЗагрузкаПриИзменении(Неопределено);
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСетиЗагрузкаПриИзменении(Элемент)
	Элементы.ГруппаЗагрузкаВесов.Видимость=Объект.ПутьКСетиЗагрузка="";
	Элементы.ГруппаКомпиляция.Видимость=Объект.ПутьКСетиЗагрузка="";
КонецПроцедуры

#КонецОбласти

#Область Самоконтроль

// КонтрольныеТочки (ModelCheckpoint)
&НаКлиенте
Процедура КонтрольныеТочкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Режим = ПредопределенноеЗначение("Перечисление.Нейро_РежимСамоконтроля.auto");
		Элемент.ТекущиеДанные.Период = 1;
	КонецЕсли;
КонецПроцедуры

// ДосрочныеЗавершения (EarlyStopping)
&НаКлиенте
Процедура ДосрочныеЗавершенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Режим = ПредопределенноеЗначение("Перечисление.Нейро_РежимСамоконтроля.auto");
	КонецЕсли;
КонецПроцедуры

// УменьшениеСкоростиПриЗастое (ReduceLROnPlateau)
&НаКлиенте
Процедура УменьшениеСкоростиПриЗастоеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Режим = ПредопределенноеЗначение("Перечисление.Нейро_РежимСамоконтроля.auto");
		Элемент.ТекущиеДанные.Коэффициент = 0.1;
		Элемент.ТекущиеДанные.ОжидатьУлучшения = 10;
		Элемент.ТекущиеДанные.МинимальноеИзменение = 0.0001;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеТочкиПутьККаталогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ПутьКФайлу=Элемент.ТекстРедактирования;
	ДиалогОткрытияФайла.Каталог=ПутьКФайлу;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя каталога для сохранения контрольных точек";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораКаталогаКонтрольныхТочек", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораКаталогаКонтрольныхТочек(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.КонтрольныеТочки.ТекущиеДанные.ПутьККаталогу = ВыбранныеФайлы[0];
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТочностьПриИзменении(Элемент)
	Диаграмма1.ФорматЗначенийВПодписях="ЧДЦ="+СокрЛП(Точность);
	Диаграмма2.ФорматЗначенийВПодписях="ЧДЦ="+СокрЛП(Точность);
КонецПроцедуры

&НаКлиенте
Процедура ПодписиПриИзменении(Элемент)
	Диаграмма1.ВидПодписей=?(Подписи,ВидПодписейКДиаграмме.Значение,ВидПодписейКДиаграмме.Нет);
	Диаграмма2.ВидПодписей=?(Подписи,ВидПодписейКДиаграмме.Значение,ВидПодписейКДиаграмме.Нет);
КонецПроцедуры

#КонецОбласти

#Область Оценка

&НаКлиенте
Процедура Тестировать(Команда)
	Если ПутьКСетиЗагрузка="" Тогда
		СообщитьОбОшибке("ПутьКСетиЗагрузка", "Укажите путь к файлу обученной модели!");
		Возврат
	КонецЕсли;
	
	ЕстьОшибки=Ложь;
	Если Объект.Образцы.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Образцы", "Отсутствуют входные слои!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если Объект.Цели.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Цели", "Отсутствуют выходные слои!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если ГенераторЗагрузкаИзКаталога(СтрокаОбразцы) Тогда
			Если СтрокаОбразцы.ПутьКФайлу="" Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Не указан путь к каталогу данных!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Продолжить
		КонецЕсли;
		Файл = Новый Файл(СтрокаОбразцы.ПутьКФайлу);
		Если СтрокаОбразцы.СпособЗагрузки.Пустая() Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан способ загрузки данных!");
			ЕстьОшибки=Истина;
		КонецЕсли;
		Если СтрокаОбразцы.ПутьКФайлу="" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Не указан путь к файлу данных!");
			ЕстьОшибки=Истина;
		КонецЕсли;
		Если СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И Файл.Расширение<>".npy" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Неверный тип файла! Ожидается .npy");
			ЕстьОшибки=Истина;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки<>ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И Файл.Расширение=".npy" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Неверный тип файла для данного способа загрузки!");
			ЕстьОшибки=Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.СпособЗагрузки.Пустая() Тогда
			Если Объект.ИспользоватьГенератор И СокрЛП(СтрокаЦели.ИмяГенератора)<>"" Тогда
				ЕстьОшибки=Не ПроверитьГенераторДляЦели(СтрокаЦели);
			Иначе
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].СпособЗагрузки", "Не указан способ загрузки данных!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЕсли;
		//Если СтрокаЦели.СпособЗагрузки.Пустая() Тогда
		//	СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].СпособЗагрузки", "Не указан способ загрузки данных!");
		//	ЕстьОшибки=Истина;
		//КонецЕсли;
		Файл = Новый Файл(СтрокаЦели.ПутьКФайлу);
		Если СтрокаЦели.ПутьКФайлу="" Тогда
			Если Объект.ИспользоватьГенератор И СокрЛП(СтрокаЦели.ИмяГенератора)<>"" Тогда
				ЕстьОшибки=Не ПроверитьГенераторДляЦели(СтрокаЦели);
			Иначе
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Не указан путь к файлу данных!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			//СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Не указан путь к файлу данных!");
			//ЕстьОшибки=Истина;
		ИначеЕсли СтрокаЦели.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
			Отбор = Новый Структура("ИмяСлоя", СтрокаЦели.ПутьКФайлу);
			Строки = Объект.Образцы.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Неверное имя слоя источника!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		ИначеЕсли СтрокаЦели.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") И Файл.Расширение<>".npy" Тогда
			СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Неверный тип файла! Ожидается .npy");
			ЕстьОшибки=Истина;
		ИначеЕсли СтрокаЦели.СпособЗагрузки<>ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") И Файл.Расширение=".npy" Тогда
			СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].ПутьКФайлу", "Неверный тип файла для данного способа загрузки!");
			ЕстьОшибки=Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст")  Тогда
			Если СтрокаОбразцы.ПутьКСловарю="" Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан путь к словарю!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Если СтрокаОбразцы.Векторизация.Пустая() Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан способ векторизации текста!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И СтрокаОбразцы.ПутьКСловарю<>""  Тогда
		Иначе
			Если СтрокаОбразцы.ПрямоеКодирование И СтрокаОбразцы.Классов=0 Тогда
				Поле="Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ИмяСлоя";
				СообщитьОбОшибке(Поле, "Не указано число классов для прямого кодирования!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
			Если СтрокаЦели.ПутьКСловарю="" Тогда
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].СпособЗагрузки", "Не указан путь к словарю!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Если СтрокаЦели.Векторизация.Пустая() Тогда
				СообщитьОбОшибке("Объект.Цели["+Объект.Цели.Индекс(СтрокаЦели)+"].СпособЗагрузки", "Не указан способ векторизации текста!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Доп=Новый Структура("Имя, Приемник", "Training", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("ТестироватьПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестироватьПродолжить(Результат, ДополнительныеПараметры) Экспорт
	ПрефиксИмени = "Evaluate_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	//ИмяФайлаМодели = ПрефиксИмени+"_"+Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(Объект.Модель,"ИмяМодели")+".json";
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлРезультатов", ПрефиксИмени+"_result.json");
	СтруктураПараметров.Вставить("ФайлНормализации", ПрефиксИмени+"_normalization.json");
	СтруктураПараметров.Вставить("ПутьКСетиЗагрузка", ПутьКСетиЗагрузка);
	СтруктураПараметров.Вставить("ПутьККонтрольнойТочке", ПутьККонтрольнойТочке);
	СтруктураПараметров.Вставить("ЗагружатьСлоиПоИменам", ЗагружатьСлоиПоИменам);
	СтруктураПараметров.Вставить("ИдентификаторFromJSON", Нейро_ОбщийМодуль.ПолучитьИдентификаторИзРегистра("TokenizerFromJSON"));
	МасНомераСтрок=Новый Массив;
	
	ТекстПрограммы=СформироватьТекстПрограммыТестирования(МасНомераСтрок, СтруктураПараметров);
	Объект.ТекстПрограммы = ТекстПрограммы;
	
	НомераСтрок.Очистить();
	Для Каждого СтруктураНомера Из МасНомераСтрок Цикл
		НоваяСтрока = НомераСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНомера);
		НоваяСтрока.Номер = НоваяСтрока.Номер + 1;
	КонецЦикла;
	
	ПутьКФайлуМодели = Объект.ПутьКСетиЗагрузка;
	
	Если Объект.Нормализация<>"" Или Объект.Нормализация<>"[]" Тогда
		ЗаписьТекста = Новый ЗаписьТекста(ПутьККаталогуОбучения+СтруктураПараметров.ФайлНормализации, КодировкаТекста.ANSI);
		ЗаписьТекста.Записать(Объект.Нормализация);
		ЗаписьТекста.Закрыть();	
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения("ТестироватьЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлРезультатов", ПрефиксИмени+"_result.json");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	//ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	Если Объект.ОтображениеВыполнения<1 Тогда
		ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	Иначе
		ДопПараметры.Вставить("ФайлСообщений", Неопределено);
	КонецЕсли;
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПрограммыТестирования(МасНомераСтрок, СтруктураПараметров)
	Если Объект.Нормализация="" Или Объект.Нормализация="[]" Тогда
		Нормализация = Новый Структура;
	Иначе
		Нормализация = ПостроитьСтруктуруДереваНаСервере(Объект.Нормализация);
	КонецЕсли;
	
	Если Объект.ИспользоватьГенератор Тогда
		Возврат Нейро_Обучение.СформироватьТекстПрограммыОценкиГенератор(Объект, МасНомераСтрок, СтруктураПараметров, Объект.ОтображениеВыполнения, Нормализация);
	Иначе
		Возврат Нейро_Обучение.СформироватьТекстПрограммыОценки(Объект, МасНомераСтрок, СтруктураПараметров, Объект.ОтображениеВыполнения, Нормализация);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТестироватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ФайлРезультатов);
	СтрокаJSON = Текст.Прочитать();
	Текст.Закрыть();
	Объект.ПоказателиОценки = СтрокаJSON;
	
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлРезультатов);
	КонецЕсли;
	//
	//Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));

	ПостроитьДеревоОценкиНаСервере(СтрокаJSON);
	Элементы.Закладки.ТекущаяСтраница=Элементы.ГруппаПрогнозИОценка;
	//НомерДиаграммы=0;
	//Элементы.ДиаграммыНазад.Доступность=НомерДиаграммы>0;
	//Элементы.ДиаграммыДалее.Доступность=НомерДиаграммы<СписокМетрикПоКатегориям.Количество()-1;
	//ПостроитьДиаграммы(НомерДиаграммы);
	//Элементы.Закладки.ТекущаяСтраница=Элементы.ГруппаДиаграмма;
	Модифицированность=Истина;
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоОценкиНаСервере(СтрокаJSON)
	ИменаСлоев=Новый Массив;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		ИменаСлоев.Добавить(СтрокаОбразцы.ИмяСлоя)
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		ИменаСлоев.Добавить(СтрокаЦели.ИмяСлоя)
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	МассивОценки = ДокументОбъект.ПостроитьДеревоОценкиНаСервере(СтрокаJSON, ИменаСлоев);	
	Если МассивОценки=Неопределено Тогда
		ВызватьИсключение("Не удалось разобрать файл результатов!");
	КонецЕсли;
	
	РезультатыОценки.Очистить();
	Для Каждого СтруктураОценки Из МассивОценки Цикл
		НоваяСтрока = РезультатыОценки.Добавить();
		НоваяСтрока.Слой       = СтруктураОценки.ИмяСлоя;
		НоваяСтрока.Показатель = ОпределитьМетрикуПоИдентификатору(СтруктураОценки.Метрика);
		НоваяСтрока.Значение   = СтруктураОценки.Значение;
	КонецЦикла;
	
	//Элементы.ГруппаРезультатыОценки.Показать();
	//СтруктураИстории = ДокументОбъект.ПолучитьСтруктуруИстории();
	
	//
	//СписокМетрикПоКатегориям.Очистить();
	//МассивМетрикПоКатегориям=ДокументОбъект.СоздатьКатегорииМетрик(Объект.Метрика);
	//Для Каждого СтруктМетрики Из МассивМетрикПоКатегориям Цикл
	//	СписокМетрикПоКатегориям.Добавить(СтруктМетрики);
	//КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Прогноз

&НаКлиенте
Процедура Прогнозировать(Команда)
	Если ПутьКСетиЗагрузка="" Тогда
		СообщитьОбОшибке("ПутьКСетиЗагрузка", "Укажите путь к файлу обученной модели!");
		Возврат
	КонецЕсли;
	
	ЕстьОшибки=Ложь;
	Если Объект.Образцы.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Образцы", "Отсутствуют входные слои!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	//Для Каждого СтрокаПрогнозы Из Объект.Прогнозы Цикл
	//	Если СтрокаПрогнозы.ФайлРезультата="" Тогда
	//		СообщитьОбОшибке("Объект.Прогнозы["+Объект.Прогнозы.Индекс(СтрокаПрогнозы)+"].ФайлРезультата", "Не указан путь к файлу результатов прогноза!");
	//		ЕстьОшибки=Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если ГенераторЗагрузкаИзКаталога(СтрокаОбразцы) Тогда
			Если СтрокаОбразцы.ПутьКФайлу="" Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Не указан путь к каталогу данных!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Продолжить
		КонецЕсли;
		Файл = Новый Файл(СтрокаОбразцы.ПутьКФайлу);
		Если СтрокаОбразцы.СпособЗагрузки.Пустая() Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан способ загрузки данных!");
			ЕстьОшибки=Истина;
		КонецЕсли;
		Если СтрокаОбразцы.ПутьКФайлу="" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Не указан путь к файлу данных!");
			ЕстьОшибки=Истина;
		КонецЕсли;
		Если СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И Файл.Расширение<>".npy" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Неверный тип файла! Ожидается .npy");
			ЕстьОшибки=Истина;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки<>ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И Файл.Расширение=".npy" Тогда
			СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ПутьКФайлу", "Неверный тип файла для данного способа загрузки!");
			ЕстьОшибки=Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст")  Тогда
			Если СтрокаОбразцы.ПутьКСловарю="" Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан путь к словарю!");
				ЕстьОшибки=Истина;
			КонецЕсли;
			Если СтрокаОбразцы.Векторизация.Пустая() Тогда
				СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан способ векторизации текста!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И СтрокаОбразцы.ПутьКСловарю<>""  Тогда
		Иначе
			Если СтрокаОбразцы.ПрямоеКодирование И СтрокаОбразцы.Классов=0 Тогда
				Поле="Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].ИмяСлоя";
				СообщитьОбОшибке(Поле, "Не указано число классов для прямого кодирования!");
				ЕстьОшибки=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Доп=Новый Структура("Имя, Приемник", "Training", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("ПрогнозироватьПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозироватьПродолжить(Результат, ДополнительныеПараметры) Экспорт
	ПрефиксИмени = "Predict_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлРезультатов", ПрефиксИмени+"_result.json");
	СтруктураПараметров.Вставить("ФайлНормализации", ПрефиксИмени+"_normalization.json");
	//СтруктураПараметров.Вставить("ФайлМодели", ИмяФайлаМодели);
	СтруктураПараметров.Вставить("ПутьКСетиЗагрузка", ПутьКСетиЗагрузка);
	СтруктураПараметров.Вставить("ПутьККонтрольнойТочке", ПутьККонтрольнойТочке);
	СтруктураПараметров.Вставить("ЗагружатьСлоиПоИменам", ЗагружатьСлоиПоИменам);
	СтруктураПараметров.Вставить("ИдентификаторFromJSON", Нейро_ОбщийМодуль.ПолучитьИдентификаторИзРегистра("TokenizerFromJSON"));
	МасНомераСтрок=Новый Массив;
	
	ТекстПрограммы=СформироватьТекстПрограммыПрогноза(МасНомераСтрок, СтруктураПараметров);
	Объект.ТекстПрограммы = ТекстПрограммы;
	
	НомераСтрок.Очистить();
	Для Каждого СтруктураНомера Из МасНомераСтрок Цикл
		НоваяСтрока = НомераСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНомера);
		НоваяСтрока.Номер = НоваяСтрока.Номер + 1;
	КонецЦикла;
	
	ПутьКФайлуМодели = Объект.ПутьКСетиЗагрузка;
	
	Если Объект.Нормализация<>"" Или Объект.Нормализация<>"[]" Тогда
		ЗаписьТекста = Новый ЗаписьТекста(ПутьККаталогуОбучения+СтруктураПараметров.ФайлНормализации, КодировкаТекста.ANSI);
		ЗаписьТекста.Записать(Объект.Нормализация);
		ЗаписьТекста.Закрыть();	
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения("ПрогнозироватьЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлРезультатов", ПрефиксИмени+"_result.json");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	//ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	Если Объект.ОтображениеВыполнения<1 Тогда
		ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	Иначе
		ДопПараметры.Вставить("ФайлСообщений", Неопределено);
	КонецЕсли;
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПрограммыПрогноза(МасНомераСтрок, СтруктураПараметров)
	Если Объект.Нормализация="" Или Объект.Нормализация="[]" Тогда
		Нормализация = Новый Структура;
	Иначе
		Нормализация = ПостроитьСтруктуруДереваНаСервере(Объект.Нормализация);
	КонецЕсли;
	
	Если Объект.ИспользоватьГенератор Тогда
		Возврат Нейро_Обучение.СформироватьТекстПрограммыПрогнозаГенератор(Объект, МасНомераСтрок, СтруктураПараметров, Объект.ОтображениеВыполнения, Нормализация, Объект.ДенормализоватьПрогноз);
	Иначе
		Возврат Нейро_Обучение.СформироватьТекстПрограммыПрогноза(Объект, МасНомераСтрок, СтруктураПараметров, Объект.ОтображениеВыполнения, Нормализация, Объект.ДенормализоватьПрогноз);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПрогнозироватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//Денормализация при прогнозе (сделать)
	Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ФайлРезультатов);
	СтрокаJSON = Текст.Прочитать();
	Текст.Закрыть();
	Объект.РезультатПрогноза = СтрокаJSON;
	ТекстПрогнозы.Очистить();
	РезультатПрогноза = ПостроитьСтруктуруДереваНаСервере(Объект.РезультатПрогноза);
	ДеревоПрогнозов.ПолучитьЭлементы().Очистить();
	Для Каждого КиЗ Из РезультатПрогноза Цикл
		СтрокаДЗ = ДеревоПрогнозов.ПолучитьЭлементы().Добавить();
		СтрокаДЗ.Свойство = КиЗ.Значение.layer;
		СтрокаДЗ.Значение = Новый Структура("Значения", КиЗ.Значение.values);
	КонецЦикла;
	Модифицированность = Истина;
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлРезультатов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФайлаИсточника(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСлоев

&НаСервере
Процедура ПостроитьДеревоСлоев(Слои, ЭлементыДерева)
	Для Каждого СтруктураСлой Из Слои Цикл
		//Если СтруктураСлой.ИдСлоя = "InputLayer" Тогда Продолжить КонецЕсли;
		НовыйЭлемент=ЭлементыДерева.Добавить();
		НовыйЭлемент.ИмяСлоя = СтруктураСлой.Имя;
		Если СтруктураСлой.Параметры.Свойство("Слои") Тогда
			НовыйЭлемент.Модель=Истина;
			ПостроитьДеревоСлоев(СтруктураСлой.Параметры.Слои, НовыйЭлемент.ПолучитьЭлементы())
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуСлоиJSON()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Дерево = РеквизитФормыВЗначение("ДеревоСлоев");
	КопияДерева = Дерево.Скопировать();
	ОчиститьДеревоПоЗначениямФлагов(КопияДерева.Строки[0]);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);	
	КопияДерева.Колонки.Добавить("КлючПараметров", ОписаниеТиповС);
	ЗагрузкаПараметров.Очистить();
	ДокументОбъект.ПреобразоватьПараметрыКомпиляции(Объект, ЗагрузкаПараметров, КопияДерева.Строки[0]);
	Если КопияДерева.Строки.Количество()>0 Тогда
		Возврат ДокументОбъект.ДеревоВJSON(КопияДерева.Строки[0]);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОчиститьДеревоПоЗначениямФлагов(СтрокаРодитель)
	Для Каждого СтрокаДЗ Из СтрокаРодитель.Строки Цикл
		Если Объект.НеЗагружатьВесаМоделей Тогда
			СтрокаДЗ.ПутьКФайлу="";
		КонецЕсли;
		Если Объект.НеЗагружатьПараметрыКомпиляции Тогда
			СтрокаДЗ.ЗагружатьПараметры=Ложь;
		КонецЕсли;
		Если Объект.НеЗапрещатьОбучениеСлоев Тогда
			СтрокаДЗ.НеОбучать=Ложь;
		КонецЕсли;
		Если СтрокаДЗ.Строки.Количество()>0 Тогда
			ОчиститьДеревоПоЗначениямФлагов(СтрокаДЗ)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьПараметрыКомпиляции(СтрокаРодитель)
	Для Каждого СтрокаДЗ Из СтрокаРодитель.Строки Цикл
		ПутьКУзлу = ПолучитьПолныйПутьКУзлуНаСервере(СтрокаДЗ);
		Отбор = Новый Структура("Путь, ИмяСлоя", ПутьКУзлу, СтрокаДЗ.ИмяСлоя);
		Строки=Объект.ЗагрузкаВесов.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Строка = Строки[0];
		КонецЕсли;
		Если СтрокаДЗ.Строки.Количество()>0 Тогда
			ПреобразоватьПараметрыКомпиляции(СтрокаДЗ)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьПолныйПутьКУзлуНаСервере(СтрокаДЗ) Экспорт
	Родитель = СтрокаДЗ.Родитель;
	Если Родитель=Неопределено Тогда
		Возврат ""
	Иначе
		ИмяУзла=ПолучитьПолныйПутьКУзлуНаСервере(Родитель);
		Возврат ИмяУзла+?(ИмяУзла="","","/")+Родитель.ИмяСлоя
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ДеревоСлоевПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ПутьКФайлу=Элементы.ДеревоСлоев.ТекущиеДанные.ПутьКФайлу;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	Фильтр = "Hierarchical Data Format v5 (*.h5)|*.h5";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла для загрузки весов";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаДеревоСлоев", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаДеревоСлоев(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.ДеревоСлоев.ТекущиеДанные.ПутьКФайлу = ВыбранныеФайлы[0];
	ИзменитьТЧВесов(Элементы.ДеревоСлоев.ТекущиеДанные);
	//ПутьКУзлу=ПолучитьПолныйПутьКУзлу(Элементы.ДеревоСлоев.ТекущиеДанные)
	//Отбор=Новый Структура("Путь, ИмяСлоя", ПутьКУзлу, Элементы.ДеревоСлоев.ТекущиеДанные.ИмяСлоя);
	//Строки=Объект.ЗагрузкаВесов.НайтиСтроки(Отбор);
	//Если Строки.Количество()
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТЧВесов(СтрокаТЗ)
	Если СтрокаТЗ=ДеревоСлоев.ПолучитьЭлементы()[0] Тогда
		Объект.ПутьККонтрольнойТочке=СтрокаТЗ.ПутьКФайлу;
		Объект.ФункцияПотерь = ВложенныеФункцияПотерь;
		Объект.Оптимизатор   = ВложенныеОптимизатор;
		Объект.Метрика       = ВложенныеМетрика;
		Объект.ВесаПотерь    = ВложенныеВесаПотерь;
		Возврат;
	КонецЕсли;
	ПутьКУзлу = ПолучитьПолныйПутьКУзлу(СтрокаТЗ);
	Отбор = Новый Структура("Путь, ИмяСлоя", ПутьКУзлу, СтрокаТЗ.ИмяСлоя);
	Строки=Объект.ЗагрузкаВесов.НайтиСтроки(Отбор);
	Если Строки.Количество()=0 Тогда
		Строка = Объект.ЗагрузкаВесов.Добавить();
		Строка.Путь = ПутьКУзлу;
		Строка.ИмяСлоя = СтрокаТЗ.ИмяСлоя;
	Иначе
		Строка = Строки[0];
	КонецЕсли;

	УдалитьПутьКФайлу = Ложь;
	Если СтрокаТЗ.ПутьКФайлу="" Тогда
		Строка.ПутьКФайлу = "";
		УдалитьПутьКФайлу=Истина;
	Иначе
		Строка.ПутьКФайлу = СтрокаТЗ.ПутьКФайлу;
	КонецЕсли;
	УдалитьЗагружатьПараметры=Ложь;
	Строка.ЗагружатьПараметры = СтрокаТЗ.ЗагружатьПараметры;
	Если НЕ СтрокаТЗ.ЗагружатьПараметры Тогда
		УдалитьЗагружатьПараметры=Истина;
	КонецЕсли;
	УдалитьНеОбучать=Ложь;
	Строка.НеОбучать = СтрокаТЗ.НеОбучать;
	Если НЕ СтрокаТЗ.НеОбучать Тогда
		УдалитьНеОбучать=Истина;
	КонецЕсли;
	
	УдалитьВложенныеФункцияПотерь=Ложь;
	Строка.ФункцияПотерь = ВложенныеФункцияПотерь;
	Если ВложенныеФункцияПотерь=Неопределено Или НЕ ЗначениеЗаполнено(ВложенныеВесаПотерь) Тогда
		УдалитьВложенныеФункцияПотерь=Истина;
	КонецЕсли;
	
	УдалитьВложенныеОптимизатор=Ложь;
	Строка.Оптимизатор = ВложенныеОптимизатор;
	Если ВложенныеОптимизатор=Неопределено Или НЕ ЗначениеЗаполнено(ВложенныеВесаПотерь) Тогда
		УдалитьВложенныеОптимизатор=Истина;
	КонецЕсли;
	
	УдалитьВложенныеМетрика=Ложь;
	Строка.Метрика = ВложенныеМетрика;
	Если ВложенныеМетрика=Неопределено Или НЕ ЗначениеЗаполнено(ВложенныеВесаПотерь) Тогда
		УдалитьВложенныеМетрика=Истина;
	КонецЕсли;
	
	УдалитьВложенныеВесаПотерь=Ложь;
	Строка.ВесаПотерь = ВложенныеВесаПотерь;
	Если ВложенныеВесаПотерь=Неопределено Или НЕ ЗначениеЗаполнено(ВложенныеВесаПотерь) Тогда
		УдалитьВложенныеВесаПотерь=Истина;
	КонецЕсли;
	
	Если УдалитьПутьКФайлу И УдалитьЗагружатьПараметры И УдалитьНеОбучать 
		И УдалитьВложенныеФункцияПотерь И УдалитьВложенныеОптимизатор И УдалитьВложенныеМетрика И УдалитьВложенныеВесаПотерь Тогда
		Объект.ЗагрузкаВесов.Удалить(Строка);
	КонецЕсли;
	
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолныйПутьКУзлу(ДанныеФормыЭлементДерева) Экспорт
	Родитель = ДанныеФормыЭлементДерева.ПолучитьРодителя();
	Если Родитель=Неопределено Тогда
		Возврат ""
	Иначе
		ИмяУзла=ПолучитьПолныйПутьКУзлу(Родитель);
		Возврат ИмяУзла+?(ИмяУзла="","","/")+Родитель.ИмяСлоя
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДеревоСлоевПутьКФайлуПриИзменении(Элемент)
	ИзменитьТЧВесов(Элементы.ДеревоСлоев.ТекущиеДанные)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСлоевПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	//Если Элемент.ТекущийЭлемент=Элементы.ДеревоСлоевПутьКФайлу Или Элемент.ТекущийЭлемент=Элементы.ДеревоСлоевНеОбучать Тогда
		Элементы.ДеревоСлоевПутьКФайлу.ТолькоПросмотр = НЕ Элемент.ТекущиеДанные.Модель;
		Корень=ДеревоСлоев.ПолучитьЭлементы()[0];
		Если Элемент.ТекущиеДанные=Корень Тогда
			Элементы.ДеревоСлоевЗагружатьПараметры.ТолькоПросмотр = Истина;
			Элементы.ДеревоСлоевНеОбучать.ТолькоПросмотр = Истина
		Иначе
			Элементы.ДеревоСлоевЗагружатьПараметры.ТолькоПросмотр = НЕ Элемент.ТекущиеДанные.Модель;
			Элементы.ДеревоСлоевНеОбучать.ТолькоПросмотр = Ложь
		КонецЕсли;
		//Элементы.ДеревоСлоевНеОбучать.ТолькоПросмотр = НЕ Элемент.ТекущиеДанные.Родитель=ДеревоСлоев.ПолучитьЭлементы()[0];
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСлоевПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Элементы.ГруппаПараметрыВложенные.Доступность = Элемент.ТекущиеДанные.Модель;
	Корень=ДеревоСлоев.ПолучитьЭлементы()[0];
	Если Элемент.ТекущиеДанные=Корень Тогда
		ВложенныеФункцияПотерь = Объект.ФункцияПотерь;
		ВложенныеОптимизатор   = Объект.Оптимизатор;
		ВложенныеМетрика       = Объект.Метрика;
		ВложенныеВесаПотерь    = Объект.ВесаПотерь;
	Иначе
		ПутьКУзлу = ПолучитьПолныйПутьКУзлу(Элемент.ТекущиеДанные);
		Отбор = Новый Структура("Путь, ИмяСлоя", ПутьКУзлу, Элемент.ТекущиеДанные.ИмяСлоя);
		Строки=Объект.ЗагрузкаВесов.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			ВложенныеФункцияПотерь = Строки[0].ФункцияПотерь;
			ВложенныеОптимизатор   = Строки[0].Оптимизатор;
			ВложенныеМетрика       = Строки[0].Метрика;
			ВложенныеВесаПотерь    = Строки[0].ВесаПотерь;
		Иначе
			ВложенныеФункцияПотерь = Неопределено;
			ВложенныеОптимизатор   = Неопределено;
			ВложенныеМетрика       = Неопределено;
			ВложенныеВесаПотерь    = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТЧВесов(Элемент)
	ИзменитьТЧВесов(Элементы.ДеревоСлоев.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НомераСтрокПриАктивизацииСтроки(Элемент)
	Если Элементы.НомераСтрок.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Номер = Элементы.НомераСтрок.ТекущиеДанные.Номер;
	Строка = СтрПолучитьСтроку(ТекстПрограммы, Номер);
	Элементы.ТекстПрограммы.УстановитьГраницыВыделения(Номер,1,Номер,СтрДлина(Строка)+1);
	Если Элементы.Закладки.ТекущаяСтраница=Элементы.ГруппаТекстПрограммы Тогда
		ЭтаФорма.ТекущийЭлемент=Элементы.ТекстПрограммы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница=Элементы.ГруппаПрогнозИОценка Тогда
		Если Объект.ПутьКСетиЗагрузка<>"" Тогда
			ПутьКСетиЗагрузка=Объект.ПутьКСетиЗагрузка
		ИначеЕсли Объект.ПутьКСети<>"" Тогда
			ПутьКСетиЗагрузка=Объект.ПутьКСети
		КонецЕсли;
		Если Объект.ПутьККонтрольнойТочке<>"" Тогда
			ПутьККонтрольнойТочке=Объект.ПутьККонтрольнойТочке;
			ЗагружатьСлоиПоИменам=Объект.ЗагружатьСлоиПоИменам;
		КонецЕсли;
		Элементы.ПроходовПрогноза.ФорматРедактирования = ?(Объект.ИспользоватьГенератор,"","ЧН=Авто");
	ИначеЕсли ТекущаяСтраница=Элементы.ГруппаСамоконтроль Тогда
		TensorBoardПриАктивизацииСтроки(Элементы.TensorBoard);
		Если Объект.КонтрольныеТочки.Количество()>0 Тогда
			Элементы.ГруппаКонтрольныеТочки.Показать();
		Иначе
			Элементы.ГруппаКонтрольныеТочки.Скрыть();
		КонецЕсли;
		Если Объект.ДосрочныеЗавершения.Количество()>0 Тогда
			Элементы.ГруппаДосрочныеЗавершения.Показать();
		Иначе
			Элементы.ГруппаДосрочныеЗавершения.Скрыть();
		КонецЕсли;
		Если Объект.УменьшениеСкоростиПриЗастое.Количество()>0 Тогда
			Элементы.ГруппаЗамедлениеОбучения.Показать();
		Иначе
			Элементы.ГруппаЗамедлениеОбучения.Скрыть();
		КонецЕсли;
		Если Объект.TensorBoard.Количество()>0 Тогда
			Элементы.ГруппаTensorBoard.Показать();
		Иначе
			Элементы.ГруппаTensorBoard.Скрыть();
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница=Элементы.ГруппаПараметры Тогда
		//Разворачивать ГруппаДопПараметрыГенератора
		Если Объект.ПараметрыОбщегоПользовательскогоГенератора.Количество()>0 Тогда
			Элементы.ГруппаДопПараметрыГенератора.Показать();
		Иначе
			Элементы.ГруппаДопПараметрыГенератора.Скрыть();
		КонецЕсли;
	КонецЕсли;

	Если ТекущаяСтраница<>Элементы.ГруппаПараметры Тогда
		//Сворачивать ГруппаДопПараметрыГенератора
		Элементы.ГруппаДопПараметрыГенератора.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСетиЗагрузка1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ПутьКФайлу=Новый Файл(ПутьКСетиЗагрузка);
	ДиалогОткрытияФайла.Каталог=ПутьКФайлу.Путь;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу.ПолноеИмя;
	Фильтр = "Hierarchical Data Format v5 (*.h5)|*.h5";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла обученной сети";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаПутьКСетиЗагрузка1", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаПутьКСетиЗагрузка1(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ПутьКСетиЗагрузка = ВыбранныеФайлы[0];
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПутьККонтрольнойТочке1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ПутьКФайлу=ПутьККонтрольнойТочке;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	Фильтр = "Hierarchical Data Format v5 (*.h5)|*.h5";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла контрольной точки";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаПутьККонтрольнойТочке1", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаПутьККонтрольнойТочке1(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ПутьККонтрольнойТочке = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГенераторПриИзменении(Элемент)
	ВидимостьЭлементовГенератор();
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовГенератор()
	Элементы.ГруппаПараметрыГенератора.Видимость = Объект.ИспользоватьГенератор;
	Элементы.ВыделятьДляКонтроля.Видимость = Не Объект.ИспользоватьГенератор;
	//Элементы.Перемешивать.Видимость = Не Объект.ИспользоватьГенератор;
	Элементы.ОбразцыТипГенератора.Видимость = Объект.ИспользоватьГенератор;
	Элементы.ОГенераторах.Видимость = Объект.ИспользоватьГенератор;
	ВидГенератораПриИзменении(Элементы.ВидГенератора);
	//Элементы.ПользовательскийГенератор.Видимость = Объект.ВидГенератора=2;
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыТипГенератораПриИзменении(Элемент)
	ИзменитьВидимостьОбразцы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыГенератораИзображений(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия=Неопределено Тогда Возврат КонецЕсли;
	Если ДополнительныеПараметры=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
		Отбор=Новый Структура("Имя", РезультатЗакрытия.Имя);
		Строки = Объект.ДанныеИзображений.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Строка=Объект.ДанныеИзображений.Добавить();
		Иначе
			Строка=Строки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, РезультатЗакрытия.ПараметрыГенератора); 
		Элементы.ОбразцыДоп.ТекущиеДанные.Значение = РезультатЗакрытия.ПараметрыГенератора.Имя;
	ИначеЕсли ДополнительныеПараметры=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
		Отбор=Новый Структура("Имя", РезультатЗакрытия.Имя);
		Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Строка=Объект.ВременныеПоследовательности.Добавить();
		Иначе
			Строка=Строки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, РезультатЗакрытия.ПараметрыГенератора); 
		Элементы.ОбразцыДоп.ТекущиеДанные.Значение = РезультатЗакрытия.ПараметрыГенератора.Имя;
	ИначеЕсли ДополнительныеПараметры=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Пользовательский") Тогда
		Отбор=Новый Структура("Имя", РезультатЗакрытия.Имя);
		Строки = Объект.ПользовательскиеГенераторы.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Строка=Объект.ПользовательскиеГенераторы.Добавить();
		Иначе
			Строка=Строки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, РезультатЗакрытия.ПараметрыГенератора); 
		Строки = Объект.ПользовательскиеГенераторыПараметры.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			//Строка=Объект.ПользовательскиеГенераторы.Добавить();
		Иначе
			//Строка=Строки[0];
			Для Каждого СтрокаДопПараметр Из Строки Цикл
				Объект.ПользовательскиеГенераторыПараметры.Удалить(СтрокаДопПараметр);
			КонецЦикла;
		КонецЕсли;
		Для Каждого ДопПараметр Из РезультатЗакрытия.ПараметрыГенератора.ДопПараметры Цикл
			Строка=Объект.ПользовательскиеГенераторыПараметры.Добавить();
			//ЗаполнитьЗначенияСвойств(Строка, ДопПараметр); 
			Строка.Идентификатор = ДопПараметр.Идентификатор;
			Строка.Тип           = ДопПараметр.Тип;
			Строка.Значение      = ДопПараметр.Значение;
			Строка.Имя           = РезультатЗакрытия.ПараметрыГенератора.Имя;
		КонецЦикла;
		//ПерезаполнитьПользовательскиеГенераторыПараметры(РезультатЗакрытия.ПараметрыГенератора.ДопПараметры, РезультатЗакрытия.Имя);
		Элементы.ОбразцыДоп.ТекущиеДанные.Значение = РезультатЗакрытия.ПараметрыГенератора.Имя;
	КонецЕсли;
	Элементы.Образцы.ТекущиеДанные[Элементы.ОбразцыДоп.ТекущиеДанные.Свойство]=Элементы.ОбразцыДоп.ТекущиеДанные.Значение;
	ИзменитьВидимостьОбразцы();
	Модифицированность=Истина;
КонецПроцедуры

&НаСервере
Функция ЕстьГенераторИзображенияИЗКаталогаСВалидацией()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Возврат Нейро_Обучение.ЕстьГенераторИзображенияИЗКаталогаСВалидацией(Объект);
КонецФункции

&НаКлиенте
Процедура ОГенераторах(Команда)
	ОГенераторах = ПостроитьСтруктуруДереваНаСервере(Объект.ОГенераторах);
	МассивОГенераторах = Новый Массив;
	Для Каждого КиЗ Из ОГенераторах Цикл
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			Если СтрокаОбразцы.ИмяСлоя = КиЗ.Значение.layer Тогда
				СтруктураГенератор = Новый Структура("Слой, Генератор, Значения");
				СтруктураГенератор.Слой = КиЗ.Значение.layer;
				СтруктураГенератор.Генератор = СтрокаОбразцы.ИмяГенератора;
				СтруктураГенератор.Значения = КиЗ.Значение.generators;
				МассивОГенераторах.Добавить(СтруктураГенератор);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если МассивОГенераторах.Количество()>0 Тогда
		ПараметрыД = Новый Структура;
		ПараметрыД.Вставить("МассивОГенераторах", МассивОГенераторах);
		ПараметрыД.Вставить("Режим", 1);
		//Оп = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораДанных", ЭтотОбъект);
		//ОткрытьФорму("Обработка.Нейро_КонструкторДанных.Форма", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Оп = Новый ОписаниеОповещения;
		ОткрытьФорму("Документ.Нейро_Обучение.Форма.ФормаПоказатьJSON", ПараметрыД, ЭтотОбъект, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПрогнозовПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Результат = "";
	Для Каждого Элемент Из Элемент.ТекущиеДанные.Значение.Значения Цикл
		Если ТипЗНч(Элемент)=Тип("Массив") Тогда
			Результат = Результат + "["+ОбработатьМассивПрогнозов(Элемент)+ "]"
		Иначе
			Результат = Результат + СокрЛП(Элемент)
		КонецЕсли;
		Результат = Результат + "
		|";
	КонецЦикла;
	ТекстПрогнозы.УстановитьТекст(Результат);
КонецПроцедуры

&НаКлиенте
Функция ОбработатьМассивПрогнозов(МассивПрогнозов)
	Результат = "";
	Для Каждого Элемент Из МассивПрогнозов Цикл
		Если Результат<>"" Тогда Результат=Результат+", " КонецЕсли;
		Если ТипЗНч(Элемент)=Тип("Массив") Тогда
			Результат = Результат + "["+ОбработатьМассивПрогнозов(Элемент)+ "]"
		Иначе
			Результат = Результат + СокрЛП(Элемент)
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОчиститьПрогноз(Команда)
	Объект.РезультатПрогноза = "";
	ДеревоПрогнозов.ПолучитьЭлементы().Очистить();
	ТекстПрогнозы.Очистить();
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНормализацию(Команда)
	Нормализация = ПостроитьСтруктуруДереваНаСервере(Объект.Нормализация);
	//МассивОГенераторах = Новый Массив;
	//Для Каждого КиЗ Из Нормализация Цикл
	//	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
	//		Если СтрокаОбразцы.ИмяСлоя = КиЗ.Значение.layer Тогда
	//			//СтруктураГенератор = Новый Структура("Слой, Генератор, Значения");
	//			//СтруктураГенератор.Слой = КиЗ.Значение.layer;
	//			//СтруктураГенератор.Генератор = СтрокаОбразцы.ИмяГенератора;
	//			//СтруктураГенератор.Значения = КиЗ.Значение.generators;
	//			//МассивОГенераторах.Добавить(СтруктураГенератор);
	//			//Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("Нормализация", Нормализация);
	ПараметрыД.Вставить("Режим", 2);
	//Оп = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораДанных", ЭтотОбъект);
	//ОткрытьФорму("Обработка.Нейро_КонструкторДанных.Форма", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Оп = Новый ОписаниеОповещения;
	ОткрытьФорму("Документ.Нейро_Обучение.Форма.ФормаПоказатьJSON", ПараметрыД, ЭтотОбъект, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивНормализаторовМасштабирования(Образец, ИмяСлоя)
	Результат = Новый Массив;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.ИмяСлоя = ИмяСлоя И Образец Тогда Продолжить КонецЕсли;
		Если Объект.ИспользоватьГенератор Тогда
			Если ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) И СокрЛП(СтрокаОбразцы.ИмяГенератора)<>"" Тогда
				Если СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
					Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
					Если Строки.Количество()>0 И Строки[0].Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
						Результат.Добавить(СтрокаОбразцы.ИмяСлоя);
					ИначеЕсли СтрокаОбразцы.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
						Результат.Добавить(СтрокаОбразцы.ИмяСлоя);
					КонецЕсли;
				ИначеЕсли СтрокаОбразцы.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
					Результат.Добавить(СтрокаОбразцы.ИмяСлоя);
				КонецЕсли;
			ИначеЕсли СтрокаОбразцы.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
				Результат.Добавить(СтрокаОбразцы.ИмяСлоя);
			КонецЕсли;
		ИначеЕсли СтрокаОбразцы.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
			Результат.Добавить(СтрокаОбразцы.ИмяСлоя);
		КонецЕсли;
	КонецЦикла;
	
	Если Образец Тогда Возврат Результат КонецЕсли;
	
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.ИмяСлоя = ИмяСлоя И Не Образец Тогда Продолжить КонецЕсли;
		Если СтрокаЦели.Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование") Тогда
			Результат.Добавить(СтрокаЦели.ИмяСлоя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


&НаКлиенте
Процедура СпособДенормализацииПриИзменении(Элемент)
	ПоказатьНормализацию1();
КонецПроцедуры


&НаКлиенте
Процедура КонтрольныеТочкиПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент.Подсказка="" Тогда
		 Элементы.ГруппаКонтрольныеТочки.Подсказка="Выделите ячейку таблицы для получения подсказки"
	Иначе
		 Элементы.ГруппаКонтрольныеТочки.Подсказка=Элемент.ТекущийЭлемент.Заголовок+" - "+Элемент.ТекущийЭлемент.Подсказка;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДосрочныеЗавершенияПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент.Подсказка="" Тогда
		 Элементы.ГруппаДосрочныеЗавершения.Подсказка="Выделите ячейку таблицы для получения подсказки"
	Иначе
		 Элементы.ГруппаДосрочныеЗавершения.Подсказка=Элемент.ТекущийЭлемент.Заголовок+" - "+Элемент.ТекущийЭлемент.Подсказка;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УменьшениеСкоростиПриЗастоеПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент.Подсказка="" Тогда
		 Элементы.ГруппаЗамедлениеОбучения.Подсказка="Выделите ячейку таблицы для получения подсказки"
	Иначе
		 Элементы.ГруппаЗамедлениеОбучения.Подсказка=Элемент.ТекущийЭлемент.Заголовок+" - "+Элемент.ТекущийЭлемент.Подсказка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьСписокФайлов(ТекущиеДанные)
	ЕстьОшибки=Ложь;
	Если Элементы.Образцы.ТекущиеДанные.ПутьКФайлу="" Тогда
		СообщитьОбОшибке("Объект.Образцы", "Укажите каталог с файлами!");
			//СообщитьОбОшибке("Объект.Образцы["+Объект.Образцы.Индекс(СтрокаОбразцы)+"].СпособЗагрузки", "Не указан путь к словарю!");
		ЕстьОшибки=Истина;
	КонецЕсли;
	Если ЕстьОшибки Тогда Возврат КонецЕсли;
	
	Доп=Новый Структура("Имя, Приемник", "Training", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("ПосмотретьСписокФайловПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьСписокФайловПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	ПрефиксИмени = "View_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлРезультатов", ПрефиксИмени+".txt");
	СтруктураПараметров.Вставить("ПутьККаталогу", Элементы.Образцы.ТекущиеДанные.ПутьКФайлу);
	
	Текст = СформироватьТекстПрограммыСписокФайлов(СтруктураПараметров);
	
	Оп = Новый ОписаниеОповещения("ПосмотретьСписокФайловЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлРезультатов", ПрефиксИмени+".txt");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	//Если Объект.ОтображениеВыполнения<1 Тогда
	//	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	//Иначе
	//	ДопПараметры.Вставить("ФайлСообщений", Неопределено);
	//КонецЕсли;
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПрограммыСписокФайлов(СтруктураПараметров)
	Возврат Нейро_Обучение.СформироватьТекстПрограммыСписокФайлов(СтруктураПараметров);
КонецФункции

&НаКлиенте
Процедура ПосмотретьСписокФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ФайлРезультатов);
	СтрокаРезультат = Текст.Прочитать();
	Текст.Закрыть();
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(СтрокаРезультат);
	ТД.Показать(Элементы.Образцы.ТекущиеДанные.ПутьКФайлу);
	
	УдалятьФайлыПослеВыполнения = Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения");
	Если УдалятьФайлыПослеВыполнения Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлРезультатов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыДопПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦелиДопПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура МодельОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВопросОставитьСлои=НЕ Объект.Модель.Пустая();
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦелиПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьTensorBoard(Команда)
	ОткрытьФорму("ОбщаяФорма.Нейро_ЗапускTensorBoard",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура TensorBoardПриАктивизацииСтроки(Элемент)
	Если Элементы.TensorBoard.ТекущиеДанные=Неопределено Тогда
		Элементы.TensorBoardЧастотаОбновленияПакетов.Доступность = Истина; Возврат
	КонецЕсли;
	Элементы.TensorBoardЧастотаОбновленияПакетов.Доступность =
		(Элементы.TensorBoard.ТекущиеДанные.ЧастотаОбновления = ПредопределенноеЗначение("Перечисление.Нейро_ЧастотаОбновленияTensorBoard.ЧислоПакетов"));
КонецПроцедуры

&НаКлиенте
Процедура TensorBoardЧастотаОбновленияПриИзменении(Элемент)
	Элементы.TensorBoardЧастотаОбновленияПакетов.Доступность =
		(Элементы.TensorBoard.ТекущиеДанные.ЧастотаОбновления = ПредопределенноеЗначение("Перечисление.Нейро_ЧастотаОбновленияTensorBoard.ЧислоПакетов"));
КонецПроцедуры

&НаКлиенте
Процедура TensorBoardПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент.Подсказка="" Тогда
		 Элементы.ГруппаTensorBoard.Подсказка="Выделите ячейку таблицы для получения подсказки"
	Иначе
		 Элементы.ГруппаTensorBoard.Подсказка=Элемент.ТекущийЭлемент.Заголовок+" - "+Элемент.ТекущийЭлемент.Подсказка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура TensorBoardПутьККаталогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ПутьКФайлу=Элемент.ТекстРедактирования;
	ДиалогОткрытияФайла.Каталог=ПутьКФайлу;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя каталога для сохранения";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораКаталогаTensorBoard", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораКаталогаTensorBoard(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.TensorBoard.ТекущиеДанные.ПутьККаталогу = ВыбранныеФайлы[0];
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидГенератораПриИзменении(Элемент)
	Элементы.ПользовательскийГенератор.Видимость = Объект.ВидГенератора=2;
	Элементы.ГруппаДопПараметрыГенератора.Видимость = Объект.ВидГенератора=2;
	Текст = Элементы.ВидГенератора.СписокВыбора.Получить(Объект.ВидГенератора).Представление;
	Если Объект.ВидГенератора=0 Тогда
		Элементы.ВидГенератора.Подсказка=Текст+" - Встроенный пользовательский генератор. Подходит для большинства простых задач. Умеет формировать пакеты и вызывать другие генераторы";
	ИначеЕсли Объект.ВидГенератора=1 Тогда
		Элементы.ВидГенератора.Подсказка=Текст+" - Используйте этот режим если хотите передать генератор модели напрямую, минуя общий генератор";
	ИначеЕсли Объект.ВидГенератора=2 Тогда
		Элементы.ВидГенератора.Подсказка=Текст+" - Выберите пользовательский общий генератор из справочника";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскийГенераторПриИзменении(Элемент)
	Объект.ПараметрыОбщегоПользовательскогоГенератора.Очистить();
	ЗаполнитьДопПараметрыГенератораНаСервере();
	Если Объект.ПараметрыОбщегоПользовательскогоГенератора.Количество()>0 Тогда
		Элементы.ГруппаДопПараметрыГенератора.Показать();
	Иначе
		Элементы.ГруппаДопПараметрыГенератора.Скрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопПараметрыГенератораНаСервере()
	Для Каждого СтрокаТЧ Из Объект.ПользовательскийГенератор.Параметры Цикл
		Если СтрокаТЧ.Вид = Перечисления.Нейро_ПараметрыГенератора.Дополнительный Тогда
			НоваяСтрока = Объект.ПараметрыОбщегоПользовательскогоГенератора.Добавить();
			НоваяСтрока.Параметр = СтрокаТЧ.Имя;
			НоваяСтрока.Тип = СтрокаТЧ.Тип;
			//НоваяСтрока.Значение = СтрокаТЧ.;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбщегоПользовательскогоГенератораПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя="ПараметрыОбщегоПользовательскогоГенератораЗначение" Тогда
		//Элемент.ТекущийЭлемент.ОграничениеТипа = Нейро_ОбщийМодуль.ПолучитьОписаниеТипаИзПеречисления(Элемент.ТекущиеДанные.Тип);
		ОписаниеТипа = Нейро_ОбщийМодуль.ПолучитьОписаниеТипаИзПеречисления(Элемент.ТекущиеДанные.Тип);
		Если ОписаниеТипа<>Неопределено Тогда
			Элемент.ТекущийЭлемент.ОграничениеТипа = ОписаниеТипа;
		Иначе
			Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦелиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦелиДопЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	Если Элементы.ЦелиДоп.ТекущиеДанные.Свойство = "Преобразования" Тогда
		СтандартнаяОбработка=Ложь;
		ОткрытьФормуАлгоритмов("ЦелиДоп");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыАлгоритмов(Результат, ДополнительныеПараметры) Экспорт
	Если Результат=Неопределено Тогда Возврат КонецЕсли;
	
	Строки = Объект.Алгоритмы.НайтиСтроки(Новый Структура("ИмяСписка", ДополнительныеПараметры.ИмяСписка));
	Для Каждого Строка Из Строки Цикл
		Объект.Алгоритмы.Удалить(Строка);
	КонецЦикла;
	Строки = Объект.ПараметрыАлгоритмов.НайтиСтроки(Новый Структура("ИмяСписка", ДополнительныеПараметры.ИмяСписка));
	Для Каждого Строка Из Строки Цикл
		Объект.ПараметрыАлгоритмов.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого СтруктураАлгоритма Из Результат.Алгоритмы Цикл
		НоваяСтрока = Объект.Алгоритмы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураАлгоритма);
		НоваяСтрока.ИмяСписка = Результат.Имя;
		НоваяСтрока.Прогноз = ДополнительныеПараметры.Прогноз;
	КонецЦикла;
	Для Каждого СтруктураПараметровАлгоритма Из Результат.Параметры Цикл
		НоваяСтрока = Объект.ПараметрыАлгоритмов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметровАлгоритма);
		НоваяСтрока.ИмяСписка = Результат.Имя;
		НоваяСтрока.Прогноз = ДополнительныеПараметры.Прогноз;
	КонецЦикла;
	
	Элементы[ДополнительныеПараметры.ИмяТаблицыДоп].ТекущиеДанные.Значение=Результат.Имя;
	Если ДополнительныеПараметры.ИмяТаблицыДоп="ОбразцыДоп" Тогда
		Элементы.Образцы.ТекущиеДанные[Элементы[ДополнительныеПараметры.ИмяТаблицыДоп].ТекущиеДанные.Свойство]=Результат.Имя;
	ИначеЕсли ДополнительныеПараметры.ИмяТаблицыДоп="ЦелиДоп" Тогда
		Элементы.Цели.ТекущиеДанные[Элементы[ДополнительныеПараметры.ИмяТаблицыДоп].ТекущиеДанные.Свойство]=Результат.Имя;
	ИначеЕсли ДополнительныеПараметры.ИмяТаблицыДоп="ПрогнозДоп" Тогда
		Объект.СписокПрогноза=Результат.Имя;
		//Элементы.Цели.ТекущиеДанные[Элементы[ДополнительныеПараметры.ИмяТаблицыДоп].ТекущиеДанные.Свойство]=Результат.Имя;
	КонецЕсли;
	
	//ИзменитьВидимостьОбразцы();
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбразцыЦелиДопВыборСпискаПреобразований(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент=Неопределено Тогда Возврат КонецЕсли;
	ИмяТаблицыДоп = ДополнительныеПараметры;
	Если ВыбранныйЭлемент.Значение="+" Тогда
		НовыйСписокПреобразований(ИмяТаблицыДоп);
	ИначеЕсли ВыбранныйЭлемент.Значение="++" Тогда
		Отбор=Новый Структура("ИмяСписка", Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение);
		Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Если Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение<>"" Тогда
				Сообщить("Список алгоритмов с именем '"+Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение+"' не найден!");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		ФСтруктураАлгоритмы = КолонкиВФиксированнуюСтруктуру("Алгоритмы");
		МассивАлгоритмов = Новый Массив;
		Для Каждого СтрокаТЧ Из Строки Цикл
			СтруктураАлгоритмы=Новый Структура(ФСтруктураАлгоритмы);
			ЗаполнитьЗначенияСвойств(СтруктураАлгоритмы, СтрокаТЧ);
			МассивАлгоритмов.Добавить(СтруктураАлгоритмы);
		КонецЦикла;
		
		Строки = Объект.ПараметрыАлгоритмов.НайтиСтроки(Отбор);
		ФСтруктураАлгоритмы = КолонкиВФиксированнуюСтруктуру("ПараметрыАлгоритмов");
		МассивПараметровАлгоритмов = Новый Массив;
		Для Каждого СтрокаТЧ Из Строки Цикл
			СтруктураАлгоритмы=Новый Структура(ФСтруктураАлгоритмы);
			ЗаполнитьЗначенияСвойств(СтруктураАлгоритмы, СтрокаТЧ);
			МассивПараметровАлгоритмов.Добавить(СтруктураАлгоритмы);
		КонецЦикла;
		
		ИменаСлоев = Новый Массив;
		Для Каждого СтрокаСлой Из Объект.Образцы Цикл
			ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
		КонецЦикла;
		Для Каждого СтрокаСлой Из Объект.Цели Цикл
			ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
		КонецЦикла;
		
		МассивИмен=ПолучитьИменаСписковАлгоритмов(Ложь);
		Префикс="Преобразования";
		Для Сч=1 По 9999 Цикл
			НовоеИмя=Префикс+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
			Если МассивИмен.Найти(НовоеИмя)=Неопределено Тогда Прервать КонецЕсли;
		КонецЦикла;
		
		СтруктураСписка = Новый Структура;
		СтруктураСписка.Вставить("ИменаСлоев", ИменаСлоев);
		Прогноз=Ложь;
		Если ИмяТаблицыДоп="ОбразцыДоп" Тогда
			СтруктураСписка.Вставить("Заголовок", "Образец - "+Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
		ИначеЕсли ИмяТаблицыДоп="ЦелиДоп" Тогда
			СтруктураСписка.Вставить("Заголовок", "Цель - "+Элементы.Цели.ТекущиеДанные.ИмяСлоя);
		ИначеЕсли ИмяТаблицыДоп="ПрогнозДоп" Тогда
			СтруктураСписка.Вставить("Заголовок", "Прогноз");
			ИменаСлоев.Добавить("result");
			Прогноз=Истина;
		КонецЕсли;
		//СтруктураСписка.Вставить("Заголовок", "Образец - "+Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
		СтруктураСписка.Вставить("ИмяСписка", НовоеИмя);
		СтруктураСписка.Вставить("Алгоритмы", МассивАлгоритмов);
		СтруктураСписка.Вставить("ПараметрыАлгоритмов", МассивПараметровАлгоритмов);
		ПараметрыД = Новый Структура("СписокАлгоритмов", СтруктураСписка);
		ДополнительныеПараметры1 = Новый Структура;
		ДополнительныеПараметры1.Вставить("ИмяСписка", НовоеИмя);
		ДополнительныеПараметры1.Вставить("ИмяТаблицыДоп", ИмяТаблицыДоп);
		ДополнительныеПараметры1.Вставить("Прогноз", Прогноз);
		Оп = Новый ОписаниеОповещения("ПослеЗакрытияФормыАлгоритмов", ЭтотОбъект, ДополнительныеПараметры1);
		ОткрытьФорму("Документ.Нейро_Обучение.Форма.ФормаАлгоритмов", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ВыбранныйЭлемент.Значение="-" Тогда
		ИмяСписка = Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение;
		Строки = Объект.Алгоритмы.НайтиСтроки(Новый Структура("ИмяСписка", ИмяСписка));
		Для Каждого Строка Из Строки Цикл
			Объект.Алгоритмы.Удалить(Строка);
		КонецЦикла;
		Строки = Объект.ПараметрыАлгоритмов.НайтиСтроки(Новый Структура("ИмяСписка", ИмяСписка));
		Для Каждого Строка Из Строки Цикл
			Объект.ПараметрыАлгоритмов.Удалить(Строка);
		КонецЦикла;
		
		Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение="";
		Если ИмяТаблицыДоп="ОбразцыДоп" Тогда
			Элементы.Образцы.ТекущиеДанные[Элементы[ИмяТаблицыДоп].ТекущиеДанные.Свойство]="";
		ИначеЕсли ИмяТаблицыДоп="ЦелиДоп" Тогда
			Элементы.Цели.ТекущиеДанные[Элементы[ИмяТаблицыДоп].ТекущиеДанные.Свойство]="";
		ИначеЕсли ИмяТаблицыДоп="ПрогнозДоп" Тогда
			Объект.СписокПрогноза="";
		КонецЕсли;
		
		Модифицированность=Истина;
	Иначе
		Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение=ВыбранныйЭлемент.Значение;
		Если ИмяТаблицыДоп="ОбразцыДоп" Тогда
			Элементы.Образцы.ТекущиеДанные[Элементы[ИмяТаблицыДоп].ТекущиеДанные.Свойство]=Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение;
		ИначеЕсли ИмяТаблицыДоп="ЦелиДоп" Тогда
			Элементы.Цели.ТекущиеДанные[Элементы[ИмяТаблицыДоп].ТекущиеДанные.Свойство]=Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение;
		ИначеЕсли ИмяТаблицыДоп="ПрогнозДоп" Тогда
			Объект.СписокПрогноза=Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение;
		КонецЕсли;
		//Элементы.Образцы.ТекущиеДанные[Элементы.ОбразцыДоп.ТекущиеДанные.Свойство]=Элементы.ОбразцыДоп.ТекущиеДанные.Значение;
		//ИзменитьВидимостьОбразцы();
		Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйСписокПреобразований(ИмяТаблицыДоп)
	МассивИмен=ПолучитьИменаСписковАлгоритмов(Ложь);
	Префикс="Преобразования";
	Для Сч=1 По 9999 Цикл
		НовоеИмя=Префикс+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		Если МассивИмен.Найти(НовоеИмя)=Неопределено Тогда Прервать КонецЕсли;
		//Отбор=Новый Структура("Имя", НовоеИмя);
		//Строки=Тч.НайтиСтроки(Отбор);
		//Если Строки.Количество()=0 Тогда Прервать КонецЕсли;
	КонецЦикла;
	
	//ИменаСлоев = Новый Массив;
	//Для Каждого СтрокаСлой Из Объект.Образцы Цикл
	//	ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
	//КонецЦикла;
	//Для Каждого СтрокаСлой Из Объект.Цели Цикл
	//	ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
	//КонецЦикла;
	
	СтруктураСписка = Новый Структура;
	Прогноз = Ложь;
	Если ИмяТаблицыДоп="ОбразцыДоп" Тогда
		СтруктураСписка.Вставить("Заголовок", "Образец - "+Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
	ИначеЕсли ИмяТаблицыДоп="ЦелиДоп" Тогда
		СтруктураСписка.Вставить("Заголовок", "Цель - "+Элементы.Цели.ТекущиеДанные.ИмяСлоя);
	ИначеЕсли ИмяТаблицыДоп="ПрогнозДоп" Тогда
		СтруктураСписка.Вставить("Заголовок", "Прогноз");
		Прогноз=Истина;
	Иначе
		СтруктураСписка.Вставить("Заголовок", "");
	КонецЕсли;
	
	ИменаСлоев = Новый Массив;
	ВсеОбразцы = ""; ВсеЦели = "";
	Для Каждого СтрокаСлой Из Объект.Образцы Цикл
		Если ВсеОбразцы<>"" Тогда ВсеОбразцы=ВсеОбразцы+", " КонецЕсли;
		ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
		ВсеОбразцы=ВсеОбразцы+СтрокаСлой.ИмяСлоя
	КонецЦикла;
	Если Объект.Образцы.Количество()>1 Тогда
		ИменаСлоев.Добавить("["+ВсеОбразцы+"]");
	КонецЕсли;
	Если Прогноз Тогда
		ИменаСлоев.Добавить("result");
	Иначе
		Для Каждого СтрокаСлой Из Объект.Цели Цикл
			Если ВсеЦели<>"" Тогда ВсеЦели=ВсеЦели+", " КонецЕсли;
			ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
			ВсеЦели=ВсеЦели+СтрокаСлой.ИмяСлоя
		КонецЦикла;
		Если Объект.Цели.Количество()>1 Тогда
			ИменаСлоев.Добавить("["+ВсеЦели+"]");
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСписка.Вставить("ИменаСлоев", ИменаСлоев);
	СтруктураСписка.Вставить("ИмяСписка", НовоеИмя);
	СтруктураСписка.Вставить("Алгоритмы", Новый Массив);
	СтруктураСписка.Вставить("ПараметрыАлгоритмов", Новый Массив);
	ПараметрыД = Новый Структура("СписокАлгоритмов", СтруктураСписка);
	//ПараметрыД.Вставить("ИменаСлоев", ИменаСлоев);
	ДополнительныеПараметры1 = Новый Структура;
	ДополнительныеПараметры1.Вставить("ИмяСписка", НовоеИмя);
	ДополнительныеПараметры1.Вставить("ИмяТаблицыДоп", ИмяТаблицыДоп);
	ДополнительныеПараметры1.Вставить("Прогноз", Прогноз);
	Оп = Новый ОписаниеОповещения("ПослеЗакрытияФормыАлгоритмов", ЭтотОбъект, ДополнительныеПараметры1);
	ОткрытьФорму("Документ.Нейро_Обучение.Форма.ФормаАлгоритмов", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ПолучитьИменаСписковАлгоритмов(БезПрогноза=Истина)
	Если БезПрогноза Тогда
		Отбор = Новый Структура("Прогноз", Ложь);
		Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
		ТабИмена = Объект.Алгоритмы.Выгрузить(Строки, "ИмяСписка");
	Иначе
		ТабИмена = Объект.Алгоритмы.Выгрузить(, "ИмяСписка");
	КонецЕсли;
	ТабИмена.Свернуть("ИмяСписка");
	Возврат ТабИмена.ВыгрузитьКолонку("ИмяСписка");
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуАлгоритмов(ИмяТаблицыДоп)
	Если Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение="" Тогда
		НовыйСписокПреобразований(ИмяТаблицыДоп);
	Иначе
		Отбор=Новый Структура("ИмяСписка", Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение);
		Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
		Если Строки.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		ФСтруктураАлгоритмы = КолонкиВФиксированнуюСтруктуру("Алгоритмы");
		МассивАлгоритмов = Новый Массив;
		Для Каждого СтрокаТЧ Из Строки Цикл
			СтруктураАлгоритмы=Новый Структура(ФСтруктураАлгоритмы);
			ЗаполнитьЗначенияСвойств(СтруктураАлгоритмы, СтрокаТЧ);
			МассивАлгоритмов.Добавить(СтруктураАлгоритмы);
		КонецЦикла;
		
		Строки = Объект.ПараметрыАлгоритмов.НайтиСтроки(Отбор);
		ФСтруктураАлгоритмы = КолонкиВФиксированнуюСтруктуру("ПараметрыАлгоритмов");
		МассивПараметровАлгоритмов = Новый Массив;
		Для Каждого СтрокаТЧ Из Строки Цикл
			СтруктураАлгоритмы=Новый Структура(ФСтруктураАлгоритмы);
			ЗаполнитьЗначенияСвойств(СтруктураАлгоритмы, СтрокаТЧ);
			МассивПараметровАлгоритмов.Добавить(СтруктураАлгоритмы);
		КонецЦикла;
		
		СтруктураСписка = Новый Структура;
		Прогноз=Ложь;
		Если ИмяТаблицыДоп="ОбразцыДоп" Тогда
			СтруктураСписка.Вставить("Заголовок", "Образец - "+Элементы.Образцы.ТекущиеДанные.ИмяСлоя);
		ИначеЕсли ИмяТаблицыДоп="ЦелиДоп" Тогда
			СтруктураСписка.Вставить("Заголовок", "Цель - "+Элементы.Цели.ТекущиеДанные.ИмяСлоя);
		ИначеЕсли ИмяТаблицыДоп="ПрогнозДоп" Тогда
			СтруктураСписка.Вставить("Заголовок", "Прогноз");
			Прогноз=Истина;
		КонецЕсли;
		
		ИменаСлоев = Новый Массив;
		ВсеОбразцы = ""; ВсеЦели = "";
		Для Каждого СтрокаСлой Из Объект.Образцы Цикл
			Если ВсеОбразцы<>"" Тогда ВсеОбразцы=ВсеОбразцы+", " КонецЕсли;
			ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
			ВсеОбразцы=ВсеОбразцы+СтрокаСлой.ИмяСлоя
		КонецЦикла;
		Если Объект.Образцы.Количество()>1 Тогда
			ИменаСлоев.Добавить("["+ВсеОбразцы+"]");
		КонецЕсли;
		Если Прогноз Тогда
			ИменаСлоев.Добавить("result");
		Иначе
			Для Каждого СтрокаСлой Из Объект.Цели Цикл
				Если ВсеЦели<>"" Тогда ВсеЦели=ВсеЦели+", " КонецЕсли;
				ИменаСлоев.Добавить(СтрокаСлой.ИмяСлоя);
				ВсеЦели=ВсеЦели+СтрокаСлой.ИмяСлоя
			КонецЦикла;
			Если Объект.Цели.Количество()>1 Тогда
				ИменаСлоев.Добавить("["+ВсеЦели+"]");
			КонецЕсли;
		КонецЕсли;
		
		СтруктураСписка.Вставить("ИменаСлоев", ИменаСлоев);
		СтруктураСписка.Вставить("ИмяСписка", Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение);
		СтруктураСписка.Вставить("Алгоритмы", МассивАлгоритмов);
		СтруктураСписка.Вставить("ПараметрыАлгоритмов", МассивПараметровАлгоритмов);
		ПараметрыД = Новый Структура("СписокАлгоритмов", СтруктураСписка);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяСписка", Элементы[ИмяТаблицыДоп].ТекущиеДанные.Значение);
		ДополнительныеПараметры.Вставить("ИмяТаблицыДоп", ИмяТаблицыДоп);
		ДополнительныеПараметры.Вставить("Прогноз", Прогноз);
		Оп = Новый ОписаниеОповещения("ПослеЗакрытияФормыАлгоритмов", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Документ.Нейро_Обучение.Форма.ФормаАлгоритмов", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИменаСписковАлгоритмовПрогноза()
	Отбор = Новый Структура("Прогноз", Истина);
	Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
	ТабИмена = Объект.Алгоритмы.Выгрузить(Строки,"ИмяСписка");
	ТабИмена.Свернуть("ИмяСписка");
	Возврат ТабИмена.ВыгрузитьКолонку("ИмяСписка");
КонецФункции

&НаКлиенте
Процедура ПрогнозДопПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозДопПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозДопЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокПреобразований=Новый СписокЗначений;
	//СписокИмен = ПолучитьИменаСписковАлгоритмов();
	Для Каждого ИмяСписка Из ПолучитьИменаСписковАлгоритмовПрогноза() Цикл
		СписокПреобразований.Добавить(ИмяСписка,,,БиблиотекаКартинок.ВнешнийИсточникДанныхФункция);
	КонецЦикла;
	СписокПреобразований.Добавить("+","Новый",,БиблиотекаКартинок.СоздатьЭлементСписка);
	СписокПреобразований.Добавить("++","Скопировать",,БиблиотекаКартинок.СкопироватьОбъект);
	СписокПреобразований.Добавить("-","Удалить",,БиблиотекаКартинок.Удалить);
	ЭлементСП = СписокПреобразований.НайтиПоЗначению(Элементы.ПрогнозДоп.ТекущиеДанные.Значение);
	ОписаниеО = Новый ОписаниеОповещения("ОбразцыЦелиДопВыборСпискаПреобразований", ЭтотОбъект, "ПрогнозДоп");
	ПоказатьВыборИзСписка(ОписаниеО, СписокПреобразований, Элемент, ЭлементСП);
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозДопЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАлгоритмов("ПрогнозДоп");
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозДопЗначениеПриИзменении(Элемент)
	Объект.СписокПрогноза = Элементы.ПрогнозДоп.ТекущиеДанные.Значение;
	Модифицированность = Истина;
КонецПроцедуры
