&НаКлиенте
Процедура СообщитьОбОшибке(Поле, Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СсылкаНаСайт = "https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/sequence/TimeseriesGenerator";

	РазделительОбразцы = "\t";
	РазделительЦели    = "\t";
	ТипДанныхОбразцы = ПредопределенноеЗначение("Перечисление.Нейро_ТипыNumPy.float32");
	ТипДанныхЦели    = ПредопределенноеЗначение("Перечисление.Нейро_ТипыNumPy.float32");
	
	Если Параметры.Свойство("Имя") Тогда
		Имя=Параметры.Имя;
		ИмяПриОткрытии=Параметры.Имя;
	КонецЕсли;
	Если Параметры.Свойство("МассивСлоев") Тогда
		Для Каждого ИмяСлоя Из Параметры.МассивСлоев Цикл
			Элементы.Масштабировать.СписокВыбора.Добавить(ИмяСлоя);
		КонецЦикла;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрыГенератора") Тогда
		Если Параметры.ПараметрыГенератора<>Неопределено Тогда
			ДлинаПоследовательности            = Параметры.ПараметрыГенератора.ДлинаПоследовательности;
			ЧастотаВыборки                     = Параметры.ПараметрыГенератора.ЧастотаВыборки;
			РазмерШага                         = Параметры.ПараметрыГенератора.РазмерШага;
			ИндексНачало                       = Параметры.ПараметрыГенератора.ИндексНачало;
			ИндексОкончание                    = Параметры.ПараметрыГенератора.ИндексОкончание;
			ИндексНачалоПроверка               = Параметры.ПараметрыГенератора.ИндексНачалоПроверка;
			ИндексОкончаниеПроверка            = Параметры.ПараметрыГенератора.ИндексОкончаниеПроверка;
			Перемешивать                       = Параметры.ПараметрыГенератора.Перемешивать;
			Обратить                           = Параметры.ПараметрыГенератора.Обратить;
			РазмерПакета                       = Параметры.ПараметрыГенератора.РазмерПакета;
			Нормализовать                      = Параметры.ПараметрыГенератора.Нормализовать;
			СписокКолонок                      = Параметры.ПараметрыГенератора.СписокКолонок;
			ИнтерваловНазад                    = Параметры.ПараметрыГенератора.ИнтерваловНазад;
			ИнтерваловВперед                   = Параметры.ПараметрыГенератора.ИнтерваловВперед;
			Источник                           = Параметры.ПараметрыГенератора.Источник;
			КолонкаЦели                        = Параметры.ПараметрыГенератора.КолонкаЦели;
			НормализоватьКолонки               = Параметры.ПараметрыГенератора.НормализоватьКолонки;
			Масштабировать                     = Параметры.ПараметрыГенератора.Масштабировать;
			МасштабироватьОбъединить           = Параметры.ПараметрыГенератора.МасштабироватьОбъединить;
			НормализоватьЦели                  = Параметры.ПараметрыГенератора.НормализоватьЦели;
			РазмерПакетаПроверка               = Параметры.ПараметрыГенератора.РазмерПакетаПроверка;
			НормализоватьРассчитывать          = Параметры.ПараметрыГенератора.НормализоватьРассчитывать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Сообщить("добавить пропустить строк и индексы колонок на закладке Просмотр");
	ИзменитьВидимость();
	ИзменитьВидимостьЭлементовПросмотра();
	
	Нейро_РаботаСФайлами.ПолучитьКаталогНейроконструктора(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура OK(Команда)
	Если СокрЛП(Имя)="" Тогда
		СообщитьОбОшибке("Имя", "Не задано имя генератора!");
		Возврат
	КонецЕсли;
	Результат=Новый Структура("Имя, ПараметрыГенератора",ИмяПриОткрытии,ПараметрыГенератораВСтруктуру());
	Закрыть(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Показать(Команда)
	Доп=Новый Структура("Имя, Приемник", "Data", "ПутьККаталогуТестирования");
	Оп = Новый ОписаниеОповещения("ПоказатьПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПродолжить(Результат, ДополнительныеПараметры) Экспорт
	//ФайлИзображения=Новый Файл(ПутьКФайлу);
	
	ПрефиксИмени = "TimeGen_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	
	Если ПросмотрИсточник=0 Тогда //Текст(0)
		Если СокрЛП(ТекстОбразцы.ПолучитьТекст())="" Тогда
			СообщитьОбОшибке("ТекстОбразцы", "Отсутствуют данные для обработки!"); Возврат
		КонецЕсли;
		СтруктураФайлОбразцов = Новый Структура("ПутьКФайлу, Разделитель, Тип, ПропуститьСтрок, Колонки", ПрефиксИмени+"_samples.txt", РазделительОбразцы, ТипДанныхОбразцы, ПропуститьСтрокОбразцы, КолонкиОбразцы);
		ЗаписьТекста = Новый ЗаписьТекста(ПутьККаталогуТестирования+ПрефиксИмени+"_samples.txt", КодировкаТекста.ANSI);
		ЗаписьТекста.Записать(ТекстОбразцы.ПолучитьТекст());
		ЗаписьТекста.Закрыть();	
		Если СокрЛП(ТекстЦели.ПолучитьТекст())="" Тогда
			СтруктураФайлЦелей = Новый Структура("ПутьКФайлу, Разделитель, Тип, ПропуститьСтрок, Колонки", ПрефиксИмени+"_samples.txt", РазделительЦели, ТипДанныхЦели, ПропуститьСтрокЦели, КолонкиЦели);
		Иначе
			СтруктураФайлЦелей = Новый Структура("ПутьКФайлу, Разделитель, Тип, ПропуститьСтрок, Колонки", ПрефиксИмени+"_targets.txt", РазделительЦели, ТипДанныхЦели, ПропуститьСтрокЦели, КолонкиЦели);
			ЗаписьТекста = Новый ЗаписьТекста(ПутьККаталогуТестирования+ПрефиксИмени+"_targets.txt", КодировкаТекста.ANSI);
			ЗаписьТекста.Записать(ТекстЦели.ПолучитьТекст());
			ЗаписьТекста.Закрыть();	
		КонецЕсли;
	Иначе // Файл(1)
		Если СокрЛП(ПутьКФайлуОбразцы)="" Тогда
			СообщитьОбОшибке("ПутьКФайлуОбразцы", "Укажите файл образцов!"); Возврат
		КонецЕсли;
		//Если СокрЛП(ПутьКФайлуОбразцы)="" Тогда
		//	СообщитьОбОшибке("ПутьКФайлуЦели", "Укажите файл целей!"); Возврат
		//КонецЕсли;
		СтруктураФайлОбразцов = Новый Структура("ПутьКФайлу, Разделитель, Тип, ПропуститьСтрок, Колонки", ПутьКФайлуОбразцы, РазделительОбразцы, ТипДанныхОбразцы, ПропуститьСтрокОбразцы, КолонкиОбразцы);
		Если СокрЛП(ПутьКФайлуЦели)="" Тогда
			СтруктураФайлЦелей = Новый Структура("ПутьКФайлу, Разделитель, Тип, ПропуститьСтрок, Колонки", ПутьКФайлуОбразцы, РазделительЦели, ТипДанныхЦели, ПропуститьСтрокЦели, КолонкиЦели);
		Иначе
			СтруктураФайлЦелей = Новый Структура("ПутьКФайлу, Разделитель, Тип, ПропуститьСтрок, Колонки", ПутьКФайлуЦели, РазделительЦели, ТипДанныхЦели, ПропуститьСтрокЦели, КолонкиЦели);
		КонецЕсли;
	КонецЕсли;
	СтруктураПараметров.Вставить("Источник", ПросмотрИсточник);
	СтруктураПараметров.Вставить("ФайлОбразцов", СтруктураФайлОбразцов);
	СтруктураПараметров.Вставить("ФайлЦелей", СтруктураФайлЦелей);
	//СтруктураПараметров.Вставить("ФайлИзображения", ПутьКФайлу);
	//СтруктураПараметров.Вставить("КаталогИзображения", ФайлИзображения.Путь);
	//СтруктураПараметров.Вставить("ИмяБезРасширения", ФайлИзображения.ИмяБезРасширения);
	//СтруктураПараметров.Вставить("Расширение", ФайлИзображения.Расширение);
	СтруктураПараметров.Вставить("ФайлРезультатов", ПрефиксИмени+"_result.json");
	СтруктураПараметров.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	
	ПараметрыГенератора=ПараметрыГенератораВСтруктуру();
	
	ТекстПрограммы=Нейро_Обучение.СформироватьТекстПрограммыВычислитьВременныеРяды(СтруктураПараметров, ПараметрыГенератора);
	
	Оп = Новый ОписаниеОповещения("ПоказатьЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуТестирования);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	//ДопПараметры.Вставить("ФайлРезультатов", ПрефиксИмени+"_History.json");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	//Если Объект.ОтображениеВыполнения<1 Тогда
	//	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	//Иначе
	//	ДопПараметры.Вставить("ФайлСообщений", Неопределено);
	//КонецЕсли;
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыГенератораВСтруктуру()
	Результат = Новый Структура;
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("Источник", Источник);
	Результат.Вставить("ДлинаПоследовательности", ДлинаПоследовательности); //length
	Результат.Вставить("ЧастотаВыборки", ЧастотаВыборки); //sampling_rate
	Результат.Вставить("РазмерШага", РазмерШага); //stride
	Результат.Вставить("ИндексНачало", ИндексНачало); //start_index
	Результат.Вставить("ИндексОкончание", ИндексОкончание); //end_index
	Результат.Вставить("ИндексНачалоПроверка", ИндексНачалоПроверка); //
	Результат.Вставить("ИндексОкончаниеПроверка", ИндексОкончаниеПроверка); //
	Результат.Вставить("Перемешивать", Перемешивать); //shuffle
	Результат.Вставить("Обратить", Обратить); //reverse
	Результат.Вставить("РазмерПакета", РазмерПакета); //batch_size
	Результат.Вставить("Нормализовать", Нормализовать); //
	Результат.Вставить("НормализоватьЦели", НормализоватьЦели); //
	Результат.Вставить("НормализоватьКолонки", НормализоватьКолонки); //
	Результат.Вставить("Масштабировать", Масштабировать); //
	Результат.Вставить("МасштабироватьОбъединить", МасштабироватьОбъединить); //
	Результат.Вставить("СписокКолонок", СписокКолонок); //
	Результат.Вставить("ИнтерваловНазад", ИнтерваловНазад); //lookback
	Результат.Вставить("ИнтерваловВперед", ИнтерваловВперед); //delay
	Результат.Вставить("КолонкаЦели", КолонкаЦели); //
	Результат.Вставить("РазмерПакетаПроверка", РазмерПакетаПроверка); //
	Результат.Вставить("НормализоватьРассчитывать", НормализоватьРассчитывать); //
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПоказатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Текст = Новый ЧтениеТекста(Результат+ДополнительныеПараметры.ФайлРезультатов);
	СтрокаJSON = Текст.Прочитать();
	Текст.Закрыть();
	УдалятьФайлыПослеВыполнения = Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения");
	Если ДополнительныеПараметры.Источник=0 Тогда
		Если УдалятьФайлыПослеВыполнения Тогда
			НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлОбразцов.ПутьКФайлу);
		КонецЕсли;
		Если ДополнительныеПараметры.ФайлОбразцов.ПутьКФайлу<>ДополнительныеПараметры.ФайлЦелей.ПутьКФайлу Тогда
			Если УдалятьФайлыПослеВыполнения Тогда
				НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлЦелей.ПутьКФайлу);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДеревоРезультат.ПолучитьЭлементы().Очистить();
	ПостроитьДеревоИсторииНаСервере(СтрокаJSON);
	Если УдалятьФайлыПослеВыполнения Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлРезультатов);
	КонецЕсли;
	Элементы.ГруппаРезультат.Показать();
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоИсторииНаСервере(СтрокаJSON)
	//ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//СтруктураИстории = ДокументОбъект.ПостроитьДеревоИсторииНаСервере(СтрокаJSON);	
	
	ДеревоJSON1=Новый ДеревоЗначений;
	ДеревоJSON1.Колонки.Добавить("Свойство");
	ДеревоJSON1.Колонки.Добавить("Значение");
	ДеревоJSON1.Колонки.Добавить("Тип");
		
	ДеревоJSON1.Строки.Очистить();
	Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(СтрокаJSON, ДеревоJSON1);
	СтруктураДереваJSON1 = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON1);
	
	Дз=РеквизитФормыВЗначение("ДеревоРезультат");
	ЗаполнитьДеревоРезультат(Дз, СтруктураДереваJSON1);
	ЗначениеВРеквизитФормы(Дз, "ДеревоРезультат");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРезультат(СтрокаДЗ, СтруктураСвойство)
	Если ТипЗнч(СтруктураСвойство)=Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из СтруктураСвойство Цикл
			НоваяСтрокаДЗ = СтрокаДЗ.Строки.Добавить();
			НоваяСтрокаДЗ.Свойство = КлючИЗначение.Ключ;
			НоваяСтрокаДЗ.Значение = КлючИЗначение.Значение;
			Если ТипЗнч(КлючИЗначение.Значение)=Тип("Массив") Или ТипЗнч(КлючИЗначение.Значение)=Тип("Структура") Тогда
				ЗаполнитьДеревоРезультат(НоваяСтрокаДЗ, КлючИЗначение.Значение)
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Значение Из СтруктураСвойство Цикл
			НоваяСтрокаДЗ = СтрокаДЗ.Строки.Добавить();
			НоваяСтрокаДЗ.Значение = Значение;
			Если ТипЗнч(Значение)=Тип("Массив") Или ТипЗнч(Значение)=Тип("Структура") Тогда
				ЗаполнитьДеревоРезультат(НоваяСтрокаДЗ, Значение)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаВыполнения(Результат, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.Свойство("ФайлРезультатов") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, Результат, ДополнительныеПараметры.ФайлРезультатов);
	КонецЕсли;
	//Если ДополнительныеПараметры.Свойство("ФайлОбразцов") Тогда
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбразцы(Команда)
	ЗагрузитьИзФайла("Образцы")
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦели(Команда)
	ЗагрузитьИзФайла("Цели")
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(ИмяРеквизита)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Файл = Новый Файл(ЭтаФорма["ПромежуточныйФайл"+ИмяРеквизита]);
	ДиалогОткрытияФайла.Каталог=Файл.Путь;
	ДиалогОткрытияФайла.ПолноеИмяФайла = Файл.Имя;
	Фильтр = "Текстовые файлы (*.txt)|*.txt|Массивы NumPy (*.npy)|*.npy|Все файлы (*.*)|*.*";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаИсточника", ЭтотОбъект, ИмяРеквизита);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаИсточника(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ЭтаФорма["ПромежуточныйФайл"+ДополнительныеПараметры]=ВыбранныеФайлы[0];
	Файл = Новый Файл(ВыбранныеФайлы[0]);
	Если Файл.Расширение=".npy" Тогда
		ЗагрузитьИзМассиваNumPy(ВыбранныеФайлы[0], ДополнительныеПараметры)
	Иначе
		ЗагрузитьТекст(ВыбранныеФайлы[0], ДополнительныеПараметры)
	КонецЕсли;
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТекст(ПутьКФайлу, ПрефиксРеквизита)
	ТекстДок    = ЭтаФорма["Текст"+ПрефиксРеквизита];
	Разделитель = ЭтаФорма["Разделитель"+ПрефиксРеквизита];
	ТипДанных   = ЭтаФорма["ТипДанных"+ПрефиксРеквизита];
	
	ТекстДок.НачатьЧтение(, ПутьКФайлу);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМассиваNumPy(ПутьКФайлу, ПрефиксРеквизита)
	Доп=Новый Структура("Имя, Приемник", "Data", "ПутьККаталогуТестирования");
	Доп.Вставить("ПутьКФайлу", ПутьКФайлу);
	Доп.Вставить("ПрефиксРеквизита", ПрефиксРеквизита);
	Оп = Новый ОписаниеОповещения("ЗагрузитьИзМассиваNumPyПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМассиваNumPyПродолжить(Результат, ДополнительныеПараметры) Экспорт
	//ТекстДок    = ЭтаФорма["Текст"+ДополнительныеПараметры.ПрефиксРеквизита];
	Разделитель = ЭтаФорма["Разделитель"+ДополнительныеПараметры.ПрефиксРеквизита];
	ТипДанных   = ЭтаФорма["ТипДанных"+ДополнительныеПараметры.ПрефиксРеквизита];
	
	ПрефиксИмени = "TimeGen_Npy2Txt_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлИсточник", ДополнительныеПараметры.ПутьКФайлу);
	СтруктураПараметров.Вставить("ФайлРезультатов", ПрефиксИмени+"_result.txt");
	СтруктураПараметров.Вставить("ПрефиксРеквизита", ДополнительныеПараметры.ПрефиксРеквизита);
	СтруктураПараметров.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	
	ТекстПрограммы=Нейро_Обучение.СформироватьТекстПрограммыNumpy2Txt(СтруктураПараметров, Разделитель, ТипДанных);
	
	Оп = Новый ОписаниеОповещения("ЗагрузитьИзМассиваNumPyЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуТестирования);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМассиваNumPyЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ТекстДок = ЭтаФорма["Текст"+ДополнительныеПараметры.ПрефиксРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзМассиваNumPyУдаление", ЭтотОбъект, Результат+ДополнительныеПараметры.ФайлРезультатов);
	ТекстДок.НачатьЧтение(ОписаниеОповещения, Результат+ДополнительныеПараметры.ФайлРезультатов);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМассиваNumPyУдаление(ДополнительныеПараметры) Экспорт
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрИсточникПриИзменении(Элемент)
	ИзменитьВидимостьЭлементовПросмотра();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьЭлементовПросмотра()
	Если ПросмотрИсточник=0 Тогда
		Элементы.ТекстОбразцы.Видимость=Истина;
		Элементы.ТекстЦели.Видимость=Истина;
		Элементы.ПутьКФайлуОбразцы.Видимость=Ложь;
		Элементы.ПутьКФайлуЦели.Видимость=Ложь;
		//Элементы.Группа11.Видимость=Истина;
		//Элементы.Группа12.Видимость=Истина;
		Элементы.ЗагрузитьОбразцы.Видимость=Истина;
		Элементы.ЗагрузитьЦели.Видимость=Истина;
	Иначе
		Элементы.ТекстОбразцы.Видимость=Ложь;
		Элементы.ТекстЦели.Видимость=Ложь;
		Элементы.ПутьКФайлуОбразцы.Видимость=Истина;
		Элементы.ПутьКФайлуЦели.Видимость=Истина;
		Элементы.ЗагрузитьОбразцы.Видимость=Ложь;
		Элементы.ЗагрузитьЦели.Видимость=Ложь;
		//Файл1=Новый Файл(ПутьКФайлуОбразцы);
		//Элементы.Группа11.Видимость = Не Файл1.Расширение=".npy";
		//Файл1=Новый Файл(ПутьКФайлуЦели);
		//Элементы.Группа12.Видимость = Не Файл1.Расширение=".npy";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРезультатПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	ТекстРезультатОбразцы.Очистить();
	ТекстРезультатЦели.Очистить();
	Если ТипЗнч(Элемент.ТекущиеДанные.Значение)=Тип("Структура") Тогда
		Для Каждого Значение Из Элемент.ТекущиеДанные.Значение.samples Цикл
			Если ТипЗнч(Значение)=Тип("Массив") Тогда
				ТекстРезультатОбразцы.ДобавитьСтроку(СформироватьСтрокуИзМассива(Значение));
			Иначе
				ТекстРезультатОбразцы.ДобавитьСтроку(Значение);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Значение Из Элемент.ТекущиеДанные.Значение.targets Цикл
			Если ТипЗнч(Значение)=Тип("Массив") Тогда
				ТекстРезультатЦели.ДобавитьСтроку(СформироватьСтрокуИзМассива(Значение));
			Иначе
				ТекстРезультатЦели.ДобавитьСтроку(Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Элемент.ТекущиеДанные.Свойство="samples" Тогда
		Для Каждого Значение Из Элемент.ТекущиеДанные.Значение Цикл
			Если ТипЗнч(Значение)=Тип("Массив") Тогда
				ТекстРезультатОбразцы.ДобавитьСтроку(СформироватьСтрокуИзМассива(Значение));
			Иначе
				ТекстРезультатОбразцы.ДобавитьСтроку(Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Элемент.ТекущиеДанные.Свойство="targets" Тогда
		Для Каждого Значение Из Элемент.ТекущиеДанные.Значение Цикл
			Если ТипЗнч(Значение)=Тип("Массив") Тогда
				ТекстРезультатЦели.ДобавитьСтроку(СформироватьСтрокуИзМассива(Значение));
			Иначе
				ТекстРезультатЦели.ДобавитьСтроку(Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Значение)=Тип("Массив") Тогда
		Для Каждого СтрокаДЗ Из ДеревоРезультат.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаДЗ1 Из СтрокаДЗ.ПолучитьЭлементы() Цикл
				Если ЭтоДочернийУзел(СтрокаДЗ1, Элемент.ТекущиеДанные) Тогда
					Если СтрокаДЗ1.Свойство="samples" Тогда
						ТекстРезультатОбразцы.ДобавитьСтроку(СформироватьСтрокуИзМассива(Элемент.ТекущиеДанные.Значение));
						Возврат
					ИначеЕсли СтрокаДЗ1.Свойство="targets" Тогда
						ТекстРезультатЦели.ДобавитьСтроку(СформироватьСтрокуИзМассива(Элемент.ТекущиеДанные.Значение));
						Возврат
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаДЗ Из ДеревоРезультат.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаДЗ1 Из СтрокаДЗ.ПолучитьЭлементы() Цикл
				Если ЭтоДочернийУзел(СтрокаДЗ1, Элемент.ТекущиеДанные) Тогда
					Если СтрокаДЗ1.Свойство="samples" Тогда
						ТекстРезультатОбразцы.ДобавитьСтроку(Элемент.ТекущиеДанные.Значение);
						Возврат
					ИначеЕсли СтрокаДЗ1.Свойство="targets" Тогда
						ТекстРезультатЦели.ДобавитьСтроку(Элемент.ТекущиеДанные.Значение);
						Возврат
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтрокуИзМассива(МассивЗначений)
	Результат = "";
	Для Каждого Значение Из МассивЗначений Цикл
		Если ТипЗнч(Значение)=Тип("Массив") Тогда
			ТекстЗначение=СформироватьСтрокуИзМассива(Значение)
		Иначе
			ТекстЗначение=СокрЛП(Значение)
		КонецЕсли;
		Если Результат<>"" Тогда Результат=Результат+", " КонецЕсли;
		Результат=Результат+ТекстЗначение;
	КонецЦикла;
	Возврат "["+Результат+"]"
КонецФункции

&НаКлиенте
Процедура ТабПакетыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	ТекстРезультатОбразцы.Очистить();
	ТекстРезультатЦели.Очистить();
	ТекстРезультатОбразцы.ДобавитьСтроку(СформироватьСтрокуИзМассива(Элемент.ТекущиеДанные.Значение));
	ТекстРезультатЦели.ДобавитьСтроку(СформироватьСтрокуИзМассива(Элемент.ТекущиеДанные.Значение1));
КонецПроцедуры

&НаКлиенте
Функция ЭтоДочернийУзел(Узел, СтрокаДЗ)
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	Для Каждого Узел1 Из ЭлементыУзла Цикл
		Если Узел1=СтрокаДЗ Тогда Возврат Истина КонецЕсли;
		Если Узел1.ПолучитьЭлементы().Количество()>0 Тогда
			Результат = ЭтоДочернийУзел(Узел1, СтрокаДЗ);
			Если Результат Тогда Возврат Результат КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь
КонецФункции

&НаКлиенте
Процедура ПутьКФайлуОбразцыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ВыборФайлаИсточника("Образцы")
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЦелиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ВыборФайлаИсточника("Цели")
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаИсточника(ИмяРеквизита)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Файл = Новый Файл(ЭтаФорма["ПутьКФайлу"+ИмяРеквизита]);
	Фильтр = "Текстовые файлы (*.txt)|*.txt|Массивы NumPy (*.npy)|*.npy|Все файлы (*.*)|*.*";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Расширение = Файл.Расширение;
	Если Файл.Расширение=".txt" Тогда
		ДиалогОткрытияФайла.ИндексФильтра = 0;
	ИначеЕсли Файл.Расширение=".npy" Тогда
		ДиалогОткрытияФайла.ИндексФильтра = 1;
	Иначе
		ДиалогОткрытияФайла.ИндексФильтра = 2;
	КонецЕсли;
	ДиалогОткрытияФайла.Каталог=Файл.Путь;
	ДиалогОткрытияФайла.ПолноеИмяФайла = Файл.Имя;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаИсточника1", ЭтотОбъект, ИмяРеквизита);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаИсточника1(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ЭтаФорма["ПутьКФайлу"+ДополнительныеПараметры]=ВыбранныеФайлы[0];
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	ИзменитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимость()
	Элементы.ГруппаПросмотр.Видимость = Источник=0;
	Элементы.Группа3.Видимость        = Источник=0;
	Элементы.Группа8.Видимость        = Источник=1;
	Элементы.Обратить.Видимость       = Источник=0;
	Элементы.СписокКолонок.Видимость  = Источник=0;
	Элементы.КолонкаЦели.Видимость    = Источник=1;
	Элементы.НормализоватьКолонки.Видимость = ЗначениеЗаполнено(Нормализовать);
	Элементы.Масштабировать.Видимость           = Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование");
	Элементы.МасштабироватьОбъединить.Видимость = Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование");
	Элементы.Декорация4.Высота = ?(Нормализовать=ПредопределенноеЗначение("Перечисление.Нейро_ВидыНормализации.Масштабирование"),6,3);
	Элементы.НормализоватьЦели.Видимость = ЗначениеЗаполнено(Нормализовать) И Источник=0;
	Элементы.НормализоватьРассчитывать.Видимость = ЗначениеЗаполнено(Нормализовать) И (ИндексНачало<>0 Или ИндексОкончание<>0);
	Элементы.ГруппаДокументация.Видимость    = Источник=0;
КонецПроцедуры

&НаКлиенте
Процедура НормализоватьПриИзменении(Элемент)
	//Элементы.НормализоватьКолонки.Видимость = ЗначениеЗаполнено(Нормализовать);
	ИзменитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура НормализоватьКолонкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	КЧ = Новый КвалификаторыЧисла(10,0);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	Сз=Новый СписокЗначений;
	Сз.ТипЗначения=Новый ОписаниеТипов(Массив, , ,КЧ);
	МассивКолонок = СтрРазделить(НормализоватьКолонки,",",Ложь);
	Для Каждого Текст Из МассивКолонок Цикл
		Сз.Добавить(Число(СтрЗаменить(СокрЛП(Текст),Символы.НПП,"")));
	КонецЦикла;
	
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("Список", Сз);
	
	//Если ТипЗнч(Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение)=Тип("СписокЗначений") Тогда
	//	ПараметрыД.Вставить("Список", Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение);
	//ИначеЕсли Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение<>Неопределено Тогда
	//	ПараметрыД.Вставить("Значение", Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение);
	//КонецЕсли;
	ОписаниеО = Новый ОписаниеОповещения("ПослеЗакрытияФормыСпискаЗначений", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.Нейро_ФормаСпискаЗначений", ПараметрыД, ЭтотОбъект, Истина, , , ОписаниеО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСпискаЗначений(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия<>Неопределено Тогда
		//Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение = РезультатЗакрытия;
		НормализоватьКолонки="";
		Для Каждого Элемент Из РезультатЗакрытия Цикл
			Если НормализоватьКолонки<>"" Тогда НормализоватьКолонки=НормализоватьКолонки+", " КонецЕсли;
			НормализоватьКолонки=НормализоватьКолонки+СтрЗаменить(СокрЛП(Элемент.Значение),Символы.НПП,"");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИндексНачалоПриИзменении(Элемент)
	Элементы.НормализоватьРассчитывать.Видимость = ЗначениеЗаполнено(Нормализовать) И (ИндексНачало<>0 Или ИндексОкончание<>0);
КонецПроцедуры

&НаКлиенте
Процедура ИндексОкончаниеПриИзменении(Элемент)
	Элементы.НормализоватьРассчитывать.Видимость = ЗначениеЗаполнено(Нормализовать) И (ИндексНачало<>0 Или ИндексОкончание<>0);
КонецПроцедуры


&НаКлиенте
Процедура СсылкаНаСайтОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если СсылкаНаСайт<>"" Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения, СсылкаНаСайт);
	КонецЕсли;
КонецПроцедуры

