&НаКлиенте
Процедура СообщитьОбОшибке(Поле, Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	Если Источник=0 Тогда
		Элементы.ГруппаИсточникМассив.Видимость=Истина;
		Элементы.ГруппаИсточникКаталог.Видимость=Ложь;
	ИначеЕсли Источник=1 Тогда
		Элементы.ГруппаИсточникМассив.Видимость=Ложь;
		Элементы.ГруппаИсточникКаталог.Видимость=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонСдвигаПоШиринеПриИзменении(Элемент)
	Элементы.ДиапазонСдвигаПоШиринеВещественное.Видимость=ДиапазонСдвигаПоШирине=0;
	Элементы.ДиапазонСдвигаПоШиринеЦелое.Видимость=ДиапазонСдвигаПоШирине=1;
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонСдвигаПоВысотеПриИзменении(Элемент)
	Элементы.ДиапазонСдвигаПоВысотеВещественное.Видимость=ДиапазонСдвигаПоВысоте=0;
	Элементы.ДиапазонСдвигаПоВысотеЦелое.Видимость=ДиапазонСдвигаПоВысоте=1;
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияПриИзменении(Элемент)
	Элементы.РежимЗаполненияКонстанта.Видимость=РежимЗаполнения=1;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИсточникПриИзменении(Неопределено);
	ДиапазонСдвигаПоШиринеПриИзменении(Неопределено);
	ДиапазонСдвигаПоВысотеПриИзменении(Неопределено);
	РежимЗаполненияПриИзменении(Неопределено);
	
	Нейро_РаботаСФайлами.ПолучитьКаталогНейроконструктора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентМасштабированияПриИзменении(Элемент)
	//Если Источник=1 Тогда
	//	КоэффициентМасштабированияСтрока=Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ПредопределенноеЗначение("Перечисление.Нейро_Типы.Вещественное"), КоэффициентМасштабирования);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Показать(Команда)
	Если ПутьКФайлу="" Тогда
		СообщитьОбОшибке("ПутьКФайлу", "Выберите тестовый файл!");
		Возврат
	КонецЕсли;
	
	Доп=Новый Структура("Имя, Приемник", "Data", "ПутьККаталогуТестирования");
	Оп = Новый ОписаниеОповещения("ПоказатьПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПродолжить(Результат, ДополнительныеПараметры) Экспорт
	ФайлИзображения=Новый Файл(ПутьКФайлу);
	
	ПрефиксИмени = "ImageGen_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("ФайлИзображения", ПутьКФайлу);
	СтруктураПараметров.Вставить("КаталогИзображения", ФайлИзображения.Путь);
	СтруктураПараметров.Вставить("ИмяБезРасширения", ФайлИзображения.ИмяБезРасширения);
	СтруктураПараметров.Вставить("Расширение", ФайлИзображения.Расширение);
	//СтруктураПараметров.Вставить("ФайлРезультатов", ПрефиксИмени+"_History.json");
	//СтруктураПараметров.Вставить("ФайлМодели", ИмяФайлаМодели);
	//СтруктураПараметров.Вставить("ИдентификаторFromJSON", Нейро_ОбщийМодуль.ПолучитьИдентификаторИзРегистра("TokenizerFromJSON"));
	//СтруктураПараметров.Вставить("ФайлЗагрузкиВесов", ПрефиксИмени+"_weights_paths.json");
	
	ПараметрыГенератора=ПараметрыГенератораВСтруктуру();
	
	ТекстПрограммы=Нейро_Обучение.СформироватьТекстПрограммыПоказатьИзображения(СтруктураПараметров, ПараметрыГенератора);
	
	Оп = Новый ОписаниеОповещения("ПоказатьЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуТестирования);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	//ДопПараметры.Вставить("ФайлРезультатов", ПрефиксИмени+"_History.json");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	//Если Объект.ОтображениеВыполнения<1 Тогда
	//	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	//Иначе
	//	ДопПараметры.Вставить("ФайлСообщений", Неопределено);
	//КонецЕсли;
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	КаталогПросмотра = ДополнительныеПараметры.КаталогИзображения+"preview";
	ОпОп = Новый ОписаниеОповещения("ПослеПоискаФайловВКаталоге", ЭтотОбъект, ДополнительныеПараметры);
	Если ДополнительныеПараметры.Расширение=".png" Тогда
		Маска="*.png"
	Иначе
		Маска="*.jpeg"
	КонецЕсли;	
	НачатьПоискФайлов(ОпОп, КаталогПросмотра, Маска, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаФайловВКаталоге(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Сч=0; МассивПозднее=Новый Массив;
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Попытка
			УдалитьИзВременногоХранилища(ЭтаФорма["СсылкаНаКартинку"+СокрЛП(Сч)]);
		Исключение
			//я=1;
		КонецПопытки;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтаФорма, Сч);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения,, НайденныйФайл.ПолноеИмя, Ложь, УникальныйИдентификатор); 
		Исключение
			МассивПозднее.Добавить(Новый Структура("Индекс, Файл",Сч,НайденныйФайл));
		КонецПопытки;
		Сч=Сч+1;
	КонецЦикла;
	Если МассивПозднее.Количество()>0 Тогда
		ПовторитьПопыткуПомещенияФайлов(1, МассивПозднее);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПопыткуПомещенияФайлов(НомерПопытки, МассивФайлов)
	Если НомерПопытки>20 Тогда
		Сообщить("Файлы, которые не удалось поместить в хранилище будут открыты средствами Windows");
		Для Каждого СтруктураНайденныйФайл Из МассивФайлов Цикл
			Элементы["СсылкаНаКартинку"+СокрЛП(СтруктураНайденныйФайл.Индекс)].Видимость=Ложь;
			ОпОп = Новый ОписаниеОповещения();
			НачатьЗапускПриложения(ОпОп, СтруктураНайденныйФайл.Файл.ПолноеИмя);
			Элементы["СсылкаНаКартинку"+СокрЛП(СтруктураНайденныйФайл.Индекс)].Видимость=Истина;
		КонецЦикла;
		Возврат
	КонецЕсли;
	МассивПозднее=Новый Массив;
	Для Каждого СтруктураНайденныйФайл Из МассивФайлов Цикл
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтаФорма, СтруктураНайденныйФайл.Индекс);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения,, СтруктураНайденныйФайл.Файл.ПолноеИмя, Ложь, УникальныйИдентификатор); 
		Исключение
			МассивПозднее.Добавить(Новый Структура("Индекс, Файл",СтруктураНайденныйФайл.Индекс, СтруктураНайденныйФайл.Файл));
		КонецПопытки;
	КонецЦикла;
	Если МассивПозднее.Количество()>0 Тогда
		ПовторитьПопыткуПомещенияФайлов(НомерПопытки+1, МассивПозднее);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла,ДопПараметры) Экспорт
	Если Не Результат Тогда 
		Возврат; 
	КонецЕсли; 
	ЭтаФорма["СсылкаНаКартинку"+СокрЛП(ДопПараметры)] = Адрес;
	//СсылкаНаКартинку = Адрес; 
	//
	//Элементы.ГруппаГрафическаяСхема.Скрыть(); 
	//Элементы.ГруппаГрафическаяСхема.Показать(); 
	//
	//ПрочитатьМодельИзJSON(ДопПараметры)
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры


&НаКлиенте
Функция ПараметрыГенератораВСтруктуру()
	Результат = Новый Структура;
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("Источник", Источник);
	Результат.Вставить("ЦентрироватьПоПризнакам", ЦентрироватьПоПризнакам); //featurewise_center
	Результат.Вставить("НормализацияПоПризнакам", НормализацияПоПризнакам); //featurewise_std_normalization
	Результат.Вставить("ЦентрироватьПоОбразцам", ЦентрироватьПоОбразцам);   //samplewise_center
	Результат.Вставить("НормализацияПоОбразцам", НормализацияПоОбразцам);   //featurewise_std_normalization
	Результат.Вставить("ОтбеливаниеZCA", ОтбеливаниеZCA);         //zca_whitening
	Результат.Вставить("ОтбеливаниеЭпсилон", ОтбеливаниеЭпсилон); //zca_epsilon
	Результат.Вставить("ДиапазонВращения", ДиапазонВращения);     //rotation_range
	Результат.Вставить("ДиапазонСдвигаПоШирине", ДиапазонСдвигаПоШирине); //width_shift_range
	Результат.Вставить("ДиапазонСдвигаПоШиринеВещественное", ДиапазонСдвигаПоШиринеВещественное);
	Результат.Вставить("ДиапазонСдвигаПоШиринеЦелое", ДиапазонСдвигаПоШиринеЦелое);
	Результат.Вставить("ДиапазонСдвигаПоВысоте", ДиапазонСдвигаПоВысоте); //height_shift_range
	Результат.Вставить("ДиапазонСдвигаПоВысотеВещественное", ДиапазонСдвигаПоВысотеВещественное);
	Результат.Вставить("ДиапазонСдвигаПоВысотеЦелое", ДиапазонСдвигаПоВысотеЦелое);
	Результат.Вставить("ЯркостьНаименьшая", ЯркостьНаименьшая); //brightness_range
	Результат.Вставить("ЯркостьНаибольшая", ЯркостьНаибольшая); //brightness_range
	Результат.Вставить("Уклон", Уклон); //shear_range
	Результат.Вставить("ИзменениеРазмера", ИзменениеРазмера); //zoom_range
	Результат.Вставить("КаналаСдвиг", КаналаСдвиг); //channel_shift_range
	Результат.Вставить("РежимЗаполнения", РежимЗаполнения); //fill_mode
	Результат.Вставить("РежимЗаполненияКонстанта", РежимЗаполненияКонстанта); //cval
	Результат.Вставить("ОтразитьПоГоризонтали", ОтразитьПоГоризонтали); //horizontal_flip
	Результат.Вставить("ОтразитьПоВертикали", ОтразитьПоВертикали); //vertical_flip
	Результат.Вставить("КоэффициентМасштабирования", КоэффициентМасштабирования); //rescale
	//Результат.Вставить("КоэффициентМасштабированияСтрока", КоэффициентМасштабированияСтрока); //rescale
	Результат.Вставить("ВыделятьДляКонтроля", ВыделятьДляКонтроля); //validation_split
	Результат.Вставить("ТипДанных", ТипДанных); //dtype
	Результат.Вставить("РазрешениеШирина", РазрешениеШирина); //target_size
	Результат.Вставить("РазрешениеВысота", РазрешениеВысота); //target_size
	Результат.Вставить("Палитра", Палитра); //color_mode
	Результат.Вставить("Интерполяция", Интерполяция); //interpolation
	Результат.Вставить("Классификация", Классификация); //class_mode
	Результат.Вставить("КаталогСохранения", КаталогСохранения); //save_to_dir
	Результат.Вставить("КаталогСохраненияПроверка", КаталогСохраненияПроверка); //save_to_dir
	Результат.Вставить("ПрефиксИмениФайла", ПрефиксИмениФайла); //save_prefix
	Результат.Вставить("ФорматФайла", ФорматФайла); //save_format
	Результат.Вставить("РазмерПакета", РазмерПакета); //save_format
	Результат.Вставить("ИнициализаторГСЧ", ИнициализаторГСЧ); //save_format
	Результат.Вставить("Стандартизировать", Стандартизировать); //standardize(x)
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Файл = Новый Файл(Элемент.ТекстРедактирования);
	//ПутьКФайлу=Элемент.ТекстРедактирования;
	//Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	//Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Файл.Путь;
	//КонецЕсли;
	//ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	ДиалогОткрытияФайла.ПолноеИмяФайла = Файл.Имя;
	Фильтр = "Изображения|*.PNG; *.JPG; *.JPEG; *.BMP; *.PPM; *.TIF|Файл Jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|Все файлы (*.*)|*.*";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя проверочного изображения";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаИзображения", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаИзображения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ПутьКФайлу=ВыбранныеФайлы[0];
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	Если СокрЛП(Имя)="" Тогда
		СообщитьОбОшибке("Имя", "Не задано имя генератора!");
		Возврат
	КонецЕсли;
	Результат=Новый Структура("Имя, ПараметрыГенератора",ИмяПриОткрытии,ПараметрыГенератораВСтруктуру());
	Закрыть(Результат);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Имя") Тогда
		Имя=Параметры.Имя;
		ИмяПриОткрытии=Параметры.Имя;
	КонецЕсли;
	Если Параметры.Свойство("ПараметрыГенератора") Тогда
		Если Параметры.ПараметрыГенератора<>Неопределено Тогда
			Источник                           = Параметры.ПараметрыГенератора.Источник;
			ЦентрироватьПоПризнакам            = Параметры.ПараметрыГенератора.ЦентрироватьПоПризнакам;
			НормализацияПоПризнакам            = Параметры.ПараметрыГенератора.НормализацияПоПризнакам;
			ЦентрироватьПоОбразцам             = Параметры.ПараметрыГенератора.ЦентрироватьПоОбразцам;
			НормализацияПоОбразцам             = Параметры.ПараметрыГенератора.НормализацияПоОбразцам;
			ОтбеливаниеZCA                     = Параметры.ПараметрыГенератора.ОтбеливаниеZCA;
			ОтбеливаниеЭпсилон                 = Параметры.ПараметрыГенератора.ОтбеливаниеЭпсилон;
			ДиапазонВращения                   = Параметры.ПараметрыГенератора.ДиапазонВращения;
			ДиапазонСдвигаПоШирине             = Параметры.ПараметрыГенератора.ДиапазонСдвигаПоШирине;
			ДиапазонСдвигаПоШиринеВещественное = Параметры.ПараметрыГенератора.ДиапазонСдвигаПоШиринеВещественное;
			ДиапазонСдвигаПоШиринеЦелое        = Параметры.ПараметрыГенератора.ДиапазонСдвигаПоШиринеЦелое;
			ДиапазонСдвигаПоВысоте             = Параметры.ПараметрыГенератора.ДиапазонСдвигаПоВысоте;
			ДиапазонСдвигаПоВысотеВещественное = Параметры.ПараметрыГенератора.ДиапазонСдвигаПоВысотеВещественное;
			ДиапазонСдвигаПоВысотеЦелое        = Параметры.ПараметрыГенератора.ДиапазонСдвигаПоВысотеЦелое;
			ЯркостьНаименьшая                  = Параметры.ПараметрыГенератора.ЯркостьНаименьшая;
			ЯркостьНаибольшая                  = Параметры.ПараметрыГенератора.ЯркостьНаибольшая;
			Уклон                              = Параметры.ПараметрыГенератора.Уклон;
			ИзменениеРазмера                   = Параметры.ПараметрыГенератора.ИзменениеРазмера;
			КаналаСдвиг                        = Параметры.ПараметрыГенератора.КаналаСдвиг;
			РежимЗаполнения                    = Параметры.ПараметрыГенератора.РежимЗаполнения;
			РежимЗаполненияКонстанта           = Параметры.ПараметрыГенератора.РежимЗаполненияКонстанта;
			ОтразитьПоГоризонтали              = Параметры.ПараметрыГенератора.ОтразитьПоГоризонтали;
			ОтразитьПоВертикали                = Параметры.ПараметрыГенератора.ОтразитьПоВертикали;
			КоэффициентМасштабирования         = Параметры.ПараметрыГенератора.КоэффициентМасштабирования;
			ВыделятьДляКонтроля                = Параметры.ПараметрыГенератора.ВыделятьДляКонтроля;
			ТипДанных                          = Параметры.ПараметрыГенератора.ТипДанных;
			РазрешениеШирина                   = Параметры.ПараметрыГенератора.РазрешениеШирина;
			РазрешениеВысота                   = Параметры.ПараметрыГенератора.РазрешениеВысота;
			Палитра                            = Параметры.ПараметрыГенератора.Палитра;
			Интерполяция                       = Параметры.ПараметрыГенератора.Интерполяция;
			Классификация                      = Параметры.ПараметрыГенератора.Классификация;
			КаталогСохранения                  = Параметры.ПараметрыГенератора.КаталогСохранения;
			КаталогСохраненияПроверка          = Параметры.ПараметрыГенератора.КаталогСохраненияПроверка;
			ПрефиксИмениФайла                  = Параметры.ПараметрыГенератора.ПрефиксИмениФайла;
			ФорматФайла                        = Параметры.ПараметрыГенератора.ФорматФайла;
			РазмерПакета                       = Параметры.ПараметрыГенератора.РазмерПакета;
			ИнициализаторГСЧ                   = Параметры.ПараметрыГенератора.ИнициализаторГСЧ;
			Стандартизировать                  = Параметры.ПараметрыГенератора.Стандартизировать;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ВыбратьКаталогСохранения("КаталогСохранения");
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияПроверкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ВыбратьКаталогСохранения("КаталогСохраненияПроверка");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогСохранения(ИмяРеквизита)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	//Файл = Новый Файл(Элемент.ТекстРедактирования);
	ДиалогОткрытияФайла.Каталог=ЭтаФорма[ИмяРеквизита];
	ДиалогОткрытияФайла.Заголовок = "Укажите имя каталога для сохранения";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеВыбораКаталогаСохранения", ЭтотОбъект,ИмяРеквизита);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКаталогаСохранения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ЭтаФорма[ДополнительныеПараметры]=ВыбранныеФайлы[0];
КонецПроцедуры

//featurewise_center: Установите среднее значение ввода 0 для набора данных, по признакам       transforms the images to 0 mean. This is done by using the formulae X = X - mean(X)
//samplewise_center: Установите для каждого образца среднее значение 0.
//featurewise_std_normalization: Разделите входные данные на стандартное значение набора данных. (по признакам)
//samplewise_std_normalization: Разделите каждый вход по его стандартному значению.
//zca_epsilon: epsilon for ZCA whitening. Default is 1e-6.
//zca_whitening:
//rotation_range: Диапазон градусов для случайных вращений.
//width_shift_range: Float, 1-D array-like or int
//height_shift_range: Float, 1-D array-like or int
//brightness_range: Tuple or list of two floats. Range for picking a brightness shift value from.
//shear_range:Shear Intensity (Shear angle in counter-clockwise direction in degrees)
//zoom_range: Float or [lower, upper]. Range for random zoom. If a float, [lower, upper] = [1-zoom_range, 1+zoom_range]
//channel_shift_range: Float. Range for random channel shifts.
//fill_mode: One of {"constant", "nearest", "reflect" or "wrap"}. Default is 'nearest'.	 Points outside the boundaries of the input are filled according to the given mode:
//cval: Float or Int. Value used for points outside the boundaries when fill_mode = "constant".
//horizontal_flip: Boolean. Randomly flip inputs horizontally.
//vertical_flip: Boolean. Randomly flip inputs vertically.
//rescale: rescaling factor. Defaults to None. If None or 0, no rescaling is applied
//validation_split: Float. Fraction of images reserved for validation (strictly between 0 and 1).
//dtype: Dtype to use for the generated arrays.

//keras.preprocessing.image.ImageDataGenerator(featurewise_center=False, samplewise_center=False, featurewise_std_normalization=False, samplewise_std_normalization=False, zca_whitening=False, zca_epsilon=1e-06, rotation_range=0, width_shift_range=0.0, height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0, channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=False, vertical_flip=False, rescale=None, preprocessing_function=None, data_format='channels_last', validation_split=0.0, interpolation_order=1, dtype='float32')

//flow_from_directory(
//    directory,
//    target_size=(256, 256),
//    color_mode='rgb',
//    classes=None,
//    class_mode='categorical',
//    batch_size=32,
//    shuffle=True,
//    seed=None,
//    save_to_dir=None,
//    save_prefix='',
//    save_format='png',
//    follow_links=False,
//    subset=None,
//    interpolation='nearest'
//)

//directory: string, path to the target directory.
//    It should contain one subdirectory per class.
//    Any PNG, JPG, BMP, PPM or TIF images
//    inside each of the subdirectories directory tree
//    will be included in the generator.

