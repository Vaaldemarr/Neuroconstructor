&НаСервере
Функция СформироватьТекстКомпиляцииМодели(Объект, НомераСтрок, ЧислоСтрок) Экспорт
	Результат = Новый Структура("Ошибка, Текст", Ложь, "");
	
	ТекстПрограммы="";
	
	ОптимизаторИд="";
	Если Объект.Оптимизатор=Неопределено Или Не ЗначениеЗаполнено(Объект.Оптимизатор) Тогда
		ОптимизаторИд = Неопределено
	ИначеЕсли ТипЗнч(Объект.Оптимизатор)=Тип("ПеречислениеСсылка.Нейро_Оптимизаторы") Тогда
		//ОптимизаторИд = "'"+СокрЛП(Объект.Оптимизатор)+"'";
		ОптимизаторИд = "'"+Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_Оптимизаторы", Объект.Оптимизатор)+"'";
	ИначеЕсли ТипЗнч(Объект.Оптимизатор)=Тип("СправочникСсылка.Нейро_Функции") Тогда
		ЧислоСтрок2 = ?(ТекстПрограммы="",0,СтрЧислоСтрок(ТекстПрограммы));
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Компиляция", ЧислоСтрок+ЧислоСтрок2,"Оптимизатор"));
		ТекстФ = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("OptimizerF", ТипЗнч(Объект.Оптимизатор), Объект.Оптимизатор);
		ТекстПрограммы=ТекстПрограммы+ТекстФ+Символы.ВК+Символы.ПС;
		ОптимизаторИд = "OptimizerF";
	КонецЕсли;
	
	//ПотериИд=Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ТипЗнч(Объект.ФункцияПотерь),Объект.ФункцияПотерь);
	Если Объект.ФункцияПотерь=Неопределено Или Не ЗначениеЗаполнено(Объект.ФункцияПотерь) Тогда
		ПотериИд = Неопределено
	ИначеЕсли ТипЗнч(Объект.ФункцияПотерь)=Тип("СправочникСсылка.Нейро_Массивы") 
		ИЛИ ТипЗнч(Объект.ФункцияПотерь)=Тип("СправочникСсылка.Нейро_Функции") Тогда
		ПотериИд=Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ТипЗнч(Объект.ФункцияПотерь),Объект.ФункцияПотерь);
	Иначе
		Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.ФункцияПотерь");
		ПотериИд=Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип, Объект.ФункцияПотерь);
	КонецЕсли;
	
	Если Объект.ВесаПотерь=Неопределено Тогда
		ВесаПотерьИд = Неопределено
	ИначеЕсли ТипЗнч(Объект.ВесаПотерь)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
		Если ЗначениеЗаполнено(Объект.ВесаПотерь) Тогда
			ВесаПотерьИд=Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", ТипЗнч(Объект.ВесаПотерь),Объект.ВесаПотерь);
		Иначе
			ВесаПотерьИд = Неопределено
		КонецЕсли;
	Иначе
		Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Вещественное");
		ВесаПотерьИд="["+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип, Объект.ВесаПотерь)+"]";
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.Метрика) Тогда
		Если ТипЗнч(Объект.Метрика)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
			ЧислоСтрок2 = ?(ТекстПрограммы="",0,СтрЧислоСтрок(ТекстПрограммы));
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Компиляция", ЧислоСтрок+ЧислоСтрок2,"Показатели качества"));
			ТекстФ = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("MetricsF", ТипЗнч(Объект.Метрика),Объект.Метрика);
			ТекстПрограммы=ТекстПрограммы+ТекстФ+Символы.ВК+Символы.ПС;
			МетрикиИд="MetricsF";
		Иначе
			Если ТипЗнч(Объект.Метрика)=Тип("СправочникСсылка.Нейро_Функции") Тогда
				ЧислоСтрок2 = ?(ТекстПрограммы="",0,СтрЧислоСтрок(ТекстПрограммы));
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Компиляция", ЧислоСтрок+ЧислоСтрок2,"Показатели качества"));
				Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Функция");
				ТекстФ = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("MetricsF", Тип, Объект.Метрика);
				ТекстПрограммы=ТекстПрограммы+ТекстФ+Символы.ВК+Символы.ПС;
				МетрикиИд="[MetricsF]";
			ИначеЕсли ТипЗнч(Объект.Метрика)=Тип("ПеречислениеСсылка.Нейро_Метрики") Тогда
				Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Метрика");
				МетрикиИд="["+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип,Объект.Метрика)+"]";
			ИначеЕсли ТипЗнч(Объект.Метрика)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
				Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.ФункцияПотерь");
				МетрикиИд="["+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Тип,Объект.Метрика)+"]";
			Иначе
				Тип = Неопределено;
				МетрикиИд=Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Тип = Неопределено;
		МетрикиИд=Неопределено;
	КонецЕсли;
	
	Если ОптимизаторИд=Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.Текст = "Не задан оптимизатор!";
		Возврат Результат
	КонецЕсли;
	Если ПотериИд=Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.Текст = "Не задана целевая функция потерь!";
		Возврат Результат
	КонецЕсли;
	//Если ОптимизаторИд=Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ЧислоСтрок2 = ?(ТекстПрограммы="",0,СтрЧислоСтрок(ТекстПрограммы));
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", ЧислоСтрок+ЧислоСтрок2, "Компиляция"));
	ТекстПрограммы=ТекстПрограммы+"model.compile(";
	ТекстПрограммы=ТекстПрограммы+"optimizer="+ОптимизаторИд;
	Если ПотериИд<>Неопределено Тогда
		ТекстПрограммы=ТекстПрограммы+", loss="+ПотериИд;
	КонецЕсли;
	Если МетрикиИд<>Неопределено Тогда
		ТекстПрограммы=ТекстПрограммы+", metrics="+МетрикиИд;
	КонецЕсли;
	Если ВесаПотерьИд<>Неопределено Тогда
		ТекстПрограммы=ТекстПрограммы+", loss_weights="+ВесаПотерьИд;
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+")"+Символы.ВК+Символы.ПС;

	Результат.Текст = ТекстПрограммы;
	Возврат Результат;
КонецФункции

#Область ОбработкаJSON

&НаСервере
Функция ПеребратьСлойИзСтруктурыJSON(Объект, СтруктураСлой) Экспорт
	СтрокаТЧ = Объект.Слои.Добавить();
	СтрокаТЧ.Имя = СтруктураСлой.config.name;
	СтрокаТЧ.ТипСлоя = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыСлоев", СтруктураСлой.class_name);
	СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
	Если СтруктураСлой.config.Свойство("batch_input_shape") Тогда
		СтрокаТЧ.Форма = ЗаполнитьВходнуюФормуСлояJSON(Объект, СтрокаТЧ.Имя, СтруктураСлой.config.batch_input_shape);
	КонецЕсли;
	Если СтруктураСлой.config.Свойство("dtype") Тогда
		СтрокаТЧ.Тип=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", СтруктураСлой.config.dtype);
	КонецЕсли;
	//ЗаполнитьВходящиеСлоиСлояJSON(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
	Если СтруктураСлой.config.Свойство("trainable") Тогда
		СтрокаТЧ.Тренируемый = СтруктураСлой.config.trainable;
	КонецЕсли;
	Если СтруктураСлой.config.Свойство("units") Тогда
		Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
		СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.units);
	ИначеЕсли СтруктураСлой.config.Свойство("filters") Тогда
		Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
		СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.filters);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПеребратьМодельИзСтруктурыJSON(Объект, СтруктураМодели) Экспорт
	Результат = "";
	
	Для Каждого КлючИЗначение Из СтруктураМодели Цикл
		Если КлючИЗначение.Ключ="name" Тогда
			Результат = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ="layers" Тогда
			Для Каждого СтруктураСлой Из КлючИЗначение.Значение Цикл
				СтрокаТЧ = Объект.Слои.Добавить();
				СтрокаТЧ.Имя = СтруктураСлой.name;
				//СтрокаТЧ.ИмяУникальное = СтруктураСлой.name+"_";
				СтрокаТЧ.ТипСлоя = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыСлоев", СтруктураСлой.class_name);
				СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
				Если ЭтоОболочка(СтрокаТЧ.ИдСлоя) Тогда
					СтрокаТЧ.Положение=3;
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("batch_input_shape") Тогда
					СтрокаТЧ.Форма = ЗаполнитьВходнуюФормуСлояJSON(Объект, СтрокаТЧ.Имя, СтруктураСлой.config.batch_input_shape);
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("dtype") Тогда
					СтрокаТЧ.Тип=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", СтруктураСлой.config.dtype);
				КонецЕсли;
				ЗаполнитьВходящиеСлоиСлояJSON(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
				Если СтруктураСлой.config.Свойство("trainable") Тогда
					СтрокаТЧ.Тренируемый = СтруктураСлой.config.trainable;
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("units") Тогда
					Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
					СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.units);
				ИначеЕсли СтруктураСлой.config.Свойство("filters") Тогда
					Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
					СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.filters);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли КлючИЗначение.Ключ="input_layers" Тогда
			Для Каждого МассивЗначений Из КлючИЗначение.Значение Цикл
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Объект.Входы.Добавить();
						НоваяСтрока.ИмяСлоя = Значение; 
						Прервать
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли КлючИЗначение.Ключ="output_layers" Тогда
			Для Каждого МассивЗначений Из КлючИЗначение.Значение Цикл
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Объект.Выходы.Добавить();
						НоваяСтрока.ИмяСлоя = Значение; 
						Прервать
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВходы Из Объект.Входы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаВыходы Из Объект.Выходы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВыходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьМодельИзСтрокиJSON(Текст, ДЗ) Экспорт
	тЧтение = Новый ЧтениеJSON;
	тЧтение.УстановитьСтроку(Текст);
	Пока тЧтение.Прочитать() Цикл
		Если тЧтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			ПрочитатьОбъектИзJSON(тЧтение, ДЗ);
		ИначеЕсли тЧтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Продолжить
		ИначеЕсли тЧтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			ПрочитатьМассивИзJSON(тЧтение, ДЗ)
		ИначеЕсли тЧтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Продолжить
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ПрочитатьОбъектИзJSON(Чтение, СтрокаДЗ)
	НоваяСтрока=СтрокаДЗ;
	Строки = СтрокаДЗ.Строки;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			НоваяСтрока.Тип="Объект";
			ПрочитатьОбъектИзJSON(Чтение, НоваяСтрока)
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Возврат
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Свойство = Чтение.ТекущееЗначение;
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Строка Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			Если НоваяСтрока.Свойство = "name" И СтрокаДЗ.Тип = "Объект" Тогда
				СтрокаДЗ.Значение = "<"+Чтение.ТекущееЗначение+">";
			КонецЕсли;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Null Тогда
			НоваяСтрока.Значение = Null;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Число Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Булево Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			НоваяСтрока.Тип="Массив";
			ПрочитатьМассивИзJSON(Чтение, НоваяСтрока)
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Возврат
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьМассивИзJSON(Чтение, СтрокаДЗ)
	НоваяСтрока=СтрокаДЗ;
	Строки = СтрокаДЗ.Строки;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Тип="Объект";
			ПрочитатьОбъектИзJSON(Чтение, НоваяСтрока)
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Возврат
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			Продолжить;
			//НоваяСтрока = Строки.Добавить();
			//НоваяСтрока.Свойство = Чтение.ТекущееЗначение;
			//НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Строка Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Null Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Значение = Null;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Число Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Булево Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			НоваяСтрока.Тип="Массив";
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Тип="Массив";
			ПрочитатьМассивИзJSON(Чтение, НоваяСтрока)
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Возврат
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРеквизитыПодключеннойМодели(Объект, ДЗ) Экспорт
	Строки = ДЗ.Строки;
	ЭтоМодель = Ложь; ИмяМодели = "";
	Для Каждого Строка Из Строки Цикл
		Если Строка.Свойство="class_name" И Строка.Значение = "Model" Тогда
			ЭтоМодель = Истина;
		КонецЕсли;
		Если Строка.Свойство="config" И Строка.Тип = "Объект" Тогда
			ИмяМодели = ПеребратьМодельJSON(Объект, Строка);
		КонецЕсли;
	КонецЦикла;
	Если ЭтоМодель Тогда
		Объект.Наименование = ИмяМодели;
		Объект.ИмяМодели = ИмяМодели;
	КонецЕсли;
	Возврат ЭтоМодель;
КонецФункции

&НаСервере
Функция ПеребратьМодельJSON(Объект, Строка)
	Результат = "";
	Строки = Строка.Строки;
	Для Каждого СтрокаДЗ Из Строки Цикл
		Если СтрокаДЗ.Свойство="name" Тогда
			Результат = СтрокаДЗ.Значение;
		ИначеЕсли СтрокаДЗ.Свойство="layers" Тогда
			Слои = ПеребратьМассивJSON(СтрокаДЗ);
			Для Каждого СтруктураСлой Из Слои Цикл
				СтрокаТЧ = Объект.Слои.Добавить();
				СтрокаТЧ.Имя = СтруктураСлой.name;
				СтрокаТЧ.ИмяУникальное = СтруктураСлой.name+"_";
				СтрокаТЧ.ТипСлоя = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыСлоев", СтруктураСлой.class_name);
				СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
				Если ЭтоОболочка(СтрокаТЧ.ИдСлоя) Тогда
					СтрокаТЧ.Положение=3;
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("batch_input_shape") Тогда
					СтрокаТЧ.Форма = ЗаполнитьВходнуюФормуСлояJSON(Объект, СтрокаТЧ.ИмяУникальное, СтруктураСлой.config.batch_input_shape);
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("dtype") Тогда
					СтрокаТЧ.Тип=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", СтруктураСлой.config.dtype);
				КонецЕсли;
				ЗаполнитьВходящиеСлоиСлояJSON(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
				Если СтруктураСлой.config.Свойство("trainable") Тогда
					СтрокаТЧ.Тренируемый = СтруктураСлой.config.trainable;
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("units") Тогда
					Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
					СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.units);
				ИначеЕсли СтруктураСлой.config.Свойство("filters") Тогда
					Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
					СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.filters);
				КонецЕсли;
				Если СтруктураСлой.class_name="Model" Тогда
					
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтрокаДЗ.Свойство="input_layers" Тогда
			ВходящиеСлои = ПеребратьМассивJSON(СтрокаДЗ);
			Для Каждого МассивЗначений Из ВходящиеСлои Цикл
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Объект.Входы.Добавить();
						НоваяСтрока.ИмяСлоя = Значение; 
						Прервать
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли СтрокаДЗ.Свойство="output_layers" Тогда
			ИсходящиеСлои = ПеребратьМассивJSON(СтрокаДЗ);
			Для Каждого МассивЗначений Из ИсходящиеСлои Цикл
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Объект.Выходы.Добавить();
						НоваяСтрока.ИмяСлоя = Значение; 
						Прервать
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВходы Из Объект.Входы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаВыходы Из Объект.Выходы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВыходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЭтоОболочка(ИдСлоя) Экспорт
	//ТипыСлоевОболочки=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(Перечисления.Нейро_ВидыСлоев.LayerWrappers);
	ТипыСлоевОболочки=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.LayerWrappers"));
	
	ЭтоОболочка=Ложь;
	Для Каждого Элемент Из ТипыСлоевОболочки Цикл
		Если ИдСлоя=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ТипыСлоев", Элемент.Значение) Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь
КонецФункции

&НаСервере
Функция ЗаполнитьВходнуюФормуСлояJSON(Объект, ИмяСлоя, МассивЗначений)
	Результат = "";
	Для Каждого Значение Из МассивЗначений Цикл
		Если Результат="" Тогда
			Результат="(";
		Иначе
			Результат=Результат+", ";
		КонецЕсли;
		Если Значение=Null Тогда
			Результат=Результат+"Null"
		Иначе
			Результат=Результат+СтрЗаменить(СокрЛП(Значение), Символы.НПП, "")
		КонецЕсли;
		НоваяСтрока = Объект.Формы.Добавить();
		НоваяСтрока.ИмяСлоя = ИмяСлоя;
		НоваяСтрока.Значение = СтрЗаменить(СокрЛП(Значение), Символы.НПП, "");
	КонецЦикла;
	Если Результат<>"" Тогда
		Результат=Результат+")"
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьВходящиеСлоиСлояJSON(Объект, ИмяСлоя, МассивВходящихСлоев)
	Для Каждого Массив1 Из МассивВходящихСлоев Цикл
		Для Каждого МассивЭлементов Из Массив1 Цикл
			Для Каждого Значение Из МассивЭлементов Цикл
				Если ТипЗнч(Значение)=Тип("Строка") Тогда
					НоваяСтрока = Объект.Входящие.Добавить();
					НоваяСтрока.ИмяИсходящего = Значение;
					НоваяСтрока.ИмяВходящего = ИмяСлоя;
					Прервать
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПеребратьОбъектJSON(Строка) Экспорт
	Результат = Новый Структура;
	Строки = Строка.Строки;
	Сч=0;
	Для Каждого СтрокаДЗ Из Строки Цикл
		Сч=Сч+1; ТекстСч = СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		Если СтрокаДЗ.Тип = "Объект" Тогда
			Результат.Вставить(?(СтрокаДЗ.Свойство="" Или СтрокаДЗ.Свойство=Неопределено,"Нет_"+ТекстСч,СтрокаДЗ.Свойство), ПеребратьОбъектJSON(СтрокаДЗ));
		ИначеЕсли СтрокаДЗ.Тип = "Массив" Тогда
			Результат.Вставить(?(СтрокаДЗ.Свойство="" Или СтрокаДЗ.Свойство=Неопределено,"Нет_"+ТекстСч,СтрокаДЗ.Свойство), ПеребратьМассивJSON(СтрокаДЗ));
		Иначе
			Результат.Вставить(?(СтрокаДЗ.Свойство="" Или СтрокаДЗ.Свойство=Неопределено,"Нет_"+ТекстСч,СтрокаДЗ.Свойство), СтрокаДЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПеребратьМассивJSON(Строка)
	Результат = Новый Массив;
	Строки = Строка.Строки;
	Для Каждого СтрокаДЗ Из Строки Цикл
		Если СтрокаДЗ.Тип = "Объект" Тогда
			Результат.Добавить(ПеребратьОбъектJSON(СтрокаДЗ));
		ИначеЕсли СтрокаДЗ.Тип = "Массив" Тогда
			Результат.Добавить(ПеребратьМассивJSON(СтрокаДЗ));
		Иначе
			Результат.Добавить(СтрокаДЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция НайтиСлойВДеревеПоИмениJSON(СтрокаДЗ, ИмяСлоя) Экспорт
	Для Каждого Элемент Из СтрокаДЗ.Строки Цикл
		Если Элемент.Свойство="config" Тогда
			Для Каждого Элемент1 Из Элемент.Строки Цикл
				Если Элемент1.Свойство="layers" Тогда
					Для Каждого Элемент2 Из Элемент1.Строки Цикл
						Для Каждого Элемент3 Из Элемент2.Строки Цикл
							Если Элемент3.Свойство="name" И Элемент3.Значение=ИмяСлоя Тогда
								Возврат Элемент2;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Прервать
				КонецЕсли;
			КонецЦикла;
			Прервать
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ОбработатьМодельИзСтрокиJSONНаСервере(Текст, ДЗ) Экспорт
	тЧтение = Новый ЧтениеJSON;
	тЧтение.УстановитьСтроку(Текст);
	Пока тЧтение.Прочитать() Цикл
		Если тЧтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			ПрочитатьОбъектИзJSONНаСервере(тЧтение, ДЗ);
		ИначеЕсли тЧтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Продолжить
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ПрочитатьОбъектИзJSONНаСервере(Чтение, СтрокаДЗ)
	НоваяСтрока=СтрокаДЗ;
	Строки = СтрокаДЗ.Строки;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			//НоваяСтрока = СтрокаДЗ.Строки.Добавить();
			НоваяСтрока.Тип="Объект";
			ПрочитатьОбъектИзJSONНаСервере(Чтение, НоваяСтрока)
			//Глубина=Глубина+1; Продолжить
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Возврат
			//Глубина=Глубина-1; Продолжить
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			//Строки = СтрокаДЗ.ПолучитьЭлементы();
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Свойство = Чтение.ТекущееЗначение;
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Строка Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			Если НоваяСтрока.Свойство = "name" И СтрокаДЗ.Тип = "Объект" Тогда
				СтрокаДЗ.Значение = "<"+Чтение.ТекущееЗначение+">";
			КонецЕсли;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Null Тогда
			НоваяСтрока.Значение = Null;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Число Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Булево Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			НоваяСтрока.Тип="Массив";
			//Строки1=НоваяСтрока.ПолучитьЭлементы();
			//НоваяСтрока1 = Строки1.Добавить();
			ПрочитатьМассивИзJSONНаСервере(Чтение, НоваяСтрока)
			//ПрочитатьМассивИзJSONНаСервере(Чтение, НоваяСтрока, СтрокаДЗ.Свойство)
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Возврат
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьМассивИзJSONНаСервере(Чтение, СтрокаДЗ)
	НоваяСтрока=СтрокаДЗ;
	Строки = СтрокаДЗ.Строки;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Тип="Объект";
			ПрочитатьОбъектИзJSONНаСервере(Чтение, НоваяСтрока)
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Возврат
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			Продолжить;
			//НоваяСтрока = Строки.Добавить();
			//НоваяСтрока.Свойство = Чтение.ТекущееЗначение;
			//НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Строка Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Null Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Значение = Null;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Число Тогда
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.Булево Тогда
			НоваяСтрока.Значение = Чтение.ТекущееЗначение;
			НоваяСтрока.Тип = СокрЛП(ТипЗнч(НоваяСтрока.Значение));
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			НоваяСтрока.Тип="Массив";
			НоваяСтрока = Строки.Добавить();
			НоваяСтрока.Тип="Массив";
			//ПрочитатьМассивИзJSONНаСервере(Чтение, НоваяСтрока, СтрокаДЗ.Свойство)
			ПрочитатьМассивИзJSONНаСервере(Чтение, НоваяСтрока)
		ИначеЕсли Чтение.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Возврат
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПеребратьОбъектJSONНаСервере(Строка) Экспорт
	Результат = Новый Структура;
	Строки = Строка.Строки;
	Для Каждого СтрокаДЗ Из Строки Цикл
		Если СтрокаДЗ.Тип = "Объект" Тогда
			Результат.Вставить(СтрокаДЗ.Свойство, ПеребратьОбъектJSONНаСервере(СтрокаДЗ));
		ИначеЕсли СтрокаДЗ.Тип = "Массив" Тогда
			Результат.Вставить(СтрокаДЗ.Свойство, ПеребратьМассивJSONНаСервере(СтрокаДЗ));
		Иначе
			Результат.Вставить(СтрокаДЗ.Свойство, СтрокаДЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПеребратьМассивJSONНаСервере(Строка)
	Результат = Новый Массив;
	Строки = Строка.Строки;
	Для Каждого СтрокаДЗ Из Строки Цикл
		Если СтрокаДЗ.Тип = "Объект" Тогда
			Результат.Добавить(ПеребратьОбъектJSONНаСервере(СтрокаДЗ));
		ИначеЕсли СтрокаДЗ.Тип = "Массив" Тогда
			Результат.Добавить(ПеребратьМассивJSONНаСервере(СтрокаДЗ));
		Иначе
			Результат.Добавить(СтрокаДЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПеребратьМодельИзСтруктурыJSONНаСервере(Объект, СтруктураМодели) Экспорт
	Результат = "";
	
	Для Каждого КлючИЗначение Из СтруктураМодели Цикл
		Если КлючИЗначение.Ключ="name" Тогда
			Результат = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ="layers" Тогда
			Для Каждого СтруктураСлой Из КлючИЗначение.Значение Цикл
				СтрокаТЧ = ЗаполнитьСлойНаСервере(Объект, СтруктураСлой);
				ЗаполнитьВходящиеСлоиСлояJSONНаСервере(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
				Объект.Слои.Добавить(СтрокаТЧ);
			КонецЦикла;
		ИначеЕсли КлючИЗначение.Ключ="input_layers" Тогда
			Для Каждого МассивЗначений Из КлючИЗначение.Значение Цикл
				МассивП = Новый Массив;
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Новый Структура("ИмяСлоя");
						НоваяСтрока.ИмяСлоя = Значение; 
					Иначе
						МассивП.Добавить(Значение);
					КонецЕсли;
				КонецЦикла;
				Если МассивЗначений.Количество()>0 Тогда
					Объект.Входы.Добавить(Новый Структура("ИмяСлоя, Параметры",НоваяСтрока.ИмяСлоя,МассивП));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли КлючИЗначение.Ключ="output_layers" Тогда
			Для Каждого МассивЗначений Из КлючИЗначение.Значение Цикл
				МассивП = Новый Массив;
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						//НоваяСтрока = Объект.Выходы.Добавить();
						НоваяСтрока = Новый Структура("ИмяСлоя");
						НоваяСтрока.ИмяСлоя = Значение; 
						//Объект.Выходы.Добавить(НоваяСтрока);
						//Прервать
					Иначе
						МассивП.Добавить(Значение);
					КонецЕсли;
				КонецЦикла;
				Если МассивЗначений.Количество()>0 Тогда
					Объект.Выходы.Добавить(Новый Структура("ИмяСлоя, Параметры",НоваяСтрока.ИмяСлоя,МассивП));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВходы Из Объект.Входы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаВыходы Из Объект.Выходы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВыходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСлойНаСервере(Объект, СтруктураСлой)
	Если СтруктураСлой.class_name="Model" Тогда
		Объект2=Новый Структура("Слои, Входы, Выходы, Формы, Входящие");
		Объект2.Слои     = Новый Массив;
		Объект2.Входы    = Новый Массив;
		Объект2.Выходы   = Новый Массив;
		Объект2.Формы    = Новый Массив;
		Объект2.Входящие = Новый Массив;
		
		СтрокаТЧ=Новый Структура("Имя, ТипСлоя, ИдСлоя, Тренируемый, Форма, Тип, Положение, Параметры");
		СтрокаТЧ.Форма = Новый Массив;
		//СтрокаТЧ.Параметры = Новый Структура;
		СтрокаТЧ.Имя = СтруктураСлой.name;
		СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
		
		//Для Каждого КлючИЗначениеСлоя Из СтруктураСлой.config Цикл
		//	СтрокаТЧ.Параметры.Вставить(КлючИЗначениеСлоя.Ключ, КлючИЗначениеСлоя.Значение);
		//КонецЦикла;
		СтрокаТЧ.Вставить("Параметры", Объект2);
		
		//Объект.Слои.Добавить(СтрокаТЧ);
		Рез2=ПеребратьМодельИзСтруктурыJSONНаСервере(Объект2, СтруктураСлой.config);
		//Продолжить
		
		Возврат СтрокаТЧ;
	Иначе
		ТипыСлоевОболочки=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(Перечисления.Нейро_ВидыСлоев.LayerWrappers);
		ЭтоОболочка=Ложь;
		Для Каждого Элемент Из ТипыСлоевОболочки Цикл
			Если СтруктураСлой.class_name=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ТипыСлоев", Элемент.Значение) Тогда
				ЭтоОболочка=Истина; Прервать
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоОболочка Тогда
			ВложенныйСлой = ЗаполнитьСлойНаСервере(Объект, СтруктураСлой.config.layer);
			Объект.Слои.Добавить(ВложенныйСлой);
		КонецЕсли;
		
		//СтрокаТЧ = Объект.Слои.Добавить();
		СтрокаТЧ=Новый Структура("Имя, ТипСлоя, ИдСлоя, Тренируемый, Форма, Тип, Положение, Параметры");
		СтрокаТЧ.Форма = Новый Массив;
		СтрокаТЧ.Параметры = Новый Структура;
		Попытка
			СтрокаТЧ.Имя = СтруктураСлой.name;
		Исключение
			СтрокаТЧ.Имя = СтруктураСлой.config.name;
		КонецПопытки;
		//СтрокаТЧ.ИмяУникальное = СтруктураСлой.name+"_";
		СтрокаТЧ.ТипСлоя = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыСлоев", СтруктураСлой.class_name); //Создавать новый слой если не найден
		СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
		Если СтруктураСлой.config.Свойство("batch_input_shape") Тогда
			СтрокаТЧ.Форма = ЗаполнитьВходнуюФормуСлояJSONНаСервере(Объект, СтрокаТЧ.Имя, СтруктураСлой.config.batch_input_shape);
		КонецЕсли;
		Если СтруктураСлой.config.Свойство("dtype") Тогда
			СтрокаТЧ.Тип=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", СтруктураСлой.config.dtype);
		КонецЕсли;
		//ЗаполнитьВходящиеСлоиСлояJSONНаСервере(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
		Если СтруктураСлой.config.Свойство("trainable") Тогда
			СтрокаТЧ.Тренируемый = СтруктураСлой.config.trainable;
		КонецЕсли;
		Если СтруктураСлой.config.Свойство("units") Тогда
			СтрокаТЧ.Форма.Добавить(СтруктураСлой.config.units);
			//Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
			//СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.units);
		КонецЕсли;
		
		Для Каждого КлючИЗначениеСлоя Из СтруктураСлой.config Цикл
			//Если КлючИЗначениеСлоя.Ключ="batch_input_shape" Или КлючИЗначениеСлоя.Ключ="dtype" Или КлючИЗначениеСлоя.Ключ="trainable" Или КлючИЗначениеСлоя.Ключ="units" Тогда
			//	Продолжить
			//КонецЕсли;
			Если КлючИЗначениеСлоя.Ключ="trainable" Или КлючИЗначениеСлоя.Ключ="name" Тогда
				Продолжить
			ИначеЕсли КлючИЗначениеСлоя.Ключ="layer" И ЭтоОболочка Тогда
				СтрокаТЧ.Параметры.Вставить(КлючИЗначениеСлоя.Ключ, ВложенныйСлой);
				Продолжить
			КонецЕсли;
			Если КлючИЗначениеСлоя.Значение=Null Тогда Продолжить КонецЕсли;
			НовоеЗначение = ЗаполнитьЗначениеПараметраПоЗначениюKerasНаСервере(СтрокаТЧ.ТипСлоя, СтруктураСлой.class_name, КлючИЗначениеСлоя);
			Если НовоеЗначение=Неопределено Тогда
				СтрокаТЧ.Параметры.Вставить(КлючИЗначениеСлоя.Ключ, КлючИЗначениеСлоя.Значение);
			ИначеЕсли НовоеЗначение<>Null Тогда
				СтрокаТЧ.Параметры.Вставить(КлючИЗначениеСлоя.Ключ, НовоеЗначение);
			КонецЕсли;
		КонецЦикла;
		Возврат СтрокаТЧ
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПеребратьМодельИзСтруктурыJSONНаСервере0(Объект, СтруктураМодели) Экспорт
	Результат = "";
	
	Для Каждого КлючИЗначение Из СтруктураМодели Цикл
		Если КлючИЗначение.Ключ="name" Тогда
			Результат = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ="layers" Тогда
			Для Каждого СтруктураСлой Из КлючИЗначение.Значение Цикл
				Если СтруктураСлой.class_name="Model" Тогда
					Объект2=Новый Структура("Слои, Входы, Выходы, Формы, Входящие");
					Объект2.Слои     = Новый Массив;
					Объект2.Входы    = Новый Массив;
					Объект2.Выходы   = Новый Массив;
					Объект2.Формы    = Новый Массив;
					Объект2.Входящие = Новый Массив;
					
					СтрокаТЧ=Новый Структура("Имя, ТипСлоя, ИдСлоя, Тренируемый, Форма, Тип, Положение, Параметры");
					СтрокаТЧ.Форма = Новый Массив;
					//СтрокаТЧ.Параметры = Новый Структура;
					СтрокаТЧ.Имя = СтруктураСлой.name;
					СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
					
					//Для Каждого КлючИЗначениеСлоя Из СтруктураСлой.config Цикл
					//	СтрокаТЧ.Параметры.Вставить(КлючИЗначениеСлоя.Ключ, КлючИЗначениеСлоя.Значение);
					//КонецЦикла;
					СтрокаТЧ.Вставить("Параметры", Объект2);
					
					//Объект.Слои.Добавить(СтрокаТЧ);
					Рез2=ПеребратьМодельИзСтруктурыJSONНаСервере(Объект2, СтруктураСлой.config);
					//Продолжить
				Иначе
					ТипыСлоевОболочки=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(Перечисления.Нейро_ВидыСлоев.LayerWrappers);
					ЭтоОболочка=Ложь;
					Для Каждого Элемент Из ТипыСлоевОболочки Цикл
						Если СтруктураСлой.class_name=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ТипыСлоев", Элемент.Значение) Тогда
							ЭтоОболочка=Истина; Прервать
						КонецЕсли;
					КонецЦикла;
					
					Если ЭтоОболочка Тогда
						
					КонецЕсли;
					
					//СтрокаТЧ = Объект.Слои.Добавить();
					СтрокаТЧ=Новый Структура("Имя, ТипСлоя, ИдСлоя, Тренируемый, Форма, Тип, Положение, Параметры");
					СтрокаТЧ.Форма = Новый Массив;
					СтрокаТЧ.Параметры = Новый Структура;
					СтрокаТЧ.Имя = СтруктураСлой.name;
					//СтрокаТЧ.ИмяУникальное = СтруктураСлой.name+"_";
					СтрокаТЧ.ТипСлоя = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыСлоев", СтруктураСлой.class_name); //Создавать новый слой если не найден
					СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
					Если СтруктураСлой.config.Свойство("batch_input_shape") Тогда
						СтрокаТЧ.Форма = ЗаполнитьВходнуюФормуСлояJSONНаСервере(Объект, СтрокаТЧ.Имя, СтруктураСлой.config.batch_input_shape);
					КонецЕсли;
					Если СтруктураСлой.config.Свойство("dtype") Тогда
						СтрокаТЧ.Тип=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", СтруктураСлой.config.dtype);
					КонецЕсли;
					//ЗаполнитьВходящиеСлоиСлояJSONНаСервере(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
					Если СтруктураСлой.config.Свойство("trainable") Тогда
						СтрокаТЧ.Тренируемый = СтруктураСлой.config.trainable;
					КонецЕсли;
					Если СтруктураСлой.config.Свойство("units") Тогда
						СтрокаТЧ.Форма.Добавить(СтруктураСлой.config.units);
						//Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
						//СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.units);
					КонецЕсли;
					
					Для Каждого КлючИЗначениеСлоя Из СтруктураСлой.config Цикл
						//Если КлючИЗначениеСлоя.Ключ="batch_input_shape" Или КлючИЗначениеСлоя.Ключ="dtype" Или КлючИЗначениеСлоя.Ключ="trainable" Или КлючИЗначениеСлоя.Ключ="units" Тогда
						//	Продолжить
						//КонецЕсли;
						Если КлючИЗначениеСлоя.Ключ="trainable" Или КлючИЗначениеСлоя.Ключ="name" Тогда
							Продолжить
						КонецЕсли;
						Если КлючИЗначениеСлоя.Значение=Null Тогда Продолжить КонецЕсли;
						НовоеЗначение = ЗаполнитьЗначениеПараметраПоЗначениюKerasНаСервере(СтрокаТЧ.ТипСлоя, СтруктураСлой.class_name, КлючИЗначениеСлоя);
						Если НовоеЗначение=Неопределено Тогда
							СтрокаТЧ.Параметры.Вставить(КлючИЗначениеСлоя.Ключ, КлючИЗначениеСлоя.Значение);
						ИначеЕсли НовоеЗначение<>Null Тогда
							СтрокаТЧ.Параметры.Вставить(КлючИЗначениеСлоя.Ключ, НовоеЗначение);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				ЗаполнитьВходящиеСлоиСлояJSONНаСервере(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
				Объект.Слои.Добавить(СтрокаТЧ);
			КонецЦикла;
		ИначеЕсли КлючИЗначение.Ключ="input_layers" Тогда
			Для Каждого МассивЗначений Из КлючИЗначение.Значение Цикл
				МассивП = Новый Массив;
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Новый Структура("ИмяСлоя");
						НоваяСтрока.ИмяСлоя = Значение; 
					Иначе
						МассивП.Добавить(Значение);
					КонецЕсли;
				КонецЦикла;
				Если МассивЗначений.Количество()>0 Тогда
					Объект.Входы.Добавить(Новый Структура("ИмяСлоя, Параметры",НоваяСтрока.ИмяСлоя,МассивП));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли КлючИЗначение.Ключ="output_layers" Тогда
			Для Каждого МассивЗначений Из КлючИЗначение.Значение Цикл
				МассивП = Новый Массив;
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						//НоваяСтрока = Объект.Выходы.Добавить();
						НоваяСтрока = Новый Структура("ИмяСлоя");
						НоваяСтрока.ИмяСлоя = Значение; 
						//Объект.Выходы.Добавить(НоваяСтрока);
						//Прервать
					Иначе
						МассивП.Добавить(Значение);
					КонецЕсли;
				КонецЦикла;
				Если МассивЗначений.Количество()>0 Тогда
					Объект.Выходы.Добавить(Новый Структура("ИмяСлоя, Параметры",НоваяСтрока.ИмяСлоя,МассивП));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВходы Из Объект.Входы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаВыходы Из Объект.Выходы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВыходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьВходнуюФормуСлояJSONНаСервере(Объект, ИмяСлоя, МассивЗначений)
	Результат = "";
	Для Каждого Значение Из МассивЗначений Цикл
		Если Результат="" Тогда
			Результат="(";
		Иначе
			Результат=Результат+", ";
		КонецЕсли;
		Если Значение=Null Тогда
			Результат=Результат+"Null"
		Иначе
			Результат=Результат+СтрЗаменить(СокрЛП(Значение), Символы.НПП, "")
		КонецЕсли;
		НоваяСтрока = Новый Структура("ИмяСлоя, Значение");
		//НоваяСтрока = Объект.Формы.Добавить();
		НоваяСтрока.ИмяСлоя = ИмяСлоя;
		//НоваяСтрока.Значение = СтрЗаменить(СокрЛП(Значение), Символы.НПП, "");
		НоваяСтрока.Значение = Значение;
		ОшибкаМассива=Ложь;
		Попытка
			Объект.Формы.Добавить(НоваяСтрока);
		Исключение
			ОшибкаМассива=Истина
		КонецПопытки;
		Если ОшибкаМассива Тогда
			НоваяСтрока = Объект.Формы.Добавить();
			НоваяСтрока.ИмяСлоя = ИмяСлоя;
			НоваяСтрока.Значение = СтрЗаменить(СокрЛП(Значение), Символы.НПП, "");
		КонецЕсли;
	КонецЦикла;
	Если Результат<>"" Тогда
		Результат=Результат+")"
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьВходящиеСлоиСлояJSONНаСервере(Объект, ИмяСлоя, МассивВходящихСлоев)
	Для Каждого Массив1 Из МассивВходящихСлоев Цикл
		Для Каждого МассивЭлементов Из Массив1 Цикл
			Для Каждого Значение Из МассивЭлементов Цикл
				Если ТипЗнч(Значение)=Тип("Строка") Тогда
					//НоваяСтрока = Объект.Входящие.Добавить();
					НоваяСтрока = Новый Структура("ИмяИсходящего, ИмяВходящего");
					НоваяСтрока.ИмяИсходящего = Значение;
					НоваяСтрока.ИмяВходящего = ИмяСлоя;
					ОшибкаМассива=Ложь;
					Попытка
						Объект.Входящие.Добавить(НоваяСтрока);
					Исключение
						ОшибкаМассива=Истина
					КонецПопытки;
					Если ОшибкаМассива Тогда
						НоваяСтрока = Объект.Входящие.Добавить();
						НоваяСтрока.ИмяИсходящего = Значение;
						НоваяСтрока.ИмяВходящего = ИмяСлоя;
					КонецЕсли;
					Прервать
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗначениеПараметраПоЗначениюKerasНаСервере(ТипСлоя, ИмяКласса, КлючИЗначение)
	ПараметрыСлоя = Нейро_ОбщийМодуль.ПолучитьПараметрыСлоя(ТипСлоя);
	Параметр = Неопределено;
	Для Каждого ПараметрСлоя Из ПараметрыСлоя Цикл
		Если ПараметрСлоя.Анг = КлючИЗначение.Ключ Тогда
			Параметр=ПараметрСлоя; Прервать
		КонецЕсли;
	КонецЦикла;
	
	//Значение = КлючИЗначение.Значение;
	Если Параметр<>Неопределено Тогда
		Значение = ПривестиКЗначениюТипаНаСервере(Параметр.Тип, КлючИЗначение);
		Если Значение=Неопределено Тогда Возврат Значение КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

&НаСервере
Функция ПрочитатьЗаписатьJSONНаСервере(СтрокаJSON) Экспорт
	Источник = Новый ЧтениеJSON;
	Источник.УстановитьСтроку(СтрокаJSON);
	Приемник = Новый ЗаписьJSON;
	Приемник.УстановитьСтроку();
	
	ВыполнитьЧтениеЗаписьJSONНаСервере(Приемник, Источник);
	Возврат Приемник.Закрыть();	
КонецФункции

&НаСервере
Процедура ВыполнитьЧтениеЗаписьJSONНаСервере(Приемник, Источник)
	Пока Источник.Прочитать() Цикл
		Если Источник.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта Тогда
			Приемник.ЗаписатьНачалоОбъекта();
			ВыполнитьЧтениеЗаписьJSONНаСервере(Приемник, Источник)
		ИначеЕсли Источник.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта Тогда
			Приемник.ЗаписатьКонецОбъекта();
			Возврат
		ИначеЕсли Источник.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			Приемник.ЗаписатьИмяСвойства(Источник.ТекущееЗначение);
		ИначеЕсли Источник.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			Приемник.ЗаписатьНачалоМассива();
			ВыполнитьЧтениеЗаписьJSONНаСервере(Приемник, Источник)
		ИначеЕсли Источник.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Приемник.ЗаписатьКонецМассива();
			Возврат
		Иначе
			Приемник.ЗаписатьЗначение(Источник.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьСтрокуJSONИзДереваНаСервере(ДЗ) Экспорт
	Приемник = Новый ЗаписьJSON;
	Приемник.УстановитьСтроку();
	Приемник.ЗаписатьНачалоОбъекта();
	ВыполнитьПереборДереваJSONНаСервере(Приемник, ДЗ.Строки);
	Приемник.ЗаписатьКонецОбъекта();
	Возврат Приемник.Закрыть();	
КонецФункции

&НаСервере
Процедура ВыполнитьПереборДереваJSONНаСервере(Приемник, Строки)
	Для Каждого Строка Из Строки Цикл
		Если Строка.Тип="Объект" Тогда
			Если Строка.Свойство<>"" И Строка.Свойство<>Неопределено Тогда
				Приемник.ЗаписатьИмяСвойства(Строка.Свойство);
			КонецЕсли;
			Приемник.ЗаписатьНачалоОбъекта();
			ВыполнитьПереборДереваJSONНаСервере(Приемник, Строка.Строки);
			Приемник.ЗаписатьКонецОбъекта();
		ИначеЕсли Строка.Тип="Массив" Тогда
			Если Строка.Свойство<>"" И Строка.Свойство<>Неопределено Тогда
				Приемник.ЗаписатьИмяСвойства(Строка.Свойство);
			КонецЕсли;
			Приемник.ЗаписатьНачалоМассива();
			ВыполнитьПереборДереваJSONНаСервере(Приемник, Строка.Строки);
			Приемник.ЗаписатьКонецМассива();
		Иначе
			Если Строка.Свойство<>"" И Строка.Свойство<>Неопределено Тогда
				Приемник.ЗаписатьИмяСвойства(Строка.Свойство);
			КонецЕсли;
			Попытка
				Приемник.ЗаписатьЗначение(?(Строка.Значение=Null,Неопределено,Строка.Значение));
			Исключение
				яяя=ТипЗнч(Строка.Значение);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция НайтиТекущийСлойВДеревеНаСервере(ДЗ, Путь, ИмяСлоя, ИмяСвойства) Экспорт
	Слои=Неопределено;
	Для Каждого СтрокаДЗ Из ДЗ.Строки Цикл
		Если СтрокаДЗ.Свойство="config" Тогда
			Для Каждого СтрокаДЗ1 Из СтрокаДЗ.Строки Цикл
				Если СтрокаДЗ1.Свойство="layers" Тогда
					Слои=СтрокаДЗ1; Прервать
				КонецЕсли;
			КонецЦикла;
			Прервать
		КонецЕсли;
	КонецЦикла;
	Если Слои=Неопределено Тогда Возврат Неопределено КонецЕсли;
	МассивПуть=СтрРазделить(Путь,"/",Ложь);
	Если МассивПуть.Количество()=0 Тогда
		ПродолжитьПоиск=Ложь; Искать = ИмяСлоя
	Иначе
		ПродолжитьПоиск=Истина; Искать = МассивПуть[0];
	КонецЕсли;
	
	Найдено=Ложь; ИскомаяСтрока=Неопределено;
	Для Каждого Слой Из Слои.Строки Цикл
		Для Каждого Слой1 Из Слой.Строки Цикл
			Если Слой1.Свойство="config" Тогда
				ИскомаяСтрока=Слой1;
			ИначеЕсли Слой1.Свойство="name" И Слой1.Значение=Искать Тогда
				Найдено=Истина;
			КонецЕсли;
		КонецЦикла;
		Если Найдено Тогда Прервать КонецЕсли;
	КонецЦикла;
	Если Не Найдено Тогда
		ВызватьИсключение("Слой не найден: "+Искать);
	КонецЕсли;
	
	Для Каждого Строка Из ИскомаяСтрока.Строки Цикл
		Если ПродолжитьПоиск Тогда
			Если Строка.Свойство="layers" Тогда
				Возврат ПродолжитьПоискСлояВДеревеНаСервере(Строка.Строки, Путь, ИмяСлоя, 1, ИмяСвойства)
			ИначеЕсли Строка.Свойство="layer" Тогда
				Возврат Строка
			КонецЕсли;
		Иначе
			Если Строка.Свойство=ИмяСвойства Тогда
				Возврат Строка
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПродолжитьПоиск Тогда
		ВызватьИсключение("Отсутствуют слои в: "+Искать);
	Иначе
		ВызватьИсключение("Свойство не найдено: "+ИмяСвойства);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПродолжитьПоискСлояВДеревеНаСервере(Строки, Путь, ИмяСлоя, Индекс, ИмяСвойства)
	МассивПуть=СтрРазделить(Путь,"/",Ложь);
	Если МассивПуть.Количество()=0 Тогда
		ПродолжитьПоиск=Ложь; Искать = ИмяСлоя
	Иначе
		Если Индекс>МассивПуть.Количество()-1 Тогда
			ПродолжитьПоиск=Ложь; Искать = ИмяСлоя
		Иначе
			ПродолжитьПоиск=Истина; Искать = МассивПуть[Индекс];
		КонецЕсли;
	КонецЕсли;
	
	Найдено=Ложь; ИскомаяСтрока=Неопределено;
	Для Каждого СтрокаОбъект Из Строки Цикл
		Для Каждого Строка Из СтрокаОбъект.Строки Цикл
			Если Строка.Свойство="config" Тогда
				ИскомаяСтрока=Строка;
			ИначеЕсли Строка.Свойство="name" И Строка.Значение=Искать Тогда
				Найдено=Истина
			КонецЕсли;
		КонецЦикла;
		Если Найдено Тогда Прервать КонецЕсли;
	КонецЦикла;
	
	Если НЕ Найдено Тогда
		ВызватьИсключение("Слой не найден: "+Искать);
	КонецЕсли;
	
	Для Каждого Строка Из ИскомаяСтрока.Строки Цикл
		Если ПродолжитьПоиск Тогда
			Если Строка.Свойство="layers" Тогда
				Возврат ПродолжитьПоискСлояВДеревеНаСервере(Строка.Строки, Путь, ИмяСлоя, Индекс+1, ИмяСвойства)
			ИначеЕсли Строка.Свойство="layer" Тогда
				Возврат Строка
			КонецЕсли;
		Иначе
			Если Строка.Свойство=ИмяСвойства Тогда
				Возврат Строка
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПродолжитьПоиск Тогда
		ВызватьИсключение("Отсутствуют слои в: "+Искать);
	Иначе
		ВызватьИсключение("Свойство не найдено: "+ИмяСвойства);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПродолжитьПоискСвойстваВложенногоСлояНаСервере(Строки, ИмяСвойства) Экспорт
	Для Каждого СтрокаКофиг Из Строки Цикл
		Если СтрокаКофиг.Свойство = "config" Тогда 
			Для Каждого СтрокаДЗ Из СтрокаКофиг.Строки Цикл
				Если СтрокаДЗ.Свойство = ИмяСвойства Тогда Возврат СтрокаДЗ КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ВызватьИсключение("Свойство не найдено: "+ИмяСвойства);
КонецФункции

Функция НайтиСтрокуИмяМоделиНаСервере(ДЗ) Экспорт
	Для Каждого СтрокаДЗ Из ДЗ.Строки Цикл
		Если СтрокаДЗ.Свойство="config" Тогда
			Для Каждого СтрокаДЗ1 Из СтрокаДЗ.Строки Цикл
				Если СтрокаДЗ1.Свойство="name" Тогда
					Возврат СтрокаДЗ1;
				КонецЕсли;
			КонецЦикла;
			Прервать
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено
КонецФункции

#КонецОбласти

&НаСервере
Функция ПривестиКЗначениюТипаНаСервере(ТипЗначения, КлючИЗначение) Экспорт
	Если ТипЗначения=Перечисления.Нейро_Типы.Строка Тогда
		Возврат КлючИЗначение.Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Целое Тогда
		Возврат КлючИЗначение.Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Вещественное Тогда
		Возврат КлючИЗначение.Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Булево Тогда
		Возврат КлючИЗначение.Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.ФункцияАктивации Тогда
		Если ТипЗнч(КлючИЗначение.Значение)=Тип("Строка") Тогда
			Значение = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ФункцииАктивации", КлючИЗначение.Значение);
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение)=Тип("Структура") Тогда
			Значение = ОбработатьОбъектKerasНаСервере(ТипЗначения, "Нейро_ФункцииАктивации", КлючИЗначение.Значение);
		Иначе
			Возврат Неопределено
		КонецЕсли;
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Инициализатор Тогда
		Если ТипЗнч(КлючИЗначение.Значение)=Тип("Строка") Тогда
			Значение = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Инициализаторы", КлючИЗначение.Значение);
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение)=Тип("Структура") Тогда
			Значение = ОбработатьОбъектKerasНаСервере(ТипЗначения, "Нейро_Инициализаторы", КлючИЗначение.Значение);
		Иначе
			Возврат Неопределено
		КонецЕсли;
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Регуляризатор Тогда
		Если ТипЗнч(КлючИЗначение.Значение)=Тип("Строка") Тогда
			Значение = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Регуляризаторы", КлючИЗначение.Значение);
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение)=Тип("Структура") Тогда
			Значение = ОбработатьОбъектKerasНаСервере(ТипЗначения, "Нейро_Регуляризаторы", КлючИЗначение.Значение);
		Иначе
			Возврат Неопределено
		КонецЕсли;
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Ограничитель Тогда
		Если ТипЗнч(КлючИЗначение.Значение)=Тип("Строка") Тогда
			Значение = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Ограничители", КлючИЗначение.Значение);
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение)=Тип("Структура") Тогда
			Значение = ОбработатьОбъектKerasНаСервере(ТипЗначения, "Нейро_Ограничители", КлючИЗначение.Значение);
		Иначе
			Возврат Неопределено
		КонецЕсли;
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Массив Тогда
		Возврат НайтиСоздатьНейро_Массив(КлючИЗначение.Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.ПорядокКаналов Тогда              // ПорядокКаналов
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ПорядокКаналов", КлючИЗначение.Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.VarianceScaling_Распределение Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_VarianceScaling_Распределение", КлючИЗначение.Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.VarianceScaling_Режим Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_VarianceScaling_Режим", КлючИЗначение.Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.ТипNumPy Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", КлючИЗначение.Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Заполнение Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Padding", КлючИЗначение.Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.ЗаполнениеСокр Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_PaddingS", КлючИЗначение.Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Апскейлинг Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Upscaling", КлючИЗначение.Значение);
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция НайтиСоздатьНейро_Массив(Значение, ТипСписка=Неопределено, Нейро_Тип=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Нейро_МассивыЭлементыСписка.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА Нейро_МассивыЭлементыСписка.Значение В (&Значения)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Значение
	|ИЗ
	|	Справочник.Нейро_Массивы.ЭлементыСписка КАК Нейро_МассивыЭлементыСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Нейро_МассивыЭлементыСписка.Ссылка КАК Ссылка,
	|			КОЛИЧЕСТВО(Нейро_МассивыЭлементыСписка.Значение) КАК Значение
	|		ИЗ
	|			Справочник.Нейро_Массивы.ЭлементыСписка КАК Нейро_МассивыЭлементыСписка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Нейро_МассивыЭлементыСписка.Ссылка
	|		
	|		ИМЕЮЩИЕ
	|			КОЛИЧЕСТВО(Нейро_МассивыЭлементыСписка.Значение) = &Количество) КАК ВложенныйЗапрос
	|		ПО Нейро_МассивыЭлементыСписка.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипСписка = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Нейро_МассивыЭлементыСписка.Ссылка.ТипСписка = &ТипСписка
	|		КОНЕЦ
	|	И Нейро_МассивыЭлементыСписка.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Нейро_МассивыЭлементыСписка.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Нейро_МассивыЭлементыСписка.Значение В (&Значения)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) = &Количество";
	МассивЗначений=Новый Массив;
	Для Каждого Элемент Из Значение Цикл
		Если Элемент=Null Тогда
			МассивЗначений.Добавить(Неопределено)
		Иначе
			МассивЗначений.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("Значения", МассивЗначений);
	Запрос.УстановитьПараметр("Количество", Значение.Количество());
	Запрос.УстановитьПараметр("ТипСписка", ТипСписка);
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Совпадение=Истина; НеДумаю=Ложь;
		Для Сч=0 По Выборка.Ссылка.ЭлементыСписка.Количество()-1 Цикл
			Элемент = Выборка.Ссылка.ЭлементыСписка[Сч];
			Если Элемент.Значение<>МассивЗначений[Сч] Тогда
				Совпадение=НеДумаю; Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Совпадение<>НеДумаю Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
	КонецЦикла;
	НовыйМассив = Справочники.Нейро_Массивы.СоздатьЭлемент();
	НовыйМассив.ТипСписка = ТипСписка;
	Для Сч=0 По МассивЗначений.Количество()-1 Цикл
		Элемент = МассивЗначений[Сч];
		СтрокаТЧ = НовыйМассив.ЭлементыСписка.Добавить();
		Если Нейро_Тип=Неопределено Тогда
			СтрокаТЧ.Значение=Элемент;
			Если ТипЗнч(Элемент)=Тип("Число") Тогда
				Если Окр(Элемент)=Элемент Тогда
					СтрокаТЧ.Тип=Перечисления.Нейро_Типы.Целое
				Иначе
					СтрокаТЧ.Тип=Перечисления.Нейро_Типы.Вещественное
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент)=Тип("Строка") Тогда
				СтрокаТЧ.Тип=Перечисления.Нейро_Типы.Строка
			КонецЕсли;
		Иначе
			СтрокаТЧ.Тип=Нейро_Тип;
			СтрокаТЧ.Значение=ПривестиКЗначениюТипаНаСервере(Нейро_Тип, Новый Структура("Ключ, Значение","",Элемент));
		КонецЕсли;
		Если Элемент=Неопределено Тогда
			СтрокаТЧ.Тип=Перечисления.Нейро_Типы.Неопределено
		КонецЕсли;
	КонецЦикла;
	НовыйМассив.Наименование="??? "+СформироватьНаименованиеМассива(НовыйМассив);
	НовыйМассив.Записать();
	Возврат НовыйМассив.Ссылка;
КонецФункции

&НаСервере
Функция СформироватьНаименованиеМассива(Объект)
	Скобки = ТекстЛитералаСкобок(Объект);
	Наименование="";
	Если Объект.ЭлементыСписка.Количество()=0 Тогда 
		Возврат Наименование
	КонецЕсли;
	Наименование=Скобки.Левая;
	Для Каждого Элемент Из Объект.ЭлементыСписка Цикл
		Если Элемент.Тип = ПредопределенноеЗначение("Перечисление.Нейро_Типы.Неопределено") Тогда
			Наименование = Наименование + "None";
		ИначеЕсли Объект.ТипСписка = ПредопределенноеЗначение("Перечисление.Нейро_ТипыСписков.Словарь") Тогда
			Наименование = Наименование + "'" +Элемент.Ключ+ "': " + СокрЛП(Элемент.Значение);
		Иначе
			Наименование = Наименование + СокрЛП(Элемент.Значение);
		КонецЕсли;
		Наименование = Наименование + ", ";
	КонецЦикла;
	Наименование=СокрП(Наименование);
	Если Прав(Наименование,1)="," Тогда
		Наименование=Лев(Наименование,СтрДлина(Наименование)-1);
	КонецЕсли;
	Наименование=Наименование+Скобки.Правая;
	Возврат Наименование;
КонецФункции

&НаСервере
Функция ТекстЛитералаСкобок(Объект)
	Если Объект.ТипСписка=ПредопределенноеЗначение("Перечисление.Нейро_ТипыСписков.Список") Тогда
		Возврат Новый Структура("Левая, Правая", "[", "]");
	ИначеЕсли Объект.ТипСписка=ПредопределенноеЗначение("Перечисление.Нейро_ТипыСписков.Кортеж") Тогда
		Возврат Новый Структура("Левая, Правая", "(", ")");
	ИначеЕсли Объект.ТипСписка=ПредопределенноеЗначение("Перечисление.Нейро_ТипыСписков.Словарь") Тогда
		Возврат Новый Структура("Левая, Правая", "{", "}");
	Иначе
		Возврат Новый Структура("Левая, Правая", "", "");
	КонецЕсли;
КонецФункции

&НаСервере
Функция НайтиСоздатьНейро_Функцию(Тип, Значение, СтруктураПараметров) Экспорт
	МассивЗначений = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Если КлючИЗначение.Значение=Null Тогда
			МассивЗначений.Добавить(Неопределено)
		Иначе
			МассивЗначений.Добавить(КлючИЗначение.Значение)
		КонецЕсли;
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Если МассивЗначений.Количество()=0 Тогда
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Нейро_Функции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Нейро_Функции КАК Нейро_Функции
		|ГДЕ
		|	Нейро_Функции.Тип = &Тип
		|	И Нейро_Функции.Значение = &Значение
		|	И Нейро_Функции.ПометкаУдаления = ЛОЖЬ";
	Иначе
		Запрос=Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Нейро_ФункцииПараметры.Ссылка КАК Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА Нейро_ФункцииПараметры.Значение В (&Значения)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЗначений
		|ИЗ
		|	Справочник.Нейро_Функции.Параметры КАК Нейро_ФункцииПараметры
		|ГДЕ
		|	Нейро_ФункцииПараметры.Ссылка.Тип = &Тип
		|	И Нейро_ФункцииПараметры.Ссылка.Значение = &Значение
		|	И Нейро_ФункцииПараметры.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	Нейро_ФункцииПараметры.Ссылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА Нейро_ФункцииПараметры.Значение В (&Значения)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) = &КоличествоПараметров";
	КонецЕсли;
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("Значение", Значение);
	Запрос.УстановитьПараметр("Значения", МассивЗначений);
	Запрос.УстановитьПараметр("КоличествоПараметров", МассивЗначений.Количество());
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Совпадение=Истина; НеДумаю=Ложь;
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			Отбор=Новый Структура("Ид",КлючИЗначение.Ключ);
			Строки = Выборка.Ссылка.Параметры.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда Совпадение=НеДумаю; Прервать КонецЕсли;
			ЗначениеКлюча=?(КлючИЗначение.Значение=Null,Неопределено,КлючИЗначение.Значение);
			Если Строки[0].Значение<>ЗначениеКлюча Тогда Совпадение=НеДумаю; Прервать КонецЕсли;
		КонецЦикла;
		Если Совпадение<>НеДумаю Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
	КонецЦикла;
	НоваяФункция = Справочники.Нейро_Функции.СоздатьЭлемент();
	НоваяФункция.Тип = Тип;
	НоваяФункция.Значение=Значение;
	ОписаниеПараметра = ПолучитьСтруктуруПараметра(Тип, Значение);
	Если ОписаниеПараметра=Неопределено Тогда 
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			НовыйПараметр = НоваяФункция.Параметры.Добавить();
			НовыйПараметр.Имя = КлючИЗначение.Ключ;
			НовыйПараметр.Ид = КлючИЗначение.Ключ;
			НовыйПараметр.Использование=Истина;
			//НовыйПараметр.Тип = ОписаниеДоп.Тип;
			НовыйПараметр.Значение=?(КлючИЗначение.Значение=Null,Неопределено,КлючИЗначение.Значение);
		КонецЦикла;
	Иначе	
		НоваяФункция.Идентификатор = ОписаниеПараметра.ИдОбъекта;
		Для Каждого ОписаниеДоп Из ОписаниеПараметра.Доп Цикл
			НовыйПараметр = НоваяФункция.Параметры.Добавить();
			НовыйПараметр.Имя = ОписаниеДоп.Рус;
			НовыйПараметр.Ид = ОписаниеДоп.Анг;
			НовыйПараметр.Тип = ОписаниеДоп.Тип;
			ОписаниеТипа = Нейро_ОбщийМодуль.ПолучитьОписаниеТипаИзПеречисления(ОписаниеДоп.Тип);
			Если ОписаниеТипа<>Неопределено Тогда
				НовыйПараметр.Значение = ОписаниеТипа.ПривестиЗначение(НовыйПараметр.Значение);
			КонецЕсли;
			Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
				Если КлючИЗначение.Ключ=НовыйПараметр.Ид Тогда
					НовыйПараметр.Использование=Истина;
					НовыйПараметр.Значение=?(КлючИЗначение.Значение=Null,Неопределено,КлючИЗначение.Значение);
					Прервать
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Для Сч=1 По 9999 Цикл
		НовоеНаименование = СокрЛП(Тип)+" "+СокрЛП(Значение)+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		УжеЕсть = Справочники.Нейро_Функции.НайтиПоНаименованию("??? "+НовоеНаименование);
		Если УжеЕсть.Пустая() Тогда
			НоваяФункция.Наименование = "??? "+НовоеНаименование;
			Прервать
		КонецЕсли;
	КонецЦикла;
	НоваяФункция.Записать();
	Возврат НоваяФункция.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметра(Тип, Значение)
	ОписаниеПараметров = Нейро_ОбщийМодуль.ПолучитьПараметрыИзПеречисленияТипа(Тип);
	Если ОписаниеПараметров=Неопределено Тогда Возврат Неопределено КонецЕсли;
	Для Каждого СтруктураПараметра Из ОписаниеПараметров Цикл
		Если СтруктураПараметра.Значение = Значение Тогда
			Возврат СтруктураПараметра
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено
КонецФункции


&НаСервере
Функция ПривестиКЗначениюТипаНаСервереДоп(ТипЗначения, Значение)
	Если ТипЗначения=Перечисления.Нейро_Типы.Строка Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Целое Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Вещественное Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Булево Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.ПорядокКаналов Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ПорядокКаналов", Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.VarianceScaling_Режим Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_VarianceScaling_Режим", Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.VarianceScaling_Распределение Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_VarianceScaling_Распределение", Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Заполнение Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Padding", Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.ЗаполнениеСокр Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_PaddingS", Значение);
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Апскейлинг Тогда
		Возврат Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_Upscaling", Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ОбработатьОбъектKerasНаСервере(ТипЗначения, ИмяПеречисления, Значение)
	Результат = Новый Структура("Объект, Параметры");
	Результат.Параметры = Новый Структура;
	Если Не Значение.Свойство("class_name") Тогда Возврат Неопределено КонецЕсли;
	Результат.Объект = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту(ИмяПеречисления, Значение.class_name);
	Если Результат.Объект=Неопределено Тогда 
		Возврат Неопределено 
	КонецЕсли;
	Если Не Значение.Свойство("config") Тогда Возврат Результат КонецЕсли;
	Если Значение.config.Количество()=0 Тогда Возврат Результат КонецЕсли;
	ПараметрыОбъекта = Неопределено;
	СоответствияПеречисленийВ2 = Новый Соответствие;
	Если ТипЗначения=Перечисления.Нейро_Типы.ФункцияАктивации Тогда
		ПараметрыОбъекта = Нейро_ОбщийМодуль.ПолучитьПараметрыАктивации();
		СоответствияПеречисленийВ2 = Нейро_ОбщийМодуль.СоответствияПеречисленийKerasВерсии2("Нейро_ФункцииАктивации");
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Инициализатор Тогда
		ПараметрыОбъекта = Нейро_ОбщийМодуль.ПолучитьПараметрыИнициализации();
		СоответствияПеречисленийВ2 = Нейро_ОбщийМодуль.СоответствияПеречисленийKerasВерсии2("Нейро_Инициализаторы");
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Регуляризатор Тогда
		ПараметрыОбъекта = Нейро_ОбщийМодуль.ПолучитьПараметрыРегуляризации();
		СоответствияПеречисленийВ2 = Нейро_ОбщийМодуль.СоответствияПеречисленийKerasВерсии2("Нейро_Регуляризаторы");
	ИначеЕсли ТипЗначения=Перечисления.Нейро_Типы.Ограничитель Тогда
		ПараметрыОбъекта = Нейро_ОбщийМодуль.ПолучитьПараметрыОграничителя();
		СоответствияПеречисленийВ2 = Нейро_ОбщийМодуль.СоответствияПеречисленийKerasВерсии2("Нейро_Ограничители");
	КонецЕсли;
	Параметры=Неопределено;
	СоответствиеТекста = СоответствияПеречисленийВ2.Получить(Значение.class_name);
	Для Каждого ПараметрОбъекта Из ПараметрыОбъекта Цикл
		Если ПараметрОбъекта.Анг = Значение.class_name Тогда
			Параметры=ПараметрОбъекта.Доп; Прервать
		Иначе
			СоответствиеТекста = СоответствияПеречисленийВ2.Получить(Значение.class_name);
			Если ПараметрОбъекта.Анг = СоответствиеТекста Тогда
				Параметры=ПараметрОбъекта.Доп; Прервать
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из Значение.config Цикл
		Если Параметры=Неопределено Тогда
			//Если КлючИЗначение.Ключ="dtype" Тогда
			//	НовоеЗначение = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", КлючИЗначение.Значение);
			//	Результат.Параметры.Вставить(КлючИЗначение.Ключ, НовоеЗначение);
			//Иначе
				Результат.Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			//КонецЕсли;
		Иначе
			НайденныйПараметр=Неопределено;
			Для Каждого Параметр Из Параметры Цикл
				Если Параметр.Анг = КлючИЗначение.Ключ Тогда
					НайденныйПараметр=Параметр; Прервать
				КонецЕсли;
			КонецЦикла;
			Если НайденныйПараметр=Неопределено Тогда
				//Если КлючИЗначение.Ключ="dtype" Тогда
				//	НовоеЗначение = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", КлючИЗначение.Значение);
				//	Результат.Параметры.Вставить(КлючИЗначение.Ключ, НовоеЗначение);
				//Иначе
					Результат.Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				//КонецЕсли;
			Иначе
				НовоеЗначение = ПривестиКЗначениюТипаНаСервереДоп(НайденныйПараметр.Тип, КлючИЗначение.Значение);
				Если НовоеЗначение<>Null Тогда
					Результат.Параметры.Вставить(КлючИЗначение.Ключ, НовоеЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыПодключеннойМоделиНаСервере(Объект, ДЗ) Экспорт
	Строки = ДЗ.Строки;
	ЭтоМодель = Ложь; ИмяМодели = "";
	Для Каждого Строка Из Строки Цикл
		Если Строка.Свойство="class_name" И Строка.Значение = "Model" Тогда
			ЭтоМодель = Истина;
		КонецЕсли;
		Если Строка.Свойство="config" И Строка.Тип = "Объект" Тогда
			ИмяМодели = ПеребратьМодельJSONНаСервере(Объект, Строка);
		КонецЕсли;
	КонецЦикла;
	Если ЭтоМодель Тогда
		Объект.Наименование = ИмяМодели;
		Объект.ИмяМодели = ИмяМодели;
	КонецЕсли;
	Возврат ЭтоМодель;
КонецФункции

&НаСервере
Функция ПеребратьМодельJSONНаСервере(Объект, Строка)
	Результат = "";
	Строки = Строка.Строки;
	Для Каждого СтрокаДЗ Из Строки Цикл
		Если СтрокаДЗ.Свойство="name" Тогда
			Результат = СтрокаДЗ.Значение;
		ИначеЕсли СтрокаДЗ.Свойство="layers" Тогда
			Слои = ПеребратьМассивJSONНаСервере(СтрокаДЗ);
			Для Каждого СтруктураСлой Из Слои Цикл
				СтрокаТЧ = Объект.Слои.Добавить();
				СтрокаТЧ.Имя = СтруктураСлой.name;
				СтрокаТЧ.ИмяУникальное = СтруктураСлой.name+"_";
				СтрокаТЧ.ТипСлоя = Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыСлоев", СтруктураСлой.class_name);
				СтрокаТЧ.ИдСлоя = СтруктураСлой.class_name;
				Если СтруктураСлой.config.Свойство("batch_input_shape") Тогда
					СтрокаТЧ.Форма = ЗаполнитьВходнуюФормуСлояJSONНаСервере(Объект, СтрокаТЧ.ИмяУникальное, СтруктураСлой.config.batch_input_shape);
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("dtype") Тогда
					СтрокаТЧ.Тип=Нейро_ОбщийМодуль.ПолучитьЗначениеПеречисленияПоТексту("Нейро_ТипыNumPy", СтруктураСлой.config.dtype);
				КонецЕсли;
				ЗаполнитьВходящиеСлоиСлояJSONНаСервере(Объект, СтрокаТЧ.Имя, СтруктураСлой.inbound_nodes);
				Если СтруктураСлой.config.Свойство("trainable") Тогда
					СтрокаТЧ.Тренируемый = СтруктураСлой.config.trainable;
				КонецЕсли;
				Если СтруктураСлой.config.Свойство("units") Тогда
					Если СтрокаТЧ.Форма<>"" Тогда СтрокаТЧ.Форма=СтрокаТЧ.Форма+" " КонецЕсли;
					СтрокаТЧ.Форма=СтрокаТЧ.Форма+СокрЛП(СтруктураСлой.config.units);
				КонецЕсли;
				Если СтруктураСлой.class_name="Model" Тогда
					
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтрокаДЗ.Свойство="input_layers" Тогда
			ВходящиеСлои = ПеребратьМассивJSONНаСервере(СтрокаДЗ);
			Для Каждого МассивЗначений Из ВходящиеСлои Цикл
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Объект.Входы.Добавить();
						НоваяСтрока.ИмяСлоя = Значение; 
						Прервать
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли СтрокаДЗ.Свойство="output_layers" Тогда
			ИсходящиеСлои = ПеребратьМассивJSONНаСервере(СтрокаДЗ);
			Для Каждого МассивЗначений Из ИсходящиеСлои Цикл
				Для Каждого Значение Из МассивЗначений Цикл
					Если ТипЗнч(Значение)=Тип("Строка") Тогда
						НоваяСтрока = Объект.Выходы.Добавить();
						НоваяСтрока.ИмяСлоя = Значение; 
						Прервать
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВходы Из Объект.Входы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаВыходы Из Объект.Выходы Цикл
		Для Каждого СтрокаСлой Из Объект.Слои Цикл
			Если СтрокаСлой.Имя=СтрокаВыходы.ИмяСлоя Тогда
				СтрокаСлой.Положение=2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция Транслит(Вход) Экспорт
    Коды = Новый Соответствие;
    Коды.Вставить("ё","yo");
    Коды.Вставить("Ё","Yo");
    Нач = КодСимвола("А");
    Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
    Для К = Нач по КодСимвола("я") Цикл
        Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
    КонецЦикла;
    Выход = "";
    Для К=1 по СтрДлина(Вход) Цикл
        Бкв = Сред(Вход,К,1);
        Зн = Коды.Получить(Бкв);
        Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);
    КонецЦикла;
    Возврат Выход;
КонецФункции

&НаСервере
Функция ПроверитьВхождениеВОболочку(Объект, СтрокаТЧ) Экспорт
	ТипыСлоев=Нейро_ОбщийМодуль.ПолучитьТипыСлояПоВидуСлоя(ПредопределенноеЗначение("Перечисление.Нейро_ВидыСлоев.LayerWrappers"));
	Для Каждого СтрокаСлои Из Объект.Слои Цикл //Искать только оболочки
		Если ТипЗнч(СтрокаСлои.Слой)=Тип("СправочникСсылка.Нейро_ПодключенныеМодели") Тогда //Не оболочка
			Продолжить
		Иначе
			ТипСлоя = Нейро_ОбщийМодуль.ПолучитьРеквизитПоСсылке(СтрокаСлои.Слой, "ТипСлоя"); //Получить список оболочек
			Если СтрокаТЧ=СтрокаСлои Или ТипыСлоев.НайтиПоЗначению(ТипСлоя)=Неопределено Тогда 
				Продолжить 
			КонецЕсли;
		КонецЕсли;                    
		Отбор=Новый Структура("ИмяСлоя, Значение",СтрокаСлои.ИмяУникальное, СтрокаТЧ.Имя);
		Если Объект.ПараметрыСлоя.НайтиСтроки(Отбор).Количество()>0 Тогда Возврат Истина КонецЕсли;
	КонецЦикла;
	Возврат Ложь
КонецФункции


#Область СоздатьКомпоновкуИзМоделиJSON

&НаСервере
Функция СоздатьВложенныеМодели(ИмяГруппы, ДЗ, ДеревоШаблон, МассивВложенных, Уровень) Экспорт
	//Результат=Новый Массив;
	ИмяКласса=""; Конфигурация=Неопределено;
	Для Каждого СтрокаДЗ Из ДЗ.Строки Цикл
		Если СтрокаДЗ.Свойство="class_name" Тогда
			ИмяКласса=СтрокаДЗ.Значение;
		ИначеЕсли СтрокаДЗ.Свойство="config" Тогда
			Конфигурация=СтрокаДЗ;
		КонецЕсли;
	КонецЦикла;
	//МассивВложенных = Новый Массив;
	Если ИмяКласса="Model" И Конфигурация<>Неопределено Тогда
		СтрокаСлои=Неопределено;
		Для Каждого СтрокаДЗ Из Конфигурация.Строки Цикл
			Если СтрокаДЗ.Свойство="layers" Тогда
				СтрокаСлои=СтрокаДЗ; Прервать;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДЗ Из СтрокаСлои.Строки Цикл
			Для Каждого СтрокаКласса Из СтрокаДЗ.Строки Цикл
				Если СтрокаКласса.Свойство="class_name" И СтрокаКласса.Значение="Model" Тогда
					ПодМодель=СоздатьВложенныеМодели(ИмяГруппы, СтрокаДЗ, ДеревоШаблон, МассивВложенных, Уровень+1); 
					Если ПодМодель<>Неопределено Тогда
						МассивВложенных.Добавить(ПодМодель);
					КонецЕсли;
					Прервать
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Если Уровень>0 Тогда
		НоваяМодель = СоздатьСправочникиМоделей(ИмяГруппы, Конфигурация, ДеревоШаблон);
		МассивВложенных.Добавить(НоваяМодель);
	КонецЕсли;
	//Возврат МассивВложенных
КонецФункции

&НаСервере
Функция СоздатьСправочникиМоделей(ИмяГруппы, ДзИсточник, ДеревоШаблон);
	НовоеДЗ = ДеревоШаблон.Скопировать(); СтрокаКонфигурации=Неопределено;
	Для Каждого СтрокаНовоеДЗ Из НовоеДЗ.Строки Цикл
		Если СтрокаНовоеДЗ.Свойство="config" Тогда
			СтрокаКонфигурации=СтрокаНовоеДЗ;
			СкопироватьСтрокиВНовоеДерево(СтрокаНовоеДЗ, ДзИсточник);
			Прервать
		КонецЕсли;
	КонецЦикла;
	Если СтрокаКонфигурации<>Неопределено Тогда
		ИмяМодели="";
		Для Каждого СтрокаНовоеДЗ Из СтрокаКонфигурации.Строки Цикл
			Если СтрокаНовоеДЗ.Свойство="name" Тогда
				ИмяМодели = СтрокаНовоеДЗ.Значение; Прервать
			КонецЕсли;
		КонецЦикла;
		Текст = Нейро_СозданиеМоделиНаСервере.СформироватьСтрокуJSONИзДереваНаСервере(НовоеДЗ);
		ГруппаАвто = Справочники.Нейро_ПодключенныеМодели.НайтиПоНаименованию("AUTO", Истина);
		Если ГруппаАвто.Пустая() Тогда
			ГруппаАвто=Справочники.Нейро_ПодключенныеМодели.СоздатьГруппу();
			ГруппаАвто.Наименование="AUTO";
			ГруппаАвто.Записать();
		КонецЕсли;
		ГруппаСсылка=Справочники.Нейро_ПодключенныеМодели.НайтиПоНаименованию(ИмяГруппы,Истина,ГруппаАвто.Ссылка);
		Если ГруппаСсылка.Пустая() Тогда
			ГруппаСсылка=Справочники.Нейро_ПодключенныеМодели.СоздатьГруппу();
			ГруппаСсылка.Наименование=ИмяГруппы;
			ГруппаСсылка.Родитель = ГруппаАвто.Ссылка;
			ГруппаСсылка.Записать();
		КонецЕсли;
		МодельОбъект=Справочники.Нейро_ПодключенныеМодели.СоздатьЭлемент();
		МодельОбъект.ТекстМоделиJSON=Текст;
		//МодельОбъект.ИмяМодели=ИмяМодели;
		//МодельОбъект.Наименование=ИмяМодели;
		Нейро_СозданиеМоделиНаСервере.ЗаполнитьРеквизитыПодключеннойМоделиНаСервере(МодельОбъект, НовоеДЗ);
		МодельОбъект.Родитель=ГруппаСсылка.Ссылка;
		МодельОбъект.Записать();
		Возврат МодельОбъект.Ссылка
	КонецЕсли;
КонецФункции

Процедура СкопироватьСтрокиВНовоеДерево(ДзПриемник, ДзИсточник)
	Для Каждого СтрокаДЗ Из ДзИсточник.Строки Цикл
		СтрокаНовоеДЗ=ДзПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовоеДЗ, СтрокаДЗ);
		Если СтрокаДЗ.Строки.Количество()>0 Тогда
			СкопироватьСтрокиВНовоеДерево(СтрокаНовоеДЗ, СтрокаДЗ)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

