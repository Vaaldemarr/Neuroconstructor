#Область ПодготовкаДанных

&НаСервере
Функция СформироватьСловарь2(Объект, Форма, СтрокаПД, ФайлОшибок, ФайлСообщений) Экспорт
	Если СтрокаПД=Неопределено Тогда 
		СтрокаПД = Форма.Элементы.Словари.ТекущиеДанные;
	КонецЕсли;
	Если СтрокаПД=Неопределено Тогда Возврат Ложь КонецЕсли;
	//Объект.ПутьКДанным
	
	МассивПараметров=Новый Массив;
	Если СтрокаПД.РазмерСловаря>0 Тогда
		МассивПараметров.Добавить(Новый Структура("num_words",СтрЗаменить(СокрЛП(СтрокаПД.РазмерСловаря),Символы.НПП,"")));
	КонецЕсли;
	Если СтрокаПД.Фильтры<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("filters",СтрокаПД.Фильтры));
	КонецЕсли;
	Если СтрокаПД.НижнийРегистр=Ложь Тогда
		МассивПараметров.Добавить(Новый Структура("lower","False"));
	КонецЕсли;
	Если СтрокаПД.Разделитель<>" " Тогда
		МассивПараметров.Добавить(Новый Структура("split",СтрокаПД.Разделитель));
	КонецЕсли;
	ТекстПараметры="";
	Для Каждого Параметр Из МассивПараметров Цикл
		Если ТекстПараметры<>"" Тогда ТекстПараметры=ТекстПараметры+", " КонецЕсли;
		Для Каждого КлючИЗначение Из Параметр Цикл
			Если КлючИЗначение.Ключ="num_words" Тогда
				ТекстПараметры=ТекстПараметры+"num_words="+КлючИЗначение.Значение
			ИначеЕсли КлючИЗначение.Ключ="filters" Тогда
				ТекстПараметры=ТекстПараметры+"filters='"+КлючИЗначение.Значение+"'"
			ИначеЕсли КлючИЗначение.Ключ="lower" Тогда
				ТекстПараметры=ТекстПараметры+"lower="+КлючИЗначение.Значение
			ИначеЕсли КлючИЗначение.Ключ="split" Тогда
				ТекстПараметры=ТекстПараметры+"split='"+КлючИЗначение.Значение+"'"
			Иначе
				ТекстПараметры=ТекстПараметры+КлючИЗначение.Ключ+"="+СтрЗаменить(СокрЛП(КлючИЗначение.Значение),Символы.НПП,"")
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПутьКТекстам=СокрЛП(СтрокаПД.КаталогТекстов);
	Если ПутьКТекстам="" Тогда Возврат Ложь КонецЕсли;
	Если Прав(ПутьКТекстам,1)<>"\" Тогда ПутьКТекстам=ПутьКТекстам+"\" КонецЕсли;
	ПутьПитон=СтрЗаменить(ПутьКТекстам,"\","\\");
	ТекстКодировка = ?(СтрокаПД.Кодировка="","",", encoding='"+СтрокаПД.Кодировка+"'");
	Объект.ТекстПрограммыСловарь=
	"import sys
	|sys.stderr = open('"+ФайлОшибок+"', 'w')
	|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	|sys.stdout = open('"+ФайлСообщений+"', 'w')
	|"+Нейро_ОбщийМодуль.ИдFromKeras("from keras.preprocessing.text import Tokenizer")+"
	|texts = []
	|import os
	|lookdir = u'"+ПутьПитон+"'
	|def collect_texts(path_dir):
	|    for fname in os.listdir(path_dir):
	|        fpathname = os.path.join(path_dir, fname)
	|        if os.path.isdir(fpathname):
	|            collect_texts(fpathname)
	|            continue
	|        f = open(fpathname"+ТекстКодировка+")
	|        texts.append(f.read())
	|        f.close()
	|collect_texts(lookdir)
	//|for fname in os.listdir(lookdir):
	//|    if os.path.isdir(os.path.join(lookdir, fname)):
	//|        continue
	//|    f = open(os.path.join(lookdir, fname))
	//|    texts.append(f.read())
	//|    f.close()
	|tokenizer = Tokenizer("+ТекстПараметры+")
	|tokenizer.fit_on_texts(texts)"+Символы.ВК+Символы.ПС;
	ПутьКСловарю=СокрЛП(СтрокаПД.ПутьКСловарю);
	Если ПутьКСловарю="" Тогда Возврат Ложь КонецЕсли;
	//Если Прав(ПутьКТекстам,1)<>"\" Тогда ПутьКТекстам=ПутьКТекстам+"\" КонецЕсли;
	ПутьКСловарюПитон=СтрЗаменить(ПутьКСловарю,"\","\\");
	Объект.ТекстПрограммыСловарь=Объект.ТекстПрограммыСловарь+
	"import json
	|tokenizer_json = tokenizer.to_json()
	|with open(u'"+ПутьКСловарюПитон+"', 'w', encoding='utf-8') as f:
    |    f.write(json.dumps(tokenizer_json, ensure_ascii=False))
    |";
	
	Возврат Истина;

//with open(u'C:\\BASES\\Новая папка\\Мозг\\House Prices\\1.json', 'w', encoding='utf-8') as f:
//    f.write(json.dumps(tokenizer_json, ensure_ascii=False))
//with open(u'C:\\BASES\\Новая папка\\Мозг\\House Prices\\2.json', 'w', encoding='utf-8') as file:
//    json.dump(tokenizer_json, file)	

КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

&НаСервере
Функция СформироватьТекстПрограммыВыгрузитьТекст(Параметры, ПутиКФайлам) Экспорт
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|"+Нейро_ОбщийМодуль.ИдFromKeras("from keras.preprocessing.text import Tokenizer")+"
	|import os
	|import json
	|import numpy as np
	|";
	
	ИдИсточника   = "tokenizer";
	ИдДоп         = "texts";
	ИдТекстов     = "textsamples";
	ИдКлассов     = "labels";
	
	Если Параметры.ИдентификаторFromJSON = "" Тогда
		ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	Иначе
		ИдентификаторFromJSON = Параметры.ИдентификаторFromJSON;
	КонецЕсли;
	
	ПутьПитон=СтрЗаменить(Параметры.ПутьКСловарю,"\","\\");
	ТекстПрограммы=ТекстПрограммы+
	"with open(u'"+ПутьПитон+"') as f:
	|    data = json.load(f)
	|"+ИдИсточника+" = "+ИдентификаторFromJSON+"(data)
	|";
	
	ПутьКСпискуФайлов=СтрЗаменить(Параметры.ПутьКСпискуФайлов,"\","\\");
	ТекстПрограммы=ТекстПрограммы+
	"f = open(u'"+ПутьКСпискуФайлов+"')
	|data = f.read()
	|f.close()
	|fileslist = data.split('\n')
	|if fileslist[-1]=='':
	|    fileslist=fileslist[:-1]
	|";
	
	//ТекстПрограммы=ТекстПрограммы+"fileslist = [";
	//СписокФайлов = "";
	//Для Каждого ПутьКФайлу Из ПутиКФайлам Цикл
	//	Если СписокФайлов<>"" Тогда 
	//		СписокФайлов=СписокФайлов+", 
	//		|";
	//	КонецЕсли;
	//	СписокФайлов=СписокФайлов+"u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'";
	//КонецЦикла;
	//ТекстПрограммы=ТекстПрограммы+СписокФайлов+"]
	//|";
	
	СписокКлассов = "";
	Если Параметры.СоздаватьМетки И Параметры.ИзКаталога Тогда
		ТекстПрограммы=ТекстПрограммы+"classeslist = {";
		Для Каждого СтрокаКласса Из Параметры.КлассыТекстов Цикл
			ПутьККаталогу = "u'"+СтрЗаменить(СтрокаКласса.Путь,"\","\\")+"'";
			Если СписокКлассов<>"" Тогда 
				СписокКлассов=СписокКлассов+", 
				|";
			КонецЕсли;
			СписокКлассов=СписокКлассов+ПутьККаталогу+": "+СтрЗаменить(СокрЛП(СтрокаКласса.НомерКласса),Символы.НПП,"");
		КонецЦикла;
		ТекстПрограммы=ТекстПрограммы+СписокКлассов+"}
		|";
	ИначеЕсли Параметры.СоздаватьМетки Тогда
		//ТекстПрограммы=ТекстПрограммы+ИдКлассов+" = [";
		//СписокФайлов = "";
		//Для Каждого ПутьКФайлу Из ПутиКФайлам Цикл
		//	Если СписокФайлов<>"" Тогда 
		//		СписокФайлов=СписокФайлов+", 
		//		|";
		//	КонецЕсли;
		//	СписокФайлов=СписокФайлов+"u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'";
		//КонецЦикла;
		//ТекстПрограммы=ТекстПрограммы+СписокФайлов+"]
		//|";
		ПутьКМеткам=СтрЗаменить(Параметры.ПутьКМеткам,"\","\\");
		ТекстПрограммы=ТекстПрограммы+
		"f = open(u'"+ПутьКМеткам+"')
		|data = f.read()
		|f.close()
		|"+ИдКлассов+" = data.split('\n')
		|if "+ИдКлассов+"[-1]=='':
		|    "+ИдКлассов+" = "+ИдКлассов+"[:-1]
		|"+ИдКлассов+" = np.array("+ИдКлассов+", dtype=np.int)
		|";
	КонецЕсли;
	
	ТекстКодировка = ?(Параметры.Кодировка="","",", encoding='"+Параметры.Кодировка+"'");
	Если Параметры.ИзКаталога Тогда
		//Если Прав(ПутьКТекстам,1)<>"\" Тогда ПутьКТекстам=ПутьКТекстам+"\" КонецЕсли;
		Если Параметры.СоздаватьМетки Тогда
			ТекстПрограммы=ТекстПрограммы+ИдДоп+" = []
			|"+ИдКлассов+" = []
			|def collect_texts(path_dir, clsnum):
			|    for fname in os.listdir(path_dir):
			|        fpathname = os.path.join(path_dir, fname)
			|        if os.path.isdir(fpathname):
			|            collect_texts(fpathname, classeslist.get(fpathname))
			|            continue
			|        f = open(fpathname"+ТекстКодировка+")
			|        "+ИдДоп+".append(f.read())
			|        "+ИдКлассов+".append(clsnum)
			|        f.close()
			|for dirname in fileslist:
			|    collect_texts(dirname, -1)
			|"+ИдКлассов+" = np.array("+ИдКлассов+", dtype=np.int)
			|";
		Иначе
			ТекстПрограммы=ТекстПрограммы+
			""+ИдДоп+" = []
			|def collect_texts(path_dir):
			|    for fname in os.listdir(path_dir):
			|        fpathname = os.path.join(path_dir, fname)
			|        if os.path.isdir(fpathname):
			|            collect_texts(fpathname)
			|            continue
			|        f = open(fpathname"+ТекстКодировка+")
			|        "+ИдДоп+".append(f.read())
			|        f.close()
			|for dirname in fileslist:
			|    collect_texts(dirname)
			|";
		КонецЕсли;
		//|    for fname in os.listdir(dirname):
		//|        if os.path.isdir(os.path.join(dirname, fname)):
		//|            continue
		//|        f = open(os.path.join(dirname, fname))
		//|        "+ИдДоп+".append(f.read())
		//|        f.close()
	Иначе
		ТекстПрограммы=ТекстПрограммы+
		ИдДоп+" = []
		|for fname in fileslist:
		|    f = open(fname"+ТекстКодировка+")
		|    data = f.read()
		|    f.close()
		|    lines = data.split('\n')
		|    if lines[-1]=='':
		|        lines=lines[:-1]
		|    "+ИдДоп+" += lines
		|";
	КонецЕсли;
	
	Если Параметры.ПрямоеКодирование=1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		ИдТекстов+" = "+ИдИсточника+".texts_to_matrix("+ИдДоп+", mode='"+Параметры.ПрямоеКодированиеРежим+"')
		|";
	ИначеЕсли Параметры.ПрямоеКодирование=0 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sequences = "+ИдИсточника+".texts_to_sequences("+ИдДоп+")
		|"+ИдТекстов+" = keras.preprocessing.sequence.pad_sequences(sequences"
		+?(Параметры.ДлинаПоследовательности=0,"",", maxlen="+СтрЗаменить(СокрЛП(Параметры.ДлинаПоследовательности),Символы.НПП,""))
		+?(Параметры.МестоДополнения=1,", padding='post'","")
		+?(Параметры.МестоУсечения=1,", truncating='post'","")+")
		|";
	КонецЕсли;
	
	Если Параметры.Перемешивать Тогда
		ТекстПрограммы=ТекстПрограммы+
		"indices = np.arange("+ИдТекстов+".shape[0])
		|np.random.shuffle(indices)
		|"+ИдТекстов+" = "+ИдТекстов+"[indices]
		|";
		Если Параметры.СоздаватьМетки Тогда
			ТекстПрограммы=ТекстПрограммы+
			ИдКлассов+" = "+ИдКлассов+"[indices]
			|";
		КонецЕсли;
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"np.save(u'"+СтрЗаменить(Параметры.ПутьКФайлу,"\","\\")+"', "+ИдТекстов+")";
	Если Параметры.СоздаватьМетки Тогда
		ТекстПрограммы=ТекстПрограммы+
		"
		|np.save(u'"+СтрЗаменить(Параметры.ПромежуточныйФайл,"\","\\")+"', "+ИдКлассов+")";
	КонецЕсли;
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстовыйДокументИзЗапросаНаСервере(ТекстЗапроса, ПараметрыЗапроса, Разделитель) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Для Каждого СтрокаПараметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(СтрокаПараметр.Параметр, СтрокаПараметр.Значение);
	КонецЦикла;
	Результат = Запрос.Выполнить();
	Тз = Результат.Выгрузить();
	МассивСтрок=Новый Массив(Тз.Колонки.Количество());
	Для Сч = 0 По Тз.Колонки.Количество()-1 Цикл
		МассивСтрок[Сч] = СтрСоединить(Тз.ВыгрузитьКолонку(Сч),Разделитель);
	КонецЦикла;
	//ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлу, КодировкаТекста.ANSI);
	//ЗаписьТекста.Записать(СтрСоединить(МассивСтрок,Символы.ВК));
	//ЗаписьТекста.Закрыть();	
	//я1=ПеребратьСтр1(Тз, Разделитель);
	//я2=ПеребратьСтр2(Тз, Разделитель);
	//Возврат я2;
	Возврат СтрСоединить(МассивСтрок,Символы.ВК);
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыИзРезультатаЗапроса(Параметры) Экспорт
		
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|npdata = np.loadtxt(u'"+СтрЗаменить(Параметры.ПутьКПромежуточному,"\","\\")+"', dtype=np.object, delimiter=',')
	|";

	Если НЕ Параметры.ТипДанных.Пустая() Тогда
		ТекстТипДанныхМассива=Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", Параметры.ТипДанных);
		ТекстПрограммы=ТекстПрограммы+
		"npdata = npdata.astype('"+ТекстТипДанныхМассива+"')
		|";
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"npdata = npdata.transpose()
	|np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', npdata)";
	
	Возврат ТекстПрограммы;
//float_data = float_data.transpose()
	
//data_dir = 'c:/T/'
//fname = os.path.join(data_dir, 'LongStrings.txt')


//lines = data.split('\n')
//header = lines[0].split(',')
//#lines = lines[1:]

//#print(header)
//print(len(lines))

//#%% [markdown]
//# Let's convert all of these 420,551 lines of data into a Numpy array:

//#%%
//import numpy as np

//float_data = np.zeros((len(lines), len(header)),dtype=np.object)
//for i, line in enumerate(lines):
//    #values = [float(x) for x in line.split(',')[1:]]
//    values = line.split(',')
//    float_data[i, :] = values

//float_data = float_data.astype('float32')
//float_data = float_data.transpose()
//float_data.shape
	
КонецФункции

&НаСервере
Функция ПрочитатьТабличныйДокументВТЗ(ПутьКФайлу, Расширение, Разделитель, Колонка=Неопределено) Экспорт
	ФайлНаСервере = ПолучитьИмяВременногоФайла(Расширение);
	лДвоичДанные = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	лДвоичДанные.Записать(ФайлНаСервере);
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ФайлНаСервере, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	СтрНач=0; КолНач=0; КолКон=0;
	Для СчСтрока=1 По ТабДок.ВысотаТаблицы Цикл
		Для СчКол=1 По 255 Цикл
			Если ТабДок.Область(СчСтрока, СчКол, СчСтрока, СчКол).Текст<>"" Тогда
				СтрНач=СчСтрока; КолНач=СчКол; Прервать
			КонецЕсли;
		КонецЦикла;
		Если СтрНач>0 Тогда Прервать КонецЕсли;
	КонецЦикла;
	Если СтрНач>0 Тогда 
		Для СчКол=КолНач По 65535 Цикл
			Если ТабДок.Область(СтрНач, СчКол, СтрНач, СчКол).Текст="" Тогда
				КолКон=СчКол-1; Прервать
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если СтрНач=0 Тогда СтрНач=1 КонецЕсли;
	Если КолНач=0 Тогда КолНач=1 КонецЕсли;
	Если КолКон=0 Тогда КолКон=999 КонецЕсли;
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область(СтрНач, КолНач, ТабДок.ВысотаТаблицы, КолКон));
	Построитель.Выполнить();
	Тз=Построитель.Результат.Выгрузить();
	Если Тз.Количество()=0 Тогда Возврат "" КонецЕсли;
	Если Колонка<>Неопределено Тогда
		МассивСтрок=Новый Массив(1);
	Иначе
		МассивСтрок=Новый Массив(Тз.Колонки.Количество());
	КонецЕсли;
	Для Сч = 0 По Тз.Колонки.Количество()-1 Цикл
		Если Колонка<>Неопределено Тогда
			Если Сч=Колонка Тогда 
				МассивСтрок[0] = СтрСоединить(Тз.ВыгрузитьКолонку(Сч),Разделитель);
			КонецЕсли;
		Иначе
			МассивСтрок[Сч] = СтрСоединить(Тз.ВыгрузитьКолонку(Сч),Разделитель);
		КонецЕсли;
	КонецЦикла;
	Возврат СтрСоединить(МассивСтрок,Символы.ВК);
	
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыТаблицы(Параметры) Экспорт
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|";
	
	Если НЕ Параметры.ТипДанных.Пустая() Тогда
		ТекстТипДанныхМассива=Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", Параметры.ТипДанных);
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"out_dir = u'"+СтрЗаменить(Параметры.ПутьКВыходномуКаталогу,"\","\\")+"'
	|";
	Если Параметры.МассивФайловТД.Количество()>0 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"intermediate_dir = u'"+СтрЗаменить(Параметры.ПутьКПромежуточномуКаталогу,"\","\\")+"'
		|fileslist1 = [";
		СписокФайлов = "";
		Для Каждого ЧастиФайла Из Параметры.МассивФайловТД Цикл
			Если СписокФайлов<>"" Тогда 
				СписокФайлов=СписокФайлов+", 
				|";
			КонецЕсли;
			ПропуститьСтрок = ?(ЧастиФайла.Заголовок=0,"None","range("+СтрЗаменить(СокрЛП(ЧастиФайла.Заголовок),Символы.НПП,"")+")");
			Если ЧастиФайла.ТипДанных.Пустая() Тогда
				ТипДанных="None"
			Иначе
				ТипДанных="'"+Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", ЧастиФайла.ТипДанных)+"'";
			КонецЕсли;
			СписокФайлов=СписокФайлов+
			             "[u'"+ЧастиФайла.Имя+"', u'"+ЧастиФайла.ИмяNPY+"', "+
			             ?(ЧастиФайла.Разделитель=" ","None","'"+ЧастиФайла.Разделитель+"'")+", "+ПропуститьСтрок+", "+ТипДанных+"]";
		КонецЦикла;
		ТекстПрограммы=ТекстПрограммы+СписокФайлов+"]
		|for fnames in fileslist1: 
		|    inm_file = os.path.join(intermediate_dir, fnames[0])
		|    npdata = np.loadtxt(inm_file, dtype=np.object, delimiter=fnames[2])
		|    if fnames[4] != None:
		|        try:
		|            npdata = npdata.astype(fnames[4])
		|        except:
		|            print('Ошибка преобразования типа данных в файле: '+fnames[0], file=sys.stderr)
		|    npdata = npdata.transpose()
		|    if fnames[3] != None:
		|        npdata=np.delete(npdata, fnames[3], axis = 0)
		|    np.save(os.path.join(out_dir, fnames[1]), npdata)
		|"
	КонецЕсли;
	Если Параметры.МассивФайловТекст.Количество()>0 Тогда
		ТекстПрограммы=ТекстПрограммы+"fileslist2 = [";
		СписокФайлов = "";
		Для Каждого ЧастиФайла Из Параметры.МассивФайловТекст Цикл
			Если СписокФайлов<>"" Тогда 
				СписокФайлов=СписокФайлов+", 
				|";
			КонецЕсли;
			ПропуститьСтрок = СтрЗаменить(СокрЛП(ЧастиФайла.Заголовок),Символы.НПП,"");
			НомерКолонки = СтрЗаменить(СокрЛП(ЧастиФайла.Колонка),Символы.НПП,"");
			Если ЧастиФайла.ТипДанных.Пустая() Тогда
				ТипДанных="None"
			Иначе
				ТипДанных="'"+Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", ЧастиФайла.ТипДанных)+"'";
			КонецЕсли;
			СписокФайлов=СписокФайлов+
			             "[u'"+СтрЗаменить(ЧастиФайла.ПутьКФайлу,"\","\\")+"', u'"+ЧастиФайла.ИмяNPY+"', "+
			             ?(ЧастиФайла.Разделитель=" ","None","'"+ЧастиФайла.Разделитель+"'")+", "+ПропуститьСтрок+", "+ТипДанных+", "+НомерКолонки+"]";
		КонецЦикла;
		ТекстПрограммы=ТекстПрограммы+СписокФайлов+"]
		|for fnames in fileslist2: 
		|    npdata = np.loadtxt(fnames[0], dtype=np.object, delimiter=fnames[2], skiprows=fnames[3])
		|    if fnames[4] != None:
		|        try:
		|            npdata = npdata.astype(fnames[4])
		|        except:
		|            print('Ошибка преобразования типа данных в файле '+fnames[0], file=sys.stderr)
		|    if fnames[5]>0:
		|        npdata = npdata[:, fnames[5]]
		|    np.save(os.path.join(out_dir, fnames[1]), npdata)
		|"
	КонецЕсли;
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыИзображения(Параметры, МассивФайлов, МассивЦелей) Экспорт
	//tf.keras.preprocessing.image.load_img(path, grayscale=False, color_mode='rgb', target_size=None, interpolation='nearest')		
	//tf.keras.preprocessing.image.img_to_array(img, data_format=None, dtype=None)
	
	ТекстПрограммы=
	Нейро_ОбщийМодуль.ИдFromKeras(
	"import sys
	|from keras.preprocessing.image import load_img,img_to_array
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|");

	СтрокаСписокФайлов="";
	Для Каждого ИмяФайла Из МассивФайлов Цикл
		Если СтрокаСписокФайлов<>"" Тогда 
			СтрокаСписокФайлов=СтрокаСписокФайлов+", 
			|";
		КонецЕсли;
		СтрокаСписокФайлов=СтрокаСписокФайлов+"u'"+СтрЗаменить(ИмяФайла,"\","\\")+"'";
	КонецЦикла;
	СтрокаСписокФайлов="["+СтрокаСписокФайлов+"]
	|";
	ТекстПрограммы=ТекстПрограммы+
	"files_list="+СтрокаСписокФайлов;
	ТекстПалитра="";
	Если Параметры.Палитра>0 Тогда
		//rgb(0), rgba(1), grayscale(2)
		Если Параметры.Палитра=1 Тогда
			ИмяПалитры="rgba"
		ИначеЕсли Параметры.Палитра=2 Тогда
			ИмяПалитры="grayscale"
		КонецЕсли;
		ТекстПалитра=", color_mode='"+ИмяПалитры+"'";
	КонецЕсли;
	ТекстРазрешение="";
	Если Параметры.Высота>0 И Параметры.Ширина>0 Тогда
		ТекстРазрешение=", target_size=("+СтрЗаменить(СокрЛП(Параметры.Высота),Символы.НПП,"")+","+СтрЗаменить(СокрЛП(Параметры.Ширина),Символы.НПП,"")+")";
	КонецЕсли;
	ТекстИнтерполяция="";
	Если Параметры.Интерполяция>0 Тогда
		//nearest(0), bilinear(1), bicubic(2), lanczos(3), box(4), hamming(5)
		Если Параметры.Палитра=1 Тогда
			Способ="bilinear"
		ИначеЕсли Параметры.Палитра=2 Тогда
			Способ="bicubic"
		ИначеЕсли Параметры.Палитра=3 Тогда
			Способ="lanczos"
		ИначеЕсли Параметры.Палитра=4 Тогда
			Способ="box"
		ИначеЕсли Параметры.Палитра=5 Тогда
			Способ="hamming"
		КонецЕсли;
		ТекстИнтерполяция=", interpolation='"+Способ+"'";
	КонецЕсли;
	ТекстТипДанных="";
	Если ЗначениеЗаполнено(Параметры.ТипДанных) Тогда
		ТекстТипДанных=", dtype=np."+Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", Параметры.ТипДанных);
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"imgs = []
	|for fname in files_list:
	|    img = load_img(fname"+ТекстПалитра+ТекстРазрешение+ТекстИнтерполяция+")
	|    x = img_to_array(img"+ТекстТипДанных+")
	|    x = np.expand_dims(x, axis=0)
	|    imgs.append(x)
	|imgs = np.concatenate(imgs, axis=0)
	|";
	
	ТекстПрограммы=ТекстПрограммы+
	"np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', imgs)
	|";
	
	Если СокрЛП(Параметры.ПутьКПромежуточномуФайлу)<>"" Тогда
		ТекстСписок=""; СчСтр=0;
		Для Сч=0 По МассивЦелей.Количество()-1 Цикл
			СчСтр=СчСтр+1;
			Если СчСтр = 50 Тогда
				ТекстСписок=ТекстСписок+"
				|";
				СчСтр=0;
			КонецЕсли;
			Если ТекстСписок<>"" Тогда ТекстСписок=ТекстСписок+", " КонецЕсли;
			ТекстСписок=ТекстСписок+СтрЗаменить(СокрЛП(МассивЦелей[Сч]), Символы.НПП, "");
		КонецЦикла;
		ТекстПрограммы=ТекстПрограммы+
		"targets_list = ["+ТекстСписок+"]
		|targets = np.asarray(targets_list, dtype=np.float32)
		|np.save(u'"+СтрЗаменить(Параметры.ПутьКПромежуточномуФайлу,"\","\\")+"', targets)";
	КонецЕсли;
	
	Возврат ТекстПрограммы;
//float_data = float_data.transpose()
	
//data_dir = 'c:/T/'
//fname = os.path.join(data_dir, 'LongStrings.txt')


//lines = data.split('\n')
//header = lines[0].split(',')
//#lines = lines[1:]

//#print(header)
//print(len(lines))

//#%% [markdown]
//# Let's convert all of these 420,551 lines of data into a Numpy array:

//#%%
//import numpy as np

//float_data = np.zeros((len(lines), len(header)),dtype=np.object)
//for i, line in enumerate(lines):
//    #values = [float(x) for x in line.split(',')[1:]]
//    values = line.split(',')
//    float_data[i, :] = values

//float_data = float_data.astype('float32')
//float_data = float_data.transpose()
//float_data.shape
	
КонецФункции

#КонецОбласти

#Область ОбработкаМассивовNumpy

&НаСервере
Функция СформироватьТекстПрограммыПросмотрNPY(Параметры, ИндексыИзмерений, ПлоскийПросмотр) Экспорт
	МассивИндексов = Новый Массив;
	Если ИндексыИзмерений<>"" Тогда
		МассивИндексов = СтрРазделить(ИндексыИзмерений, ",", Ложь)
	КонецЕсли;
	
	Тип=Нейро_ОбщийМодуль.НайтиПеречислениеПоТекстуСинонима("Нейро_ТипыNumPy", Параметры.ВыбранныйТип);
	
	Формат="";
	Если Тип<>Неопределено Тогда
		Формат=Нейро_ОбщийМодуль.ПолучитьКороткийФорматNumpyПоТипу(Тип);
	Иначе
		Формат="%s";
	КонецЕсли;
	
	//ПутьКФайлу = ?(Параметры.Путь1="", Параметры.Путь2, Параметры.Путь1);
	
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|";
	
	Если МассивИндексов.Количество()>0 Тогда
		ТекстИндексы="";
		Для Каждого Текст Из МассивИндексов Цикл
			Если ТекстИндексы<>"" Тогда ТекстИндексы=ТекстИндексы+", " КонецЕсли;
			ТекстИндексы=ТекстИндексы+Текст
		КонецЦикла;
		//ТекстПрограммы=ТекстПрограммы+
		//"if srcarray.ndim>2:
		////|    srcarray=srcarray[:,:,"+ТекстИндексы+"]
		//|    srcarray=srcarray["+ИндексыИзмерений+"]
		//|";
		ТекстПрограммы=ТекстПрограммы+
		"srcarray=srcarray["+ИндексыИзмерений+"]
		|";
	КонецЕсли;
	
	Если ПлоскийПросмотр Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sourceFile = open(u'"+СтрЗаменить(Параметры.ПутьКПромежуточномуФайлу,"\","\\")+"', 'w')
		|print(srcarray, file=sourceFile)
		|sourceFile.close()"
	Иначе
		Разделитель=?(Параметры.Разделитель="", ",", Параметры.Разделитель);
		ТекстПрограммы=ТекстПрограммы+
		"np.savetxt(u'"+СтрЗаменить(Параметры.ПутьКПромежуточномуФайлу,"\","\\")+"', srcarray"+?(Формат="","",", fmt='"+Формат+"'")+", delimiter='"+Разделитель+"')";
	КонецЕсли;
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыПереформироватьNPY(Параметры, СтрокаРазмерность) Экспорт
	МассивИзмерений = Новый Массив;
	Если СтрокаРазмерность<>"" Тогда
		МассивИзмерений = СтрРазделить(СтрокаРазмерность, ",", Ложь);
	КонецЕсли;
	
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|";
	
	Если МассивИзмерений.Количество()>0 Тогда
		ТекстИндексы="";
		Для Каждого Текст Из МассивИзмерений Цикл
			Если ТекстИндексы<>"" Тогда ТекстИндексы=ТекстИндексы+", " КонецЕсли;
			ТекстИндексы=ТекстИндексы+Текст
		КонецЦикла;
		ТекстПрограммы=ТекстПрограммы+
		"srcarray = srcarray.reshape("+ТекстИндексы+")
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+
	"np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', srcarray)";

	Возврат ТекстПрограммы
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыУдалитьNPY(Параметры, ИндексыИзмерений, Ось=Неопределено) Экспорт
	ЭтоДиапазон=СтрНайти(ИндексыИзмерений, ":");
	ЭтоСписок=СтрНайти(ИндексыИзмерений, ",");
	
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|";
	
	Если ЭтоДиапазон Тогда
		ТекстИндексы="np.s_["+ИндексыИзмерений+"]";
	ИначеЕсли ЭтоСписок Тогда
		ТекстИндексы="["+ИндексыИзмерений+"]";
	Иначе
		ТекстИндексы=ИндексыИзмерений;
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"srcarray=np.delete(srcarray, "+ТекстИндексы+?(Ось=Неопределено,"",", axis="+Ось)+")
	|";
	ТекстПрограммы=ТекстПрограммы+
	"np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', srcarray)";
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыУдалитьОсьNPY(Параметры, Ось, Форма) Экспорт
	Текст = СокрЛП(Форма);
	Если Лев(Текст,1)="(" Тогда
		Текст=Сред(Текст,2,СтрДлина(Текст)-2);
	КонецЕсли;
	МассивИзмерений=СтрРазделить(Текст,",",Ложь);
	
	СтрДиапазон="";
	Для Сч=0 По МассивИзмерений.Количество()-1 Цикл
		Если СтрДиапазон<>"" Тогда СтрДиапазон=СтрДиапазон+", " КонецЕсли;
		Если Сч=Ось Тогда
			СтрДиапазон=СтрДиапазон+"0"
		Иначе
			СтрДиапазон=СтрДиапазон+":"
		КонецЕсли;
	КонецЦикла;
	
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|srcarray = srcarray["+СтрДиапазон+"]
	|np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', srcarray)";
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыОбъединитьNPY(Параметры, Способ, Ось, НоваяОсь) Экспорт
	ПутьКФайлу1 = Параметры.Путь1;
	ПутьКФайлу2 = Параметры.Путь2;
	
	Если Способ=0 Тогда      //Горизонтальная компоновка строк
		Ид="hstack";
	ИначеЕсли Способ=1 Тогда //Вертикальная компоновка строк
		Ид="vstack";
	ИначеЕсли Способ=2 Тогда //Горизонтальная компоновка столбцов
		Ид="column_stack";
	ИначеЕсли Способ=3 Тогда //Вертикальная компоновка столбцов
		Ид="dstack";
	ИначеЕсли Способ=4 Тогда //По новой оси
		Ид="stack";
	ИначеЕсли Способ=5 Тогда //Конкатенация
		Ид="concatenate";
	КонецЕсли;	
	
	ТекстОсь="";
	Если Способ=4 Тогда
		Если НоваяОсь=0 Тогда
			ТекстОсь=", axis=0"
		Иначе
			ТекстОсь=", axis=-1"
		КонецЕсли;
	ИначеЕсли Способ=5 Тогда
		ТекстОсь=?(Ось<>0,", axis="+Ось,"")
	КонецЕсли;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray1 = np.load(u'"+СтрЗаменить(ПутьКФайлу1,"\","\\")+"'"+numpy_allow_pickle+")
	|srcarray2 = np.load(u'"+СтрЗаменить(ПутьКФайлу2,"\","\\")+"'"+numpy_allow_pickle+")
	|dstarray = np."+Ид+"((srcarray1,srcarray2)"+ТекстОсь+")
	|np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', dstarray)";
	
	Возврат ТекстПрограммы;
	
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыРазбитьNPY(Параметры, Способ, Ось) Экспорт
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	Если Способ=0 Тогда      //По строкам
		Ид="hsplit";
	ИначеЕсли Способ=1 Тогда //По столбцам
		Ид="vsplit";
	ИначеЕсли Способ=2 Тогда //По глубине
		Ид="dsplit";
	ИначеЕсли Способ=3 Тогда //По оси
		Ид="split";
	КонецЕсли;	
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|dstarray1,dstarray2 = np."+Ид+"(srcarray, 2"+?(Способ>2 И Ось>0,", axis="+Ось,"")+")";
	Если Параметры.ПутьКВыходномуФайлу<>"" Тогда
		ТекстПрограммы=	ТекстПрограммы+
		"
		|np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', dstarray1)";
	КонецЕсли;
	Если Параметры.ПутьКПромежуточномуФайлу<>"" Тогда
		ТекстПрограммы=	ТекстПрограммы+
		"
		|np.save(u'"+СтрЗаменить(Параметры.ПутьКПромежуточномуФайлу,"\","\\")+"', dstarray2)";
	КонецЕсли;
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыПереставитьNPY(Параметры, ОсиОткуда, ОсиКуда, Обменять) Экспорт
	ОсиОткуда1=ОсиОткуда; ОсиКуда1=ОсиКуда;
	КоличествоОткуда = СтрРазделить(ОсиОткуда, ",", Ложь).Количество();
	КоличествоКуда = СтрРазделить(ОсиКуда, ",", Ложь).Количество();
	
	Если КоличествоОткуда>1 Тогда ОсиОткуда1="["+ОсиОткуда+"]" КонецЕсли;
	Если КоличествоКуда>1 Тогда ОсиКуда1="["+ОсиКуда+"]" КонецЕсли;
	
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|";
	Если Обменять Тогда
		МасОткуда = СтрРазделить(ОсиОткуда, ",", Ложь);
		МасКуда = СтрРазделить(ОсиКуда, ",", Ложь);
		ТекстПрограммы=ТекстПрограммы+
		"srcarray = np.swapaxes(srcarray, "+СокрЛП(МасОткуда[0])+", "+СокрЛП(МасКуда[0])+")
		|";
	Иначе
		ТекстПрограммы=ТекстПрограммы+
		"srcarray = np.moveaxis(srcarray, "+ОсиОткуда1+", "+ОсиКуда1+")
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+
	"np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', srcarray)";
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыТранспонироватьNPY(Параметры, Оси, Инвертировать=Ложь) Экспорт
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|";
	
	КоличествоОсей=СтрРазделить(Оси,",",Ложь).Количество();
	ТекстОси=?(КоличествоОсей>1,"("+Оси+")",Оси);
	Если Оси<>Неопределено Тогда
		ТекстПрограммы=ТекстПрограммы+
		"srcarray = np.transpose(srcarray, "+?(Инвертировать,"np.argsort (","")+ТекстОси+?(Инвертировать,")","")+")
		|";
	Иначе
		ТекстПрограммы=ТекстПрограммы+
		"srcarray = np.transpose(srcarray)
		|";
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', srcarray)";
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыИзменитьТипNPY(Параметры, ТипДанных) Экспорт
	ТекстТипДанных="";
	Если НЕ ТипДанных.Пустая() Тогда
		ТекстТипДанных=Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", ТипДанных);
	КонецЕсли;
	Если ТекстТипДанных="" Тогда Возврат Неопределено КонецЕсли;
	
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|srcarray = srcarray.astype(np."+ТекстТипДанных+")
	|np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', srcarray)";
	
	Возврат ТекстПрограммы;
КонецФункции

&НаСервере
Функция СформироватьТекстПрограммыДобавитьОсьNPY(Параметры, Ось) Экспорт
	ТекстОсь=СтрЗаменить(СокрЛП(Ось),Символы.НПП,"");
	
	ПутьКФайлу = Параметры.ВыбранныйПуть;
	
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import numpy as np
	|srcarray = np.load(u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
	|srcarray = np.expand_dims(srcarray, axis = "+ТекстОсь+")
	|np.save(u'"+СтрЗаменить(Параметры.ПутьКВыходномуФайлу,"\","\\")+"', srcarray)";
	
	Возврат ТекстПрограммы;
КонецФункции

Функция ДобавитьТекстЗагрузкиМассиваNPY(СписокФайлов, Текст) Экспорт
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	Строки = СтрРазделить(Текст,Символы.ПС,Ложь);
	КонецЗагрузки = Неопределено;
	Режим = 0;
	Для Сч=0 По Строки.Количество()-1 Цикл
		Если Режим=0 Тогда
			Если СтрНайти(Строки[Сч],"np.load(")>0 Тогда
				Режим=1; Продолжить
			ИначеЕсли СтрНайти(Строки[Сч],"np.save(")>0 Тогда
				НачалоСохранения=Сч; Прервать
			КонецЕсли;
		ИначеЕсли Режим=1 Тогда
			Если СтрНайти(Строки[Сч],"np.load(")=0 Тогда
				КонецЗагрузки=Сч; Прервать;
			КонецЕсли;
		ИначеЕсли СтрНайти(Строки[Сч],"np.save(")>0 Тогда
			Прервать
		КонецЕсли;
	КонецЦикла;
	МассивЗагрузить=Новый Массив; МассивСохранить = Новый Массив;
	Код0 = КодСимвола("0"); Код9 = КодСимвола("9");
	Для Каждого ПутьКФайлу Из СписокФайлов Цикл
		Файл = Новый Файл(ПутьКФайлу);
		ИмяМассива = Файл.ИмяБезРасширения;
		КодС = КодСимвола(СокрЛП(Файл.ИмяБезРасширения),1);
		Если КодС>=Код0 И КодС<=Код9 Тогда
			Префикс="a_"
		Иначе
			Префикс=""
		КонецЕсли;
		МассивЗагрузить.Добавить(Префикс+Файл.ИмяБезРасширения+" = np.load(u'"+СтрЗаменить(Файл.ПолноеИмя,"\","\\")+"'"+numpy_allow_pickle+")");
		МассивСохранить.Добавить("np.save(u'"+СтрЗаменить(Файл.ПолноеИмя,"\","\\")+"', "+Префикс+Файл.ИмяБезРасширения+")");
	КонецЦикла;
	
	Результат = "";
	СчСтроки=0;
	Если КонецЗагрузки <> Неопределено Тогда
		Пока СчСтроки<КонецЗагрузки Цикл
			Результат=Результат+Строки[СчСтроки]+"
			|";
			СчСтроки=СчСтроки+1;
		КонецЦикла;
	КонецЕсли;
	Для Сч=0 По МассивЗагрузить.Количество()-1 Цикл
		Результат=Результат+МассивЗагрузить[Сч]+"
		|";
	КонецЦикла;
	Пока СчСтроки<Строки.Количество() Цикл
		Результат=Результат+Строки[СчСтроки]+"
		|";
		СчСтроки=СчСтроки+1;
	КонецЦикла;
	Для Сч=0 По МассивСохранить.Количество()-1 Цикл
		Результат=Результат+МассивСохранить[Сч]+"
		|";
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СформироватьТекстПрограммыПроизвольнаяОперацияNPY(Параметры, Текст) Экспорт
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import numpy as np
	|"+Текст;
	Возврат ТекстПрограммы;
КонецФункции

#КонецОбласти
