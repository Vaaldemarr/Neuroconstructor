Функция ПосчитатьКоличествоСлоевМодели(МассивСлоев)
	Результат = 0;
	Для Каждого СтруктураСлоя Из МассивСлоев Цикл
		Если СтруктураСлоя.class_name = "Model" Тогда
			Результат = Результат + ПосчитатьКоличествоСлоевМодели(СтруктураСлоя.config.layers)
		Иначе
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СформироватьТекстПрограммыОбучения(Объект, НомераСтрок, Параметры, ОтображениеВыполнения, ЗагрузкаПараметров) Экспорт
	//ДеревоJSON=Новый ДеревоЗначений;
	//ДеревоJSON.Колонки.Добавить("Свойство");
	//ДеревоJSON.Колонки.Добавить("Значение");
	//ДеревоJSON.Колонки.Добавить("Тип");	
	//ДеревоJSON.Строки.Очистить();
	//Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(Объект.Модель.ТекстМоделиJSON, ДеревоJSON); //Заполняет ДеревоJSON
	//СтруктураДереваJSON = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON); //Преобразует ДеревоJSON в СтруктураДереваJSON с сохранением построения
	//ЧислоСлоев = ПосчитатьКоличествоСлоевМодели(СтруктураДереваJSON.config.layers);
	//Если ЧислоСлоев>7 Тогда
	//	Сообщение = "Количество слоев ("+СокрЛП(ЧислоСлоев)+") в модели "+Символ(34)+Объект.Модель.ИмяМодели+Символ(34)
	//	          + " привысило максимально допустимое для демонстрационной версии (7)!";
	//	Возврат Новый Структура("Ошибка, Текст", Истина, Сообщение);
	//КонецЕсли;

	Для Каждого СтрокаОбразец Из Объект.Образцы Цикл
		СтрокаОбразец.Идентификатор = "";
	КонецЦикла;
	Для Каждого СтрокаЦель Из Объект.Цели Цикл
		СтрокаЦель.Идентификатор = "";
	КонецЦикла;
	
	//СтрокиИмпорт = Новый Массив;
	
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы =
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|";
	Иначе
		ТекстПрограммы =
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	
	//СтрокиИмпорт.Добавить("import sys");
	//СтрокиИмпорт.Добавить(Нейро_ОбщийМодуль.ИдИмпортKeras());
	
	Если ОтображениеВыполнения<1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+Нейро_ОбщийМодуль.ИдFromKeras(
	"import os
	|import numpy as np
	|from keras.preprocessing.text import Tokenizer
	|import json
	|");
	
	//СтрокиИмпорт.Добавить("import os");
	//СтрокиИмпорт.Добавить("import numpy as np");
	//СтрокиИмпорт.Добавить("from keras.preprocessing.text import Tokenizer");
	//СтрокиИмпорт.Добавить("import json");
	
	Если Импорт_Scikit_learn(Объект) Тогда
		ТекстПрограммы=ТекстПрограммы+
		"from sklearn.preprocessing import MinMaxScaler
		|";
		//СтрокиИмпорт.Добавить("from sklearn.preprocessing import MinMaxScaler");
	КонецЕсли;
	
	Если Параметры.ИдентификаторFromJSON = "" Тогда
		ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	Иначе
		ИдентификаторFromJSON = Параметры.ИдентификаторFromJSON;
	КонецЕсли;
	
	СформироватьТекстПрограммы_ЗагрузкаПараметров(ЗагрузкаПараметров, ТекстПрограммы, НомераСтрок);
	
	// Модель
	СформироватьТекстПрограммы_ЗагрузкаМодели(Объект, Параметры, ТекстПрограммы, НомераСтрок);
	
	// Загрузка весов
	СформироватьТекстПрограммы_ЗагрузкаВесов(Объект, ТекстПрограммы, НомераСтрок, Параметры.ФайлЗагрузкиВесов);
	
	// Компиляция
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Компиляция", СтрЧислоСтрок(ТекстПрограммы)));
	РезультатКомпиляции = Нейро_СозданиеМоделиНаСервере.СформироватьТекстКомпиляцииМодели(Объект, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы));
	Если РезультатКомпиляции.Ошибка Тогда
		Возврат РезультатКомпиляции;
	Иначе
		ТекстПрограммы=ТекстПрограммы+РезультатКомпиляции.Текст;
	КонецЕсли;
	
	СформироватьТекстПрограммы_ПрямоеКодированиеОбразцов(Объект, ТекстПрограммы, НомераСтрок);
	
	// Словари
	МасСловариПутьКСловарю = Новый Массив; МасСловариИд = Новый Массив;
	СформироватьТекстПрограммы_Словари(Объект, ТекстПрограммы, НомераСтрок, ИдентификаторFromJSON, МасСловариПутьКСловарю, МасСловариИд);
	
	// Функции алгоритмов
	СформироватьТекстПрограммыСпискиАлгоритмов(Объект, ТекстПрограммы, НомераСтрок, Параметры);
	
	МассивНормализации = Новый Массив;
	
	// Загрузка образцов
	СформироватьТекстПрограммы_ЗагрузкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, Неопределено);
	
	// Загрузка и обработка целей
	СформироватьТекстПрограммы_ЗагрузкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации);
	
	// Последующая обработка образцов
	СформироватьТекстПрограммы_ОбработкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд,,МассивНормализации);
	
	// Обработка целей
	СформироватьТекстПрограммы_ОбработкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации);
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд);
	СформироватьТекстПрограммы_ПреобразованиеЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд);
	
	// Подготовка параметров обучения
	// Входы и выходы
	ПараметрыВходы="";
	Если Объект.Образцы.Количество()=1 Тогда
		ПараметрыВходы=Объект.Образцы[0].Идентификатор
	Иначе
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			Если ПараметрыВходы<>"" Тогда ПараметрыВходы=ПараметрыВходы+", " КонецЕсли;
			ПараметрыВходы=ПараметрыВходы+СтрокаОбразцы.Идентификатор;
		КонецЦикла;
		ПараметрыВходы="["+ПараметрыВходы+"]";
	КонецЕсли;
	
	ПараметрыВыходы="";
	Если Объект.Цели.Количество()=1 Тогда
		ПараметрыВыходы=Объект.Цели[0].Идентификатор
	Иначе
		Для Каждого СтрокаЦели Из Объект.Цели Цикл
			Если ПараметрыВыходы<>"" Тогда ПараметрыВыходы=ПараметрыВыходы+", " КонецЕсли;
			ПараметрыВыходы=ПараметрыВыходы+СтрокаЦели.Идентификатор;
		КонецЦикла;
		ПараметрыВыходы="["+ПараметрыВыходы+"]";
	КонецЕсли;
	
	// Остальные параметры обучения
	ПараметрыПакетов="";
	Если Объект.РазмерПакета>0 Тогда
		ПараметрыПакетов=", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,"");
	КонецЕсли;
	ПараметрыЭпох="";
	Если Объект.КоличествоЭпох>1 Тогда
		ПараметрыЭпох=", epochs="+СтрЗаменить(СокрЛП(Объект.КоличествоЭпох),Символы.НПП,"");
	КонецЕсли;
	ПараметрыОтображения="";
	Если Объект.ОтображениеВыполнения<>1 Тогда
		ПараметрыОтображения=", verbose="+СтрЗаменить(СокрЛП(Объект.ОтображениеВыполнения),Символы.НПП,"");
	КонецЕсли;
	ПараметрыКонтроля="";
	Если Объект.ВыделятьДляКонтроля<>0 Тогда
		//ПараметрыКонтроля=", validation_split="+СтрЗаменить(СокрЛП(Объект.ВыделятьДляКонтроля),",",".");
		ПараметрыКонтроля=", validation_split="+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",Перечисления.Нейро_Типы.Вещественное,Объект.ВыделятьДляКонтроля);
	КонецЕсли;
	ПараметрыПеремешивания="";
	Если Объект.Перемешивать=Ложь Тогда
		ПараметрыПеремешивания=", shuffle=False";
	КонецЕсли;
	
	// Самоконтроль
	ТекстСамоконтроль = СформироватьТекстПрограммы_Самоконтроль(Объект, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы));
	
	Если ТекстСамоконтроль<>"" Тогда
		ТекстПрограммы=ТекстПрограммы+
		"callbacks_list = [
		|"+ТекстСамоконтроль+"]
		|"
	КонецЕсли;
	ПараметрыСамоконтроля=?(ТекстСамоконтроль="","",", callbacks=callbacks_list");
	
	ПараметрыНачальнойЭпохи=?(Объект.НачальнаяЭпоха>0,", initial_epoch="+СтрЗаменить(СокрЛП(Объект.НачальнаяЭпоха), Символы.НПП,""),"");
	
	// Обучить
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Обучение", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	"history = model.fit("+ПараметрыВходы+", "+ПараметрыВыходы+ПараметрыПакетов+ПараметрыЭпох+ПараметрыОтображения+ПараметрыСамоконтроля+ПараметрыКонтроля+ПараметрыПеремешивания+ПараметрыНачальнойЭпохи+")
	|";
	
	Если Объект.ПутьКСети<>"" Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Сохранение"));
		ТекстПрограммы=ТекстПрограммы+
		"model.save(u'"+СтрЗаменить(Объект.ПутьКСети,"\","\\")+"')
		|";
	КонецЕсли;
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*История", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	"history1={'epoch':history.epoch, 'history':history.history, 'params':history.params}
	|for array_name in history1['history']:
    |    if(type(history1['history'][array_name][0])!=np.float64):
	|        history1['history'][array_name] = [np.float64(item) for item in history1['history'][array_name]]
    |    elif(np.isnan(history1['history'][array_name][0])):
    |        history1['history'][array_name] = [0. for item in history1['history'][array_name]]
	|for param_name in history1['params']:
    |    if(type(history1['params'][param_name])==np.int32):
	|        history1['params'][param_name] = np.int(history1['params'][param_name])
	|with open(u'"+Параметры.ФайлРезультатов+"', 'w', encoding='utf-8') as file:
	|    json.dump(history1, file)
	|normalization_list = []
	|";
	
	Если МассивНормализации.Количество()>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результаты нормализации", СтрЧислоСтрок(ТекстПрограммы)));
		Для Каждого СтруктураНормализация Из МассивНормализации Цикл
			ТекстПрограммы=ТекстПрограммы+"normalization_list.append({'layer':'"+СтруктураНормализация.ИмяСлоя+"'";
			Если СтруктураНормализация.Образец Тогда
				Если СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':0"+", 'mean':"+СтруктураНормализация.Среднее+".tolist(), 'std':"+СтруктураНормализация.СтандартноеОтклонение+".tolist()";
				ИначеЕсли СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':1"+
					", 'data_max_':"+СтруктураНормализация.Нормировщик+".data_max_.tolist()"+
					", 'data_min_':"+СтруктураНормализация.Нормировщик+".data_min_.tolist()"+
					", 'data_range_':"+СтруктураНормализация.Нормировщик+".data_range_.tolist()"+
					", 'feature_range':"+СтруктураНормализация.Нормировщик+".feature_range.tolist()"+
					", 'min_':"+СтруктураНормализация.Нормировщик+".min_.tolist()"+
					", 'n_samples_seen_':"+СтруктураНормализация.Нормировщик+".n_samples_seen_.tolist()"+
					", 'scale_':"+СтруктураНормализация.Нормировщик+".scale_.tolist()
					|"
				КонецЕсли;
			Иначе //Цель
				Если СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':2, 'unique':"+СтруктураНормализация.Уникальных;
				ИначеЕсли СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':3"+
					", 'data_max_':"+СтруктураНормализация.Нормировщик+".data_max_.tolist()"+
					", 'data_min_':"+СтруктураНормализация.Нормировщик+".data_min_.tolist()"+
					", 'data_range_':"+СтруктураНормализация.Нормировщик+".data_range_.tolist()"+
					", 'feature_range':"+СтруктураНормализация.Нормировщик+".feature_range.tolist()"+
					", 'min_':"+СтруктураНормализация.Нормировщик+".min_.tolist()"+
					", 'n_samples_seen_':"+СтруктураНормализация.Нормировщик+".n_samples_seen_.tolist()"+
					", 'scale_':"+СтруктураНормализация.Нормировщик+".scale_.tolist()
					|"
				КонецЕсли;
			КонецЕсли;
			//Если СтруктураНормализация.Свойство("Уникальных") Тогда
			//	ТекстПрограммы=ТекстПрограммы+", 'unique':"+СтруктураНормализация.Уникальных;
			//Иначе
			//	ТекстПрограммы=ТекстПрограммы+", 'mean':"+СтруктураНормализация.Среднее+".tolist(), 'std':"+СтруктураНормализация.СтандартноеОтклонение+".tolist()";
			//КонецЕсли;
			ТекстПрограммы=ТекстПрограммы+"})
			|";
		КонецЦикла;
	КонецЕсли;
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результат нормализации", СтрЧислоСтрок(ТекстПрограммы),"Сохранение"));
	ТекстПрограммы=ТекстПрограммы+
	"with open(u'"+СтрЗаменить(Параметры.ФайлНормализации,"\","\\")+"', 'w', encoding='utf-8') as file:
	|    json.dump(normalization_list, file)";
	
	Возврат Новый Структура("Ошибка, Текст", Ложь, ТекстПрограммы);
КонецФункции

Функция СформироватьТекстПрограммыОценки(Объект, НомераСтрок, Параметры, ОтображениеВыполнения, Нормализация) Экспорт
	//Для Каждого СтрокаОбразец Из Объект.Образцы Цикл
	//	СтрокаОбразец.Идентификатор = "";
	//КонецЦикла;
	//Для Каждого СтрокаЦель Из Объект.Цели Цикл
	//	СтрокаЦель.Идентификатор = "";
	//КонецЦикла;
	
	//ТекстПрограммы=
	//"import sys
	//|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	//|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	//|";
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы =
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|";
	Иначе
		ТекстПрограммы =
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	Если ОтображениеВыполнения<1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+Нейро_ОбщийМодуль.ИдFromKeras(
	"import os
	|import numpy as np
	|from keras.preprocessing.text import Tokenizer
	|import json
	|");
	
	Если Импорт_Scikit_learn(Объект) Тогда
		ТекстПрограммы=ТекстПрограммы+
		"from sklearn.preprocessing import MinMaxScaler
		|";
	КонецЕсли;
	
	СчКлючей=0;
	Для Каждого КиЗ Из Нормализация Цикл СчКлючей=СчКлючей+1; КонецЦикла;
	Если СчКлючей>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Данные нормализации", СтрЧислоСтрок(ТекстПрограммы), "Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"with open(u'"+СтрЗаменить(Параметры.ФайлНормализации,"\","\\")+"', 'r') as read_file:
		|    normalization_list = json.load(read_file)
		|";
	КонецЕсли;
	
	Если Параметры.ИдентификаторFromJSON = "" Тогда
		ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	Иначе
		ИдентификаторFromJSON = Параметры.ИдентификаторFromJSON;
	КонецЕсли;
	
	// Модель
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы)));
	//Если Объект.ПутьКСетиЗагрузка<>"" Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"model = keras.models.load_model(u'"+СтрЗаменить(Параметры.ПутьКСетиЗагрузка,"\","\\")+"')
		|";
	//КонецЕсли;
	
	// Загрузка весов
	//Если Объект.ЗагружатьВесаМоделей Тогда
		Если Параметры.ПутьККонтрольнойТочке<>"" Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка веса"));
			ТекстПрограммы=ТекстПрограммы+
			"model.load_weights(u'"+СтрЗаменить(Параметры.ПутьККонтрольнойТочке,"\","\\")+"'"+?(Параметры.ЗагружатьСлоиПоИменам,", by_name=True","")+")
			|";
		КонецЕсли;
		
	СформироватьТекстПрограммы_ПрямоеКодированиеОбразцов(Объект, ТекстПрограммы, НомераСтрок);		
	
	// Словари
	МасСловариПутьКСловарю = Новый Массив; МасСловариИд = Новый Массив;
	СформироватьТекстПрограммы_Словари(Объект, ТекстПрограммы, НомераСтрок, ИдентификаторFromJSON, МасСловариПутьКСловарю, МасСловариИд);
	
	// Функции алгоритмов
	СформироватьТекстПрограммыСпискиАлгоритмов(Объект, ТекстПрограммы, НомераСтрок, Параметры);
	
	МассивНормализации = Новый Массив;
	
	// Загрузка образцов
	СформироватьТекстПрограммы_ЗагрузкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, Неопределено,,Истина);
	
	// Загрузка и обработка целей
	СформироватьТекстПрограммы_ЗагрузкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации);
	
	// Последующая обработка образцов
	СформироватьТекстПрограммы_ОбработкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд,,МассивНормализации,Нормализация);
	
	// Обработка целей
	СформироватьТекстПрограммы_ОбработкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации, Нормализация);
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд);
	СформироватьТекстПрограммы_ПреобразованиеЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд);
	
	// Подготовка параметров обучения
	// Входы и выходы
	ПараметрыВходы="";
	Если Объект.Образцы.Количество()=1 Тогда
		ПараметрыВходы=Объект.Образцы[0].Идентификатор
	Иначе
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			Если ПараметрыВходы<>"" Тогда ПараметрыВходы=ПараметрыВходы+", " КонецЕсли;
			ПараметрыВходы=ПараметрыВходы+СтрокаОбразцы.Идентификатор;
		КонецЦикла;
		ПараметрыВходы="["+ПараметрыВходы+"]";
	КонецЕсли;
	
	ПараметрыВыходы="";
	Если Объект.Цели.Количество()=1 Тогда
		ПараметрыВыходы=Объект.Цели[0].Идентификатор
	Иначе
		Для Каждого СтрокаЦели Из Объект.Цели Цикл
			Если ПараметрыВыходы<>"" Тогда ПараметрыВыходы=ПараметрыВыходы+", " КонецЕсли;
			ПараметрыВыходы=ПараметрыВыходы+СтрокаЦели.Идентификатор;
		КонецЦикла;
		ПараметрыВыходы="["+ПараметрыВыходы+"]";
	КонецЕсли;
	
	// Остальные параметры обучения
	ПараметрыПакетов="";
	Если Объект.РазмерПакета>0 Тогда
		ПараметрыПакетов=", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,"");
	КонецЕсли;
	ПараметрыОтображения="";
	Если Объект.ОтображениеВыполнения<>1 Тогда
		ПараметрыОтображения=", verbose="+СтрЗаменить(СокрЛП(Объект.ОтображениеВыполнения),Символы.НПП,"");
	КонецЕсли;
	
	// Самоконтроль
	ТекстСамоконтроль = СформироватьТекстПрограммы_Самоконтроль(Объект, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы));
	
	Если ТекстСамоконтроль<>"" Тогда
		ТекстПрограммы=ТекстПрограммы+
		"callbacks_list = [
		|"+ТекстСамоконтроль+"]
		|"
	КонецЕсли;
	ПараметрыСамоконтроля=?(ТекстСамоконтроль="","",", callbacks=callbacks_list");
	ПараметрыПроходов = ?(Объект.ПроходовОценки=0, "", ", steps="+СтрЗаменить(СокрЛП(Объект.ПроходовОценки),Символы.НПП,""));
	
	// Тестировать
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Оценка", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	//"loss, acc = model.evaluate("+ПараметрыВходы+", "+ПараметрыВыходы+ПараметрыПакетов+ПараметрыОтображения+ПараметрыСамоконтроля+")
	"result = model.evaluate("+ПараметрыВходы+", "+ПараметрыВыходы+ПараметрыПакетов+ПараметрыОтображения+ПараметрыПроходов+ПараметрыСамоконтроля+")
	|";
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результаты", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	"result_dic = {'values':result, 'metrics_names':model.metrics_names, 'metrics':[]}
	|val_iterable = True
	|try:
	|    iterator = iter(result_dic['values'])
	|except TypeError:
	|    val_iterable = False
	|else:
	|    val_iterable = True
	|if val_iterable:
	|    for i, next_val in enumerate(result_dic['values']):
    |        if(type(next_val)==np.float32):
    |            result_dic['values'][i] = np.float(result_dic['values'][i])
	|else:
	|    if(type(result_dic['values'])==np.float32):
	|        result_dic['values'] = np.float(result_dic['values'])
	|for metric in model.metrics:
	|    if(type(metric)==str):
	|        result_dic['metrics'].append(metric)
	|with open(u'"+Параметры.ФайлРезультатов+"', 'w', encoding='utf-8') as file:
	|    json.dump(result_dic, file)";
	
	Возврат ТекстПрограммы;
	
КонецФункции

Функция СформироватьТекстПрограммыОценкиГенератор(Объект, НомераСтрок, Параметры, ОтображениеВыполнения, Нормализация) Экспорт
	//ТекстПрограммы =
	//"import sys
	//|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	//|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	//|";
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы =
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|";
	Иначе
		ТекстПрограммы =
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	Если ОтображениеВыполнения<1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+Нейро_ОбщийМодуль.ИдFromKeras(
	"import os
	|import numpy as np
	|from keras.preprocessing.text import Tokenizer
	|from keras.preprocessing.image import ImageDataGenerator,  img_to_array, load_img
	|from keras.preprocessing.sequence import TimeseriesGenerator
	|import json
	|");
	
	Если Импорт_Scikit_learn(Объект) Тогда
		ТекстПрограммы=ТекстПрограммы+
		"from sklearn.preprocessing import MinMaxScaler
		|";
	КонецЕсли;
	
	СчКлючей=0;
	Для Каждого КиЗ Из Нормализация Цикл СчКлючей=СчКлючей+1; КонецЦикла;
	Если СчКлючей>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Данные нормализации", СтрЧислоСтрок(ТекстПрограммы), "Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"with open(u'"+СтрЗаменить(Параметры.ФайлНормализации,"\","\\")+"', 'r') as read_file:
		|    normalization_list = json.load(read_file)
		|";
	КонецЕсли;
	
	Если Параметры.ИдентификаторFromJSON = "" Тогда
		ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	Иначе
		ИдентификаторFromJSON = Параметры.ИдентификаторFromJSON;
	КонецЕсли;
	
	// Модель
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы)));
	//Если Объект.ПутьКСетиЗагрузка<>"" Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"model = keras.models.load_model(u'"+СтрЗаменить(Параметры.ПутьКСетиЗагрузка,"\","\\")+"')
		|";
	//КонецЕсли;
	
	// Загрузка весов
	//Если Объект.ЗагружатьВесаМоделей Тогда
		Если Параметры.ПутьККонтрольнойТочке<>"" Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка_Веса"));
			ТекстПрограммы=ТекстПрограммы+
			"model.load_weights(u'"+СтрЗаменить(Параметры.ПутьККонтрольнойТочке,"\","\\")+"'"+?(Параметры.ЗагружатьСлоиПоИменам,", by_name=True","")+")
			|";
		КонецЕсли;
		
	СформироватьТекстПрограммы_ПрямоеКодированиеОбразцов(Объект, ТекстПрограммы, НомераСтрок);		
	
	// Словари
	МасСловариПутьКСловарю = Новый Массив; МасСловариИд = Новый Массив;
	СформироватьТекстПрограммы_Словари(Объект, ТекстПрограммы, НомераСтрок, ИдентификаторFromJSON, МасСловариПутьКСловарю, МасСловариИд);
	
	МассивЭтоГенераторИзКаталога = Новый Массив;
	МассивЭтоГенератор = Новый Массив;
	ГенераторыОбразцов = Новый Массив;
	ЗаполнитьМассивыЭтоГенератор(Объект, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов);
	
	// Функции алгоритмов
	СформироватьТекстПрограммыСпискиАлгоритмов(Объект, ТекстПрограммы, НомераСтрок, Параметры);
	
	МассивНормализации = Новый Массив;
	
	// Загрузка образцов
	СформироватьТекстПрограммы_ЗагрузкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенераторИзКаталога, Ложь, Истина);
	
	// Загрузка и обработка целей
	СформироватьТекстПрограммы_ЗагрузкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации);
	
	// Последующая обработка образцов
	СформироватьТекстПрограммы_ОбработкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор, МассивНормализации, Нормализация);
	
	// Обработка целей
	СформироватьТекстПрограммы_ОбработкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации, Нормализация);
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор);
	СформироватьТекстПрограммы_ПреобразованиеЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор);

	// Учебный генератор
	СформироватьТекстПрограммы_УчебныйГенератор(Объект, ТекстПрограммы, НомераСтрок);
	
	//Пользовательские генераторы
	РезультатПользовательскиеГенераторы=СформироватьТекстПрограммы_ПользовательскиеГенераторы(Объект, ТекстПрограммы, НомераСтрок);
	Если РезультатПользовательскиеГенераторы.Ошибка Тогда
		Возврат РезультатПользовательскиеГенераторы;
	КонецЕсли;
	
	//Если МассивЭтоГенератор.Найти(Истина)<>Неопределено Тогда
		ТекстПрограммы=ТекстПрограммы+
		"gen_info=[]
		|";
	//КонецЕсли;
	//Генераторы (не из каталога)
	СформироватьТекстПрограммы_Генераторы(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов, Ложь, Истина, МассивНормализации, Нормализация);
	
	// Генератор
	СформироватьТекстПрограммы_Генератор(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор);
	
	//Общий генератор(ы)
	//ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексНачало),Символы.НПП,"");
	////ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	//Если Объект.ИндексОкончание=0 Тогда
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпоху)),Символы.НПП,"");
	//Иначе
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	//КонецЕсли;
	//РазмерПакета    = ?(Объект.РазмерПакета=0,"",", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,""));
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор"));
	//ТекстПрограммы=ТекстПрограммы+
	//"train_gen = generator("+ИндексНачало+","+ИндексОкончание+?(Объект.Перемешивать,", shuffle=True","")+РазмерПакета+")
	//|";
	СформироватьТекстПрограммы_ВызовОбщегоГенератора(Объект, ТекстПрограммы, НомераСтрок, Истина);
	Если Объект.ВидГенератора = 1 Тогда
		РезультатПрямойГенератор = СформироватьТекстПрограммы_ВызовПрямогоГенератора(Объект, ТекстПрограммы, НомераСтрок);
		Если РезультатПрямойГенератор.Ошибка Тогда
			Возврат РезультатПрямойГенератор;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ОтображениеВыполнения<>1 Тогда
		ПараметрыОтображения=", verbose="+СтрЗаменить(СокрЛП(Объект.ОтображениеВыполнения),Символы.НПП,"");
	КонецЕсли;
	
	// Самоконтроль
	ТекстСамоконтроль = СформироватьТекстПрограммы_Самоконтроль(Объект, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы));
	Если ТекстСамоконтроль<>"" Тогда
		ТекстПрограммы=ТекстПрограммы+
		"callbacks_list = [
		|"+ТекстСамоконтроль+"]
		|"
	КонецЕсли;
	ПараметрыСамоконтроля=?(ТекстСамоконтроль="","",", callbacks=callbacks_list");
	ПараметрыПроходов = ?(Объект.ПроходовОценки=0, "", ", steps="+СтрЗаменить(СокрЛП(Объект.ПроходовОценки),Символы.НПП,""));
	
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("fit_generator") Тогда
		ИдОценитьГенератор = "evaluate_generator";
	Иначе
		ИдОценитьГенератор = "evaluate";
	КонецЕсли;
	
	// Тестировать
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Оценка", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	//"loss, acc = model.evaluate("+ПараметрыВходы+", "+ПараметрыВыходы+ПараметрыПакетов+ПараметрыОтображения+ПараметрыСамоконтроля+")
	"result = model."+ИдОценитьГенератор+"(train_gen"+ПараметрыПроходов+ПараметрыСамоконтроля+ПараметрыОтображения+")
	|";
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результаты", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	//"result_dic = {'values':result, 'metrics_names':model.metrics_names, 'metrics':[]}
	//|for i, next_val in enumerate(result_dic['values']):
	//|    if(type(next_val)==np.float32):
	//|        result_dic['values'][i] = np.float(result_dic['values'][i])
	//|for metric in model.metrics:
	//|    if(type(metric)==str):
	//|        result_dic['metrics'].append(metric)
	//|with open(u'"+Параметры.ФайлРезультатов+"', 'w', encoding='utf-8') as file:
	//|    json.dump(result_dic, file)";
	"result_dic = {'values':result, 'metrics_names':model.metrics_names, 'metrics':[]}
	|val_iterable = True
	|try:
	|    iterator = iter(result_dic['values'])
	|except TypeError:
	|    val_iterable = False
	|else:
	|    val_iterable = True
	|if val_iterable:
	|    for i, next_val in enumerate(result_dic['values']):
    |        if(type(next_val)==np.float32):
    |            result_dic['values'][i] = np.float(result_dic['values'][i])
	|else:
	|    if(type(result_dic['values'])==np.float32):
	|        result_dic['values'] = np.float(result_dic['values'])
	|for metric in model.metrics:
	|    if(type(metric)==str):
	|        result_dic['metrics'].append(metric)
	|with open(u'"+Параметры.ФайлРезультатов+"', 'w', encoding='utf-8') as file:
	|    json.dump(result_dic, file)";
	
	Возврат ТекстПрограммы;
	
КонецФункции

Функция СформироватьТекстПрограммыПрогноза(Объект, НомераСтрок, Параметры, ОтображениеВыполнения, Нормализация, Денормализовать) Экспорт
	//Для Каждого СтрокаОбразец Из Объект.Образцы Цикл
	//	СтрокаОбразец.Идентификатор = "";
	//КонецЦикла;
	//Для Каждого СтрокаЦель Из Объект.Цели Цикл
	//	СтрокаЦель.Идентификатор = "";
	//КонецЦикла;
	
	//ТекстПрограммы=
	//"import sys
	//|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	//|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	//|";
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы =
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|";
	Иначе
		ТекстПрограммы =
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	Если ОтображениеВыполнения<1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+Нейро_ОбщийМодуль.ИдFromKeras(
	"import os
	|import numpy as np
	|from keras.preprocessing.text import Tokenizer
	|import json
	|");
	
	Если Импорт_Scikit_learn(Объект) Тогда
		ТекстПрограммы=ТекстПрограммы+
		"from sklearn.preprocessing import MinMaxScaler
		|";
	КонецЕсли;
	
	СчКлючей=0;
	Для Каждого КиЗ Из Нормализация Цикл СчКлючей=СчКлючей+1; КонецЦикла;
	Если СчКлючей>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Данные нормализации", СтрЧислоСтрок(ТекстПрограммы), "Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"with open(u'"+СтрЗаменить(Параметры.ФайлНормализации,"\","\\")+"', 'r') as read_file:
		|    normalization_list = json.load(read_file)
		|";
	КонецЕсли;
	
	Если Параметры.ИдентификаторFromJSON = "" Тогда
		ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	Иначе
		ИдентификаторFromJSON = Параметры.ИдентификаторFromJSON;
	КонецЕсли;
	
	// Модель
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы)));
	//Если Объект.ПутьКСетиЗагрузка<>"" Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"model = keras.models.load_model(u'"+СтрЗаменить(Параметры.ПутьКСетиЗагрузка,"\","\\")+"')
		|";
	//КонецЕсли;
	
	// Загрузка весов
	//Если Объект.ЗагружатьВесаМоделей Тогда
		Если Параметры.ПутьККонтрольнойТочке<>"" Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка_Веса"));
			ТекстПрограммы=ТекстПрограммы+
			"model.load_weights(u'"+СтрЗаменить(Параметры.ПутьККонтрольнойТочке,"\","\\")+"'"+?(Параметры.ЗагружатьСлоиПоИменам,", by_name=True","")+")
			|";
		КонецЕсли;
		
	СформироватьТекстПрограммы_ПрямоеКодированиеОбразцов(Объект, ТекстПрограммы, НомераСтрок);	
	
	// Словари
	МасСловариПутьКСловарю = Новый Массив; МасСловариИд = Новый Массив;
	СформироватьТекстПрограммы_Словари(Объект, ТекстПрограммы, НомераСтрок, ИдентификаторFromJSON, МасСловариПутьКСловарю, МасСловариИд);
	
	// Функции алгоритмов
	СформироватьТекстПрограммыСпискиАлгоритмов(Объект, ТекстПрограммы, НомераСтрок, Параметры, Истина);
		
	МассивНормализации = Новый Массив;
	// Загрузка образцов
	СформироватьТекстПрограммы_ЗагрузкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, Неопределено);
	
	// Последующая обработка образцов
	СформироватьТекстПрограммы_ОбработкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд,,МассивНормализации,Нормализация);
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд);
	//СформироватьТекстПрограммы_ПреобразованиеЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд);
	
	// Подготовка параметров обучения
	// Входы и выходы
	ПараметрыВходы="";
	Если Объект.Образцы.Количество()=1 Тогда
		ПараметрыВходы=Объект.Образцы[0].Идентификатор
	Иначе
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			Если ПараметрыВходы<>"" Тогда ПараметрыВходы=ПараметрыВходы+", " КонецЕсли;
			ПараметрыВходы=ПараметрыВходы+СтрокаОбразцы.Идентификатор;
		КонецЦикла;
		ПараметрыВходы="["+ПараметрыВходы+"]";
	КонецЕсли;
	
	// Остальные параметры обучения
	ПараметрыПакетов="";
	Если Объект.РазмерПакета>0 Тогда
		ПараметрыПакетов=", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,"");
	КонецЕсли;
	ПараметрыОтображения="";
	Если Объект.ОтображениеВыполнения<>1 Тогда
		ПараметрыОтображения=", verbose="+СтрЗаменить(СокрЛП(Объект.ОтображениеВыполнения),Символы.НПП,"");
	КонецЕсли;
	
	// Самоконтроль
	ТекстСамоконтроль = СформироватьТекстПрограммы_Самоконтроль(Объект, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы));
	
	Если ТекстСамоконтроль<>"" Тогда
		ТекстПрограммы=ТекстПрограммы+
		"callbacks_list = [
		|"+ТекстСамоконтроль+"]
		|"
	КонецЕсли;
	ПараметрыСамоконтроля=?(ТекстСамоконтроль="","",", callbacks=callbacks_list");
	ПараметрыПроходов = ?(Объект.ПроходовПрогноза=0, "", ", steps="+СтрЗаменить(СокрЛП(Объект.ПроходовПрогноза),Символы.НПП,""));
	// Тестировать
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Прогноз", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	//"loss, acc = model.evaluate("+ПараметрыВходы+", "+ПараметрыВыходы+ПараметрыПакетов+ПараметрыОтображения+ПараметрыСамоконтроля+")
	"result = model.predict("+ПараметрыВходы+ПараметрыПакетов+ПараметрыОтображения+ПараметрыПроходов+")
	|predictions = []
	|";
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеРезультатовПрогноза(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд);
	
	Если Объект.Цели.Количество()=1 Тогда
		Если Денормализовать Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Денормализовать", СтрЧислоСтрок(ТекстПрограммы), Объект.Цели[0].ИмяСлоя));
			Денормализация = СформироватьТекстПрограммы_ДенормализацияЦели(Объект, 0, Неопределено, МассивНормализации); 
		Иначе
			Денормализация=""
		КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результат прогноза", СтрЧислоСтрок(ТекстПрограммы), Объект.Цели[0].ИмяСлоя));
		ТекстПрограммы=ТекстПрограммы+
		Денормализация+
		"predictions.append({'layer':'"+Объект.Цели[0].ИмяСлоя+"','values':result.tolist()})
		|";
	Иначе
		Для Сч=0 По Объект.Цели.Количество()-1 Цикл
			Если Денормализовать Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Денормализовать", СтрЧислоСтрок(ТекстПрограммы), Объект.Цели[Сч].ИмяСлоя));
				Денормализация = СформироватьТекстПрограммы_ДенормализацияЦели(Объект, Сч, Неопределено, МассивНормализации, Истина); 
			Иначе
				Денормализация=""
			КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результат прогноза", СтрЧислоСтрок(ТекстПрограммы), Объект.Цели[Сч].ИмяСлоя));
			ТекстПрограммы=ТекстПрограммы+
			"predictions.append({'layer':'"+Объект.Цели[Сч].ИмяСлоя+"','values':result["+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"")+"].tolist()})
			|";
		КонецЦикла;
	КонецЕсли;
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результат прогноза", СтрЧислоСтрок(ТекстПрограммы), "Запись в json"));
	ТекстПрограммы=ТекстПрограммы+
	"with open(u'"+СтрЗаменить(Параметры.ФайлРезультатов,"\","\\")+"', 'w', encoding='utf-8') as file:
	|    json.dump(predictions, file)";
	//Для Сч=0 По Объект.Прогнозы.Количество()-1 Цикл
	//	ТекстПрограммы=ТекстПрограммы+
	//	"np.savetxt(u'"+СтрЗаменить(Объект.Прогнозы[Сч].ФайлРезультата,"\","\\")+"', result["+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"")+"], fmt='%s', delimiter='\t')
	//	|";
	//КонецЦикла;
	
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результаты", СтрЧислоСтрок(ТекстПрограммы)));
	//ТекстПрограммы=ТекстПрограммы+
	//"result_dic = {'values':result, 'metrics_names':model.metrics_names, 'metrics':model.metrics}
	//|with open(u'"+Параметры.ФайлРезультатов+"', 'w', encoding='utf-8') as file:
	//|    json.dump(result_dic, file)";
	
	Возврат ТекстПрограммы;
	
КонецФункции

Функция СформироватьТекстПрограммыПрогнозаГенератор(Объект, НомераСтрок, Параметры, ОтображениеВыполнения, Нормализация, Денормализовать) Экспорт
	
	//ТекстПрограммы=
	//"import sys
	//|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	//|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	//|";
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы =
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|";
	Иначе
		ТекстПрограммы =
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	Если ОтображениеВыполнения<1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+Нейро_ОбщийМодуль.ИдFromKeras(
	"import os
	|import numpy as np
	|from keras.preprocessing.text import Tokenizer
	|from keras.preprocessing.image import ImageDataGenerator,  img_to_array, load_img
	|from keras.preprocessing.sequence import TimeseriesGenerator
	|import json
	|");
	
	Если Импорт_Scikit_learn(Объект) Тогда
		ТекстПрограммы=ТекстПрограммы+
		"from sklearn.preprocessing import MinMaxScaler
		|";
	КонецЕсли;
	
	СчКлючей=0;
	Для Каждого КиЗ Из Нормализация Цикл СчКлючей=СчКлючей+1; КонецЦикла;
	Если СчКлючей>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Данные нормализации", СтрЧислоСтрок(ТекстПрограммы), "Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"with open(u'"+СтрЗаменить(Параметры.ФайлНормализации,"\","\\")+"', 'r') as read_file:
		|    normalization_list = json.load(read_file)
		|";
	КонецЕсли;
	
	Если Параметры.ИдентификаторFromJSON = "" Тогда
		ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	Иначе
		ИдентификаторFromJSON = Параметры.ИдентификаторFromJSON;
	КонецЕсли;
	
	// Модель
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы)));
	//Если Объект.ПутьКСетиЗагрузка<>"" Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
		ТекстПрограммы=ТекстПрограммы+
		"model = keras.models.load_model(u'"+СтрЗаменить(Параметры.ПутьКСетиЗагрузка,"\","\\")+"')
		|";
	//КонецЕсли;
	
	// Загрузка весов
	//Если Объект.ЗагружатьВесаМоделей Тогда
		Если Параметры.ПутьККонтрольнойТочке<>"" Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка_Веса"));
			ТекстПрограммы=ТекстПрограммы+
			"model.load_weights(u'"+СтрЗаменить(Параметры.ПутьККонтрольнойТочке,"\","\\")+"'"+?(Параметры.ЗагружатьСлоиПоИменам,", by_name=True","")+")
			|";
		КонецЕсли;
		
	СформироватьТекстПрограммы_ПрямоеКодированиеОбразцов(Объект, ТекстПрограммы, НомераСтрок);	
	
	// Словари
	МасСловариПутьКСловарю = Новый Массив; МасСловариИд = Новый Массив;
	СформироватьТекстПрограммы_Словари(Объект, ТекстПрограммы, НомераСтрок, ИдентификаторFromJSON, МасСловариПутьКСловарю, МасСловариИд, Истина);
	
	
	МассивЭтоГенераторИзКаталога = Новый Массив; МассивЭтоГенератор = Новый Массив;	ГенераторыОбразцов = Новый Массив;
	ЗаполнитьМассивыЭтоГенератор(Объект, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов);
	
	// Функции алгоритмов
	СформироватьТекстПрограммыСпискиАлгоритмов(Объект, ТекстПрограммы, НомераСтрок, Параметры);
	
	МассивНормализации = Новый Массив;
	// Загрузка образцов
	СформироватьТекстПрограммы_ЗагрузкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенераторИзКаталога, Истина);
	
	// Загрузка и обработка целей
	//СформироватьТекстПрограммы_ЗагрузкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации);
	
	// Последующая обработка образцов
	СформироватьТекстПрограммы_ОбработкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор,МассивНормализации,Нормализация);
	
	// обработка целей
	//СформироватьТекстПрограммы_ОбработкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации, Нормализация);
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор);
	//СформироватьТекстПрограммы_ПреобразованиеЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор);
	
	// Учебный генератор
	СформироватьТекстПрограммы_УчебныйГенератор(Объект, ТекстПрограммы, НомераСтрок, Истина);
	
	//Пользовательские генераторы
	РезультатПользовательскиеГенераторы=СформироватьТекстПрограммы_ПользовательскиеГенераторы(Объект, ТекстПрограммы, НомераСтрок);
	Если РезультатПользовательскиеГенераторы.Ошибка Тогда
		Возврат РезультатПользовательскиеГенераторы;
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"gen_info=[]
	|";
		
	//Генераторы (не из каталога)
	СформироватьТекстПрограммы_Генераторы(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов, Истина,,МассивНормализации,Нормализация);

	// Генератор
	СформироватьТекстПрограммы_Генератор(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, Истина);
	
	//Общий генератор(ы)
	//ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексНачало),Символы.НПП,"");
	////ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	//Если Объект.ИндексОкончание=0 Тогда
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпоху)),Символы.НПП,"");
	//Иначе
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	//КонецЕсли;
	//РазмерПакета    = ?(Объект.РазмерПакета=0,"",", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,""));
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор"));
	//ТекстПрограммы=ТекстПрограммы+
	//"train_gen = generator("+ИндексНачало+","+ИндексОкончание+", shuffle=True"+РазмерПакета+")
	//|";
	СформироватьТекстПрограммы_ВызовОбщегоГенератора(Объект, ТекстПрограммы, НомераСтрок, Истина);
	Если Объект.ВидГенератора = 1 Тогда
		РезультатПрямойГенератор = СформироватьТекстПрограммы_ВызовПрямогоГенератора(Объект, ТекстПрограммы, НомераСтрок);
		Если РезультатПрямойГенератор.Ошибка Тогда
			Возврат РезультатПрямойГенератор;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка параметров прогноза
	// Входы
	//ПараметрыВходы="";
	//Если Объект.Образцы.Количество()=1 Тогда
	//	ПараметрыВходы=Объект.Образцы[0].Идентификатор
	//Иначе
	//	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
	//		Если ПараметрыВходы<>"" Тогда ПараметрыВходы=ПараметрыВходы+", " КонецЕсли;
	//		ПараметрыВходы=ПараметрыВходы+СтрокаОбразцы.Идентификатор;
	//	КонецЦикла;
	//	ПараметрыВходы="["+ПараметрыВходы+"]";
	//КонецЕсли;
	
	// Остальные параметры обучения
	ПараметрыПакетов="";
	Если Объект.РазмерПакета>0 Тогда
		ПараметрыПакетов=", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,"");
	КонецЕсли;
	ПараметрыОтображения="";
	Если Объект.ОтображениеВыполнения<>1 Тогда
		ПараметрыОтображения=", verbose="+СтрЗаменить(СокрЛП(Объект.ОтображениеВыполнения),Символы.НПП,"");
	КонецЕсли;
	
	// Самоконтроль
	ТекстСамоконтроль = СформироватьТекстПрограммы_Самоконтроль(Объект, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы));
	
	Если ТекстСамоконтроль<>"" Тогда
		ТекстПрограммы=ТекстПрограммы+
		"callbacks_list = [
		|"+ТекстСамоконтроль+"]
		|"
	КонецЕсли;
	ПараметрыСамоконтроля=?(ТекстСамоконтроль="","",", callbacks=callbacks_list");
	//ПараметрыПроходов = ?(Объект.ПроходовПрогноза=0, "", ", steps="+СтрЗаменить(СокрЛП(Объект.ПроходовПрогноза),Символы.НПП,""));
	ПараметрыПроходов = ", steps="+СтрЗаменить(СокрЛП(Объект.ПроходовПрогноза),Символы.НПП,"");
	
	// Тестировать
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("fit_generator") Тогда
		ИдПрогнозироватьГенератор = "predict_generator";
	Иначе
		ИдПрогнозироватьГенератор = "predict";
	КонецЕсли;
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Прогноз", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	//"loss, acc = model.evaluate("+ПараметрыВходы+", "+ПараметрыВыходы+ПараметрыПакетов+ПараметрыОтображения+ПараметрыСамоконтроля+")
	"result = model."+ИдПрогнозироватьГенератор+"(train_gen"+ПараметрыОтображения+ПараметрыПроходов+")
	|predictions = []
	|";
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеРезультатовПрогноза(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор);
	
	Если Объект.Цели.Количество()=1 Тогда
		Если Денормализовать Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Денормализовать", СтрЧислоСтрок(ТекстПрограммы), Объект.Цели[0].ИмяСлоя));
			Денормализация = СформироватьТекстПрограммы_ДенормализацияЦели(Объект, 0, МассивЭтоГенератор, МассивНормализации); 
		Иначе
			Денормализация=""
		КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результат прогноза", СтрЧислоСтрок(ТекстПрограммы), "Подготовка данных"));
		ТекстПрограммы=ТекстПрограммы+
		Денормализация+
		"predictions.append({'layer':'"+Объект.Цели[0].ИмяСлоя+"','values':result.tolist()})
		|";
	Иначе
		//ТекстПрогнозы = "";
		Для Сч=0 По Объект.Цели.Количество()-1 Цикл
			//Если ТекстПрогнозы<>"" Тогда
			//	ТекстПрогнозы=ТекстПрогнозы+"
			//	|";
			//КонецЕсли;
			Если Денормализовать Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Денормализовать", СтрЧислоСтрок(ТекстПрограммы), Объект.Цели[Сч].ИмяСлоя));
				Денормализация = СформироватьТекстПрограммы_ДенормализацияЦели(Объект, Сч, МассивЭтоГенератор, МассивНормализации, Истина); 
			Иначе
				Денормализация=""
			КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результат прогноза", СтрЧислоСтрок(ТекстПрограммы), "Подготовка данных"));
			ТекстПрограммы=ТекстПрограммы+
			Денормализация+
			"predictions.append({'layer':'"+Объект.Цели[Сч].ИмяСлоя+"','values':result["+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"")+"].tolist()})
			|";
		КонецЦикла;
	КонецЕсли;
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результат прогноза", СтрЧислоСтрок(ТекстПрограммы), "Запись в json"));
	ТекстПрограммы=ТекстПрограммы+
	"with open(u'"+СтрЗаменить(Параметры.ФайлРезультатов,"\","\\")+"', 'w', encoding='utf-8') as file:
	|    json.dump(predictions, file)";
	
	//Для Сч=0 По Объект.Прогнозы.Количество()-1 Цикл
	//	ТекстПрограммы=ТекстПрограммы+
	//	"np.savetxt(u'"+СтрЗаменить(Объект.Прогнозы[Сч].ФайлРезультата,"\","\\")+"', result["+СтрЗаменить(СокрЛП(Сч),Символы.НПП,"")+"], fmt='%s', delimiter='\t')
	//	|";
	//КонецЦикла;
	
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результаты", СтрЧислоСтрок(ТекстПрограммы)));
	//ТекстПрограммы=ТекстПрограммы+
	//"result_dic = {'values':result, 'metrics_names':model.metrics_names, 'metrics':model.metrics}
	//|with open(u'"+Параметры.ФайлРезультатов+"', 'w', encoding='utf-8') as file:
	//|    json.dump(result_dic, file)";
	
	Возврат ТекстПрограммы;
	
КонецФункции

Функция ЧислоВещественноеПитон(Текст)
	ВещественноеПитон=СтрЗаменить(Текст,",",".");
	ВещественноеПитон=СтрЗаменить(ВещественноеПитон,Символы.НПП,"");
	Возврат ВещественноеПитон+?(ВещественноеПитон=Окр(ВещественноеПитон),".","");
КонецФункции

Функция ЕстьГенераторИзображенияИЗКаталогаСВалидацией(Объект) Экспорт
	Если Не Объект.ИспользоватьГенератор Тогда Возврат Ложь КонецЕсли;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) 
			И СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.Изображений 
			И СокрЛП(СтрокаОбразцы.ИмяГенератора)<>"" Тогда
			Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
			Если Строки.Количество()>0 И Строки[0].Источник=1 И Строки[0].ВыделятьДляКонтроля>0 Тогда
				Возврат Истина
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь	
КонецФункции

Функция СформироватьТекстПрограммыОбученияГенератор(Объект, НомераСтрок, Параметры, ОтображениеВыполнения, ЗагрузкаПараметров) Экспорт
	//ДеревоJSON=Новый ДеревоЗначений;
	//ДеревоJSON.Колонки.Добавить("Свойство");
	//ДеревоJSON.Колонки.Добавить("Значение");
	//ДеревоJSON.Колонки.Добавить("Тип");	
	//ДеревоJSON.Строки.Очистить();
	//Нейро_СозданиеМоделиНаСервере.ОбработатьМодельИзСтрокиJSONНаСервере(Объект.Модель.ТекстМоделиJSON, ДеревоJSON); //Заполняет ДеревоJSON
	//СтруктураДереваJSON = Нейро_СозданиеМоделиНаСервере.ПеребратьОбъектJSONНаСервере(ДеревоJSON); //Преобразует ДеревоJSON в СтруктураДереваJSON с сохранением построения
	//ЧислоСлоев = ПосчитатьКоличествоСлоевМодели(СтруктураДереваJSON.config.layers);
	//Если ЧислоСлоев>7 Тогда
	//	Сообщение = "Количество слоев ("+СокрЛП(ЧислоСлоев)+") в модели "+Символ(34)+Объект.Модель.ИмяМодели+Символ(34)
	//	          + " привысило максимально допустимое для демонстрационной версии (7)!";
	//	Возврат Новый Структура("Ошибка, Текст", Истина, Сообщение);
	//КонецЕсли;
	
	Для Каждого СтрокаОбразец Из Объект.Образцы Цикл
		СтрокаОбразец.Идентификатор = "";
	КонецЦикла;
	Для Каждого СтрокаЦель Из Объект.Цели Цикл
		СтрокаЦель.Идентификатор = "";
	КонецЦикла;
	
	//СтрокиИмпорт = Новый Массив;
	
	//ТекстПрограммы=
	//"import sys
	//|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	//|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
	//|";
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы =
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|";
	Иначе
		ТекстПрограммы =
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	Если ОтображениеВыполнения<1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	
	//СтрокиИмпорт.Добавить("import sys");
	//СтрокиИмпорт.Добавить(Нейро_ОбщийМодуль.ИдИмпортKeras());
	
	ТекстПрограммы=ТекстПрограммы+Нейро_ОбщийМодуль.ИдFromKeras(
	"import os
	|import numpy as np
	|from keras.preprocessing.text import Tokenizer
	|from keras.preprocessing.image import ImageDataGenerator,  img_to_array, load_img
	|from keras.preprocessing.sequence import TimeseriesGenerator
	|import json
	|");
	
	//СтрокиИмпорт.Добавить("import os");
	//СтрокиИмпорт.Добавить("import numpy as np");
	//СтрокиИмпорт.Добавить("from keras.preprocessing.text import Tokenizer");
	//СтрокиИмпорт.Добавить("from keras.preprocessing.image import ImageDataGenerator,  img_to_array, load_img");
	//СтрокиИмпорт.Добавить("from keras.preprocessing.sequence import TimeseriesGenerator");
	//СтрокиИмпорт.Добавить("import json");
	
	Если Импорт_Scikit_learn(Объект) Тогда
		ТекстПрограммы=ТекстПрограммы+
		"from sklearn.preprocessing import MinMaxScaler
		|";
	КонецЕсли;
	
	Если Параметры.ИдентификаторFromJSON = "" Тогда
		ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	Иначе
		ИдентификаторFromJSON = Параметры.ИдентификаторFromJSON;
	КонецЕсли;
	
	СформироватьТекстПрограммы_ЗагрузкаПараметров(ЗагрузкаПараметров, ТекстПрограммы, НомераСтрок);
	
	// Модель
	СформироватьТекстПрограммы_ЗагрузкаМодели(Объект, Параметры, ТекстПрограммы, НомераСтрок);
	
	// Загрузка весов
	СформироватьТекстПрограммы_ЗагрузкаВесов(Объект, ТекстПрограммы, НомераСтрок, Параметры.ФайлЗагрузкиВесов);
	
	// Компиляция
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Компиляция", СтрЧислоСтрок(ТекстПрограммы)));
	РезультатКомпиляции = Нейро_СозданиеМоделиНаСервере.СформироватьТекстКомпиляцииМодели(Объект, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы));
	//ТекстПрограммы=ТекстПрограммы+Нейро_СозданиеМоделиНаСервере.СформироватьТекстКомпиляцииМодели(Объект, НомераСтрок);
	Если РезультатКомпиляции.Ошибка Тогда
		Возврат РезультатКомпиляции;
	Иначе
		ТекстПрограммы=ТекстПрограммы+РезультатКомпиляции.Текст;
	КонецЕсли;
	
	СформироватьТекстПрограммы_ПрямоеКодированиеОбразцов(Объект, ТекстПрограммы, НомераСтрок);	
	
	// Словари
	МасСловариПутьКСловарю = Новый Массив; МасСловариИд = Новый Массив;
	СформироватьТекстПрограммы_Словари(Объект, ТекстПрограммы, НомераСтрок, ИдентификаторFromJSON, МасСловариПутьКСловарю, МасСловариИд);
	
	МассивЭтоГенераторИзКаталога = Новый Массив;
	МассивЭтоГенератор = Новый Массив;
	ГенераторыОбразцов = Новый Массив;
	ЗаполнитьМассивыЭтоГенератор(Объект, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов);
	
	// Функции алгоритмов
	СформироватьТекстПрограммыСпискиАлгоритмов(Объект, ТекстПрограммы, НомераСтрок, Параметры);
	
	МассивНормализации = Новый Массив;
	
	// Загрузка образцов
	СформироватьТекстПрограммы_ЗагрузкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенераторИзКаталога);
	
	// Загрузка и обработка целей
	СформироватьТекстПрограммы_ЗагрузкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации);
	
	// Последующая обработка образцов
	СформироватьТекстПрограммы_ОбработкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор, МассивНормализации);
	
	// Обработка целей
	СформироватьТекстПрограммы_ОбработкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации);
	
	// Преобразования (алгоритмы)
	СформироватьТекстПрограммы_ПреобразованиеОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор);
	СформироватьТекстПрограммы_ПреобразованиеЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор);

	// Учебный генератор
	СформироватьТекстПрограммы_УчебныйГенератор(Объект, ТекстПрограммы, НомераСтрок);
	
	//Пользовательские генераторы
	РезультатПользовательскиеГенераторы=СформироватьТекстПрограммы_ПользовательскиеГенераторы(Объект, ТекстПрограммы, НомераСтрок);
	Если РезультатПользовательскиеГенераторы.Ошибка Тогда
		Возврат РезультатПользовательскиеГенераторы;
	КонецЕсли;
		
	
	//Если МассивЭтоГенератор.Найти(Истина)<>Неопределено Тогда
		ТекстПрограммы=ТекстПрограммы+
		"gen_info=[]
		|";
	//КонецЕсли;
	
	//Генераторы (не из каталога)
	СформироватьТекстПрограммы_Генераторы(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов,,,МассивНормализации);
	
	// Генератор
	СформироватьТекстПрограммы_Генератор(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор);
	
	//Общий генератор(ы)
	//ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексНачало),Символы.НПП,"");
	////ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	//Если Объект.ИндексОкончание=0 Тогда
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпоху)),Символы.НПП,"");
	//Иначе
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	//КонецЕсли;
	//РазмерПакета    = ?(Объект.РазмерПакета=0,"",", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,""));
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор учебный"));
	//ТекстПрограммы=ТекстПрограммы+
	//"train_gen = generator("+ИндексНачало+","+ИндексОкончание+?(Объект.Перемешивать,", shuffle=True","")+РазмерПакета+")
	//|";
	//
	//Если Объект.ИндексПроверкаОкончание>0 Тогда
	//	ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало),Символы.НПП,"");
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаОкончание),Символы.НПП,"");
	//	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор проверочный"));
	//	ТекстПрограммы=ТекстПрограммы+
	//	"val_gen = generator("+ИндексНачало+","+ИндексОкончание+РазмерПакета+", subset='validation')
	//	|";
	//ИначеЕсли Объект.ШаговЗаЭпохуПроверка>0 Тогда
	//	ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало),Символы.НПП,"");
	//	ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпохуПроверка)),Символы.НПП,"");
	//	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор проверочный"));
	//	ТекстПрограммы=ТекстПрограммы+
	//	"val_gen = generator("+ИндексНачало+","+ИндексОкончание+РазмерПакета+", subset='validation')
	//	|";
	//КонецЕсли;
	СформироватьТекстПрограммы_ВызовОбщегоГенератора(Объект, ТекстПрограммы, НомераСтрок);
	Если Объект.ВидГенератора = 1 Тогда
		РезультатПрямойГенератор = СформироватьТекстПрограммы_ВызовПрямогоГенератора(Объект, ТекстПрограммы, НомераСтрок);
		Если РезультатПрямойГенератор.Ошибка Тогда
			Возврат РезультатПрямойГенератор;
		КонецЕсли;
	КонецЕсли;
	
	
	// Остальные параметры обучения
	ПараметрыЭпох="";
	Если Объект.КоличествоЭпох>1 Тогда
		ПараметрыЭпох=", epochs="+СтрЗаменить(СокрЛП(Объект.КоличествоЭпох),Символы.НПП,"");
	КонецЕсли;
	ПараметрыОтображения="";
	Если Объект.ОтображениеВыполнения<>1 Тогда
		ПараметрыОтображения=", verbose="+СтрЗаменить(СокрЛП(Объект.ОтображениеВыполнения),Символы.НПП,"");
	КонецЕсли;
	
	#Область Самоконтроль
	// Самоконтроль
	ТекстСамоконтроль = СформироватьТекстПрограммы_Самоконтроль(Объект, НомераСтрок,СтрЧислоСтрок(ТекстПрограммы));
	
	Если ТекстСамоконтроль<>"" Тогда
		ТекстПрограммы=ТекстПрограммы+
		"callbacks_list = [
		|"+ТекстСамоконтроль+"]
		|"
	КонецЕсли;
	ПараметрыСамоконтроля=?(ТекстСамоконтроль="","",", callbacks=callbacks_list");
	
	#КонецОбласти
	
	ПараметрыНачальнойЭпохи=?(Объект.НачальнаяЭпоха>0,", initial_epoch="+СтрЗаменить(СокрЛП(Объект.НачальнаяЭпоха), Символы.НПП,""),"");
	
	ТекстПрограммы=ТекстПрограммы+
	"batch_size="+?(Объект.РазмерПакета=0,"32",СтрЗаменить(СокрЛП(Объект.РазмерПакета), Символы.НПП,""))+"
	|";
	
	Если Объект.ШаговЗаЭпоху=0 Тогда
		//ТекстПрограммы=ТекстПрограммы+
		//"steps_per_epoch=len(samples1) / batch_size
		//|if(batch_size*steps_per_epoch<len(samples1)):
		//|    steps_per_epoch+=1
		//|";
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Рассчет", СтрЧислоСтрок(ТекстПрограммы), "Шагов на эпоху"));
		ТекстПрограммы=ТекстПрограммы+
		"steps_per_epoch="+СтрЗаменить(СокрЛП(Объект.ИндексОкончание-Объект.ИндексНачало), Символы.НПП,"")+" / batch_size
		|if(batch_size*steps_per_epoch<len(samples1)):
		|    steps_per_epoch+=1
		|";
		ШаговЗаЭпоху="steps_per_epoch"
	Иначе
		ШаговЗаЭпоху=СтрЗаменить(СокрЛП(Объект.ШаговЗаЭпоху), Символы.НПП,"")
	КонецЕсли;
	ПараметрыКонтроля=""; ШаговЗаЭпохуПроверка=""; ЧастотаПроверки="";
	Если Объект.ИндексПроверкаОкончание>0 Или Объект.ШаговЗаЭпохуПроверка>0 Тогда
		ПараметрыКонтроля=", validation_data=val_gen";
		Если Объект.ШаговЗаЭпохуПроверка=0 Тогда
			ЭлементовПроверки=СтрЗаменить(СокрЛП(Объект.ИндексПроверкаОкончание-Объект.ИндексПроверкаНачало), Символы.НПП,"");
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Рассчет", СтрЧислоСтрок(ТекстПрограммы), "Шагов на эпоху (проверка)"));
			ТекстПрограммы=ТекстПрограммы+
			"validation_steps="+ЭлементовПроверки+" / batch_size
			|if(batch_size*validation_steps<"+ЭлементовПроверки+"):
			|    validation_steps+=1
			|";
			ШаговЗаЭпохуПроверка=", validation_steps=validation_steps"
		Иначе
			ШаговЗаЭпохуПроверка=", validation_steps="+СтрЗаменить(СокрЛП(Объект.ШаговЗаЭпохуПроверка), Символы.НПП,"")
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ЧастотаПроверки) Тогда
			Если ТипЗнч(Объект.ЧастотаПроверки)=Тип("Число") Тогда
				ЧастотаПроверки=", validation_freq="+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Перечисления.Нейро_Типы.Целое,Объект.ЧастотаПроверки)
			ИначеЕсли ТипЗнч(Объект.ЧастотаПроверки)=Тип("СправочникСсылка.Нейро_Массивы") Тогда
				ЧастотаПроверки=", validation_freq="+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Перечисления.Нейро_Типы.Массив,Объект.ЧастотаПроверки)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Обучить
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Обучение", СтрЧислоСтрок(ТекстПрограммы), "Генератор"));
	//ТекстПрограммы=ТекстПрограммы+
	//"history = model.fit("+ПараметрыВходы+", "+ПараметрыВыходы+ПараметрыПакетов+ПараметрыЭпох+ПараметрыОтображения+ПараметрыСамоконтроля+ПараметрыКонтроля+ПараметрыПеремешивания+ПараметрыНачальнойЭпохи+")
	//|";
	
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("fit_generator") Тогда
		ИдОбучитьГенератор = "fit_generator";
	Иначе
		ИдОбучитьГенератор = "fit";
	КонецЕсли;
	
	ТекстПрограммы=ТекстПрограммы+
	"history = model."+ИдОбучитьГенератор+"(train_gen, steps_per_epoch="+ШаговЗаЭпоху+ПараметрыЭпох+ПараметрыОтображения+ПараметрыСамоконтроля
	+ПараметрыКонтроля+ШаговЗаЭпохуПроверка+ЧастотаПроверки+ПараметрыНачальнойЭпохи+")
	|";
	//fit_generator(generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, validation_freq=1, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)
	
	Если Объект.ПутьКСети<>"" Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Сохранение"));
		ТекстПрограммы=ТекстПрограммы+
		"model.save(u'"+СтрЗаменить(Объект.ПутьКСети,"\","\\")+"')
		|";
	КонецЕсли;
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*История", СтрЧислоСтрок(ТекстПрограммы)));
	ТекстПрограммы=ТекстПрограммы+
	"history1={'epoch':history.epoch, 'history':history.history, 'params':history.params}
	|for array_name in history1['history']:
    |    if(type(history1['history'][array_name][0])!=np.float64):
	|        history1['history'][array_name] = [np.float64(item) for item in history1['history'][array_name]]
    |    elif(np.isnan(history1['history'][array_name][0])):
    |        history1['history'][array_name] = [0. for item in history1['history'][array_name]]
	|for param_name in history1['params']:
    |    if(type(history1['params'][param_name])==np.int32):
	|        history1['params'][param_name] = np.int(history1['params'][param_name])
	|with open(u'"+СтрЗаменить(Параметры.ФайлРезультатов,"\","\\")+"', 'w', encoding='utf-8') as file:
	|    json.dump(history1, file)
	|with open(u'"+СтрЗаменить(Параметры.ОГенераторе,"\","\\")+"', 'w', encoding='utf-8') as file:
	|    json.dump(gen_info, file)
	|normalization_list = []
	|";
	
	Если МассивНормализации.Количество()>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результаты нормализации", СтрЧислоСтрок(ТекстПрограммы)));
		Для Каждого СтруктураНормализация Из МассивНормализации Цикл
			ТекстПрограммы=ТекстПрограммы+"normalization_list.append({'layer':'"+СтруктураНормализация.ИмяСлоя+"'";
			//Если СтруктураНормализация.Свойство("Уникальных") Тогда
			//	ТекстПрограммы=ТекстПрограммы+", 'unique':"+СтруктураНормализация.Уникальных;
			//Иначе
			//	ТекстПрограммы=ТекстПрограммы+", 'mean':"+СтруктураНормализация.Среднее+".tolist(), 'std':"+СтруктураНормализация.СтандартноеОтклонение+".tolist()";
			//КонецЕсли;
			Если СтруктураНормализация.Образец Тогда
				Если СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':0"+", 'mean':"+СтруктураНормализация.Среднее+".tolist(), 'std':"+СтруктураНормализация.СтандартноеОтклонение+".tolist()";
				ИначеЕсли СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':1"+
					", 'data_max_':"+СтруктураНормализация.Нормировщик+".data_max_.tolist()"+
					", 'data_min_':"+СтруктураНормализация.Нормировщик+".data_min_.tolist()"+
					", 'data_range_':"+СтруктураНормализация.Нормировщик+".data_range_.tolist()"+
					", 'feature_range':"+СтруктураНормализация.Нормировщик+".feature_range"+
					", 'min_':"+СтруктураНормализация.Нормировщик+".min_.tolist()"+
					", 'n_samples_seen_':"+СтруктураНормализация.Нормировщик+".n_samples_seen_"+
					", 'scale_':"+СтруктураНормализация.Нормировщик+".scale_.tolist()
					|"
				КонецЕсли;
			Иначе //Цель
				Если СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':2, 'unique':"+СтруктураНормализация.Уникальных;
				ИначеЕсли СтруктураНормализация.Тип = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
					ТекстПрограммы=ТекстПрограммы+
					", 'type':3"+
					", 'data_max_':"+СтруктураНормализация.Нормировщик+".data_max_.tolist()"+
					", 'data_min_':"+СтруктураНормализация.Нормировщик+".data_min_.tolist()"+
					", 'data_range_':"+СтруктураНормализация.Нормировщик+".data_range_.tolist()"+
					", 'feature_range':"+СтруктураНормализация.Нормировщик+".feature_range"+
					", 'min_':"+СтруктураНормализация.Нормировщик+".min_.tolist()"+
					", 'n_samples_seen_':"+СтруктураНормализация.Нормировщик+".n_samples_seen_"+
					", 'scale_':"+СтруктураНормализация.Нормировщик+".scale_.tolist()
					|"
				КонецЕсли;
			КонецЕсли;
			ТекстПрограммы=ТекстПрограммы+"})
			|";
		КонецЦикла;
	КонецЕсли;
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Результаты нормализации", СтрЧислоСтрок(ТекстПрограммы),"Сохранение в json"));
	ТекстПрограммы=ТекстПрограммы+
	"with open(u'"+СтрЗаменить(Параметры.ФайлНормализации,"\","\\")+"', 'w', encoding='utf-8') as file:
	|    json.dump(normalization_list, file)";
		
	//Возврат ТекстПрограммы;
	Возврат Новый Структура("Ошибка, Текст", Ложь, ТекстПрограммы);
КонецФункции

Функция СформироватьТекстПрограммы_ЗагрузкаПараметров(ЗагрузкаПараметров, ТекстПрограммы, НомераСтрок)
	Если ЗагрузкаПараметров.Количество()>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Вложенные модели", СтрЧислоСтрок(ТекстПрограммы),"Список параметров компиляции"));
		СписокПараметровКомпиляции="";
		Для Каждого СтрокаПараметрыКомпиляции Из ЗагрузкаПараметров Цикл
			Если СписокПараметровКомпиляции<>"" Тогда 
				СписокПараметровКомпиляции=СписокПараметровКомпиляции+",
				|";
			КонецЕсли;
			СписокПараметровКомпиляции=СписокПараметровКомпиляции+
			"{'Path': '"+СтрокаПараметрыКомпиляции.Ключ+"', "+"'loss':"+СтрокаПараметрыКомпиляции.ФункцияПотерь+", "+"'optimizer':"+СтрокаПараметрыКомпиляции.Оптимизатор+", "+
			"'metrics':"+СтрокаПараметрыКомпиляции.Метрика+", "+"'loss_weights':"+СтрокаПараметрыКомпиляции.ВесаПотерь+"}";
		КонецЦикла;
		ТекстПрограммы=ТекстПрограммы+
		"list_params=["+СписокПараметровКомпиляции+"]
		|";
	КонецЕсли;
	Возврат Истина
КонецФункции

Функция СформироватьТекстПрограммы_ЗагрузкаМодели(Объект, Параметры, ТекстПрограммы, НомераСтрок)
	// Модель
	//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы)));
	//Если Объект.ПутьКСетиЗагрузка<>"" Тогда
	//	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
	//	ТекстПрограммы=ТекстПрограммы+
	//	"model = keras.models.load_model('"+СтрЗаменить(Объект.ПутьКСетиЗагрузка,"\","\\")+"')
	//	|";
	//Иначе
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка_json"));
		ТекстПрограммы=ТекстПрограммы+
		"file = open(u'"+СтрЗаменить(Параметры.ФайлМодели,"\","\\")+"', 'r')
		|loaded_json = file.read()
		|file.close()
		|model = keras.models.model_from_json(loaded_json)
		|";
		
	//КонецЕсли;
	Возврат Истина
КонецФункции

Функция СформироватьТекстПрограммы_Самоконтроль(Объект, НомераСтрок, ЧислоСтрок)
	ТекстСамоконтроль="";
	Для Каждого СтрокаТЧ Из Объект.КонтрольныеТочки Цикл
		Если СтрокаТЧ.ПутьККаталогу="" Тогда 
			Продолжить
		ИначеЕсли Прав(СтрокаТЧ.ПутьККаталогу,1)<>"\" Тогда
			СтрокаТЧ.ПутьККаталогу=СтрокаТЧ.ПутьККаталогу+"\"
		КонецЕсли;
		Если ТекстСамоконтроль<>"" Тогда 
			ТекстСамоконтроль=ТекстСамоконтроль+",
			|";
		КонецЕсли;
		ТекстОтслеживать="";
		Если ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_СтандартныеМетрики") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_СтандартныеМетрики", СтрокаТЧ.Отслеживать);
		ИначеЕсли ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_Метрики") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_Метрики", СтрокаТЧ.Отслеживать);
		ИначеЕсли ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ФункцииПотерь", СтрокаТЧ.Отслеживать);
		КонецЕсли;
		Если СтрокаТЧ.Проверка И ТекстОтслеживать<>"" Тогда ТекстОтслеживать="val_"+ТекстОтслеживать КонецЕсли;
		ТекстРежим = Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_РежимСамоконтроля", СтрокаТЧ.Режим);
		Если ТекстОтслеживать="" Тогда ТекстОтслеживать="val_loss" КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*КонтрольныеТочки", ЧислоСтрок,Объект.КонтрольныеТочки.Индекс(СтрокаТЧ)));
		ЧислоСтрок=ЧислоСтрок+1;
		ТекстСамоконтроль=ТекстСамоконтроль+"keras.callbacks.ModelCheckpoint(u'"+СтрЗаменить(СтрокаТЧ.ПутьККаталогу,"\","\\")+Объект.Модель.ИмяМодели
		+?(СтрокаТЧ.СохранятьТолькоВеса,"_weights","")+"-{epoch:04d}-{"+?(ТекстОтслеживать="","val_loss",ТекстОтслеживать)+":.4f}.h5'"
		+?(ТекстОтслеживать="val_loss" Или ТекстОтслеживать="","",", monitor='"+ТекстОтслеживать+"'")
		+?(СтрокаТЧ.СохранятьЛучшуюМодель,", save_best_only=True","")
		+?(СтрокаТЧ.СохранятьТолькоВеса,", save_weights_only=True","")
		+?(СтрокаТЧ.Режим.Пустая() Или СтрокаТЧ.Режим<>Перечисления.Нейро_РежимСамоконтроля.auto, "", ", mode='"+ТекстРежим+"'")
		+?(СтрокаТЧ.Период<>0 И СтрокаТЧ.Период<>1,", period="+СтрЗаменить(СтрокаТЧ.Период,Символы.НПП,""),"")+")";
	КонецЦикла;
		
	Для Каждого СтрокаТЧ Из Объект.УменьшениеСкоростиПриЗастое Цикл
		Если ТекстСамоконтроль<>"" Тогда 
			ТекстСамоконтроль=ТекстСамоконтроль+",
			|";
		КонецЕсли;
		ТекстОтслеживать="";
		Если ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_СтандартныеМетрики") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_СтандартныеМетрики", СтрокаТЧ.Отслеживать);
		ИначеЕсли ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_Метрики") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_Метрики", СтрокаТЧ.Отслеживать);
		ИначеЕсли ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ФункцииПотерь", СтрокаТЧ.Отслеживать);
		КонецЕсли;
		Если СтрокаТЧ.Проверка И ТекстОтслеживать<>"" Тогда ТекстОтслеживать="val_"+ТекстОтслеживать КонецЕсли;
		Если ТекстОтслеживать="" Тогда ТекстОтслеживать="val_loss" КонецЕсли;
		ТекстРежим = Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_РежимСамоконтроля", СтрокаТЧ.Режим);
		//ТекстКоэффициент=ЧислоВещественноеПитон(СтрокаТЧ.Коэффициент);
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*УменьшениеСкоростиПриЗастое", ЧислоСтрок,Объект.УменьшениеСкоростиПриЗастое.Индекс(СтрокаТЧ)));
		ЧислоСтрок=ЧислоСтрок+1;
		ТекстСамоконтроль=ТекстСамоконтроль+"keras.callbacks.ReduceLROnPlateau("
		//+?(ТекстОтслеживать="val_loss" Или ТекстОтслеживать="","","monitor='"+ТекстОтслеживать+"'")
		+"monitor='"+ТекстОтслеживать+"'"
		+?(СтрокаТЧ.Коэффициент<>0.1,", factor="+ЧислоВещественноеПитон(СтрокаТЧ.Коэффициент),"")
		+?(СтрокаТЧ.ОжидатьУлучшения<>10,", patience="+СтрЗаменить(СтрокаТЧ.ОжидатьУлучшения,Символы.НПП,""),"")
		+?(СтрокаТЧ.Режим.Пустая() Или СтрокаТЧ.Режим<>Перечисления.Нейро_РежимСамоконтроля.auto, "", ", mode='"+ТекстРежим+"'")
		+?(СтрокаТЧ.МинимальноеИзменение<>0.0001,", min_delta="+ЧислоВещественноеПитон(СтрокаТЧ.МинимальноеИзменение),"")
		+?(СтрокаТЧ.Перезарядка<>0,", cooldown="+СтрЗаменить(СтрокаТЧ.Перезарядка,Символы.НПП,""),"")
		+?(СтрокаТЧ.МинимальнаяСкорость<>0,", min_lr="+ЧислоВещественноеПитон(СтрокаТЧ.МинимальнаяСкорость),"")+")";
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ДосрочныеЗавершения Цикл
		Если ТекстСамоконтроль<>"" Тогда 
			ТекстСамоконтроль=ТекстСамоконтроль+",
			|";
		КонецЕсли;
		ТекстОтслеживать="";
		Если ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_СтандартныеМетрики") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_СтандартныеМетрики", СтрокаТЧ.Отслеживать);
		ИначеЕсли ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_Метрики") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_Метрики", СтрокаТЧ.Отслеживать);
		ИначеЕсли ТипЗнч(СтрокаТЧ.Отслеживать)=Тип("ПеречислениеСсылка.Нейро_ФункцииПотерь") Тогда
			ТекстОтслеживать=Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ФункцииПотерь", СтрокаТЧ.Отслеживать);
		КонецЕсли;
		Если СтрокаТЧ.Проверка И ТекстОтслеживать<>"" Тогда ТекстОтслеживать="val_"+ТекстОтслеживать КонецЕсли;
		Если ТекстОтслеживать="" Тогда ТекстОтслеживать="val_loss" КонецЕсли;
		ТекстРежим = Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_РежимСамоконтроля", СтрокаТЧ.Режим);
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*ДосрочныеЗавершения", ЧислоСтрок,Объект.ДосрочныеЗавершения.Индекс(СтрокаТЧ)));
		ЧислоСтрок=ЧислоСтрок+1;
		ТекстСамоконтроль=ТекстСамоконтроль+"keras.callbacks.EarlyStopping("
		//+?(ТекстОтслеживать="val_loss" Или ТекстОтслеживать="","","monitor='"+ТекстОтслеживать+"'")
		+"monitor='"+ТекстОтслеживать+"'"
		+?(СтрокаТЧ.МинимальноеИзменение<>0,", min_delta="+ЧислоВещественноеПитон(СтрокаТЧ.МинимальноеИзменение),"")
		+?(СтрокаТЧ.ОжидатьУлучшения<>0,", patience="+СтрЗаменить(СтрокаТЧ.ОжидатьУлучшения,Символы.НПП,""),"")
		+?(СтрокаТЧ.Режим.Пустая() Или СтрокаТЧ.Режим<>Перечисления.Нейро_РежимСамоконтроля.auto, "", ", mode='"+ТекстРежим+"'")
		+?(СтрокаТЧ.ТребуемоеЗначение<>0,", baseline="+ЧислоВещественноеПитон(СтрокаТЧ.ТребуемоеЗначение),"")
		+?(СтрокаТЧ.ВосстанавливатьЛучшиеВеса,", restore_best_weights=True","")+")";
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.TensorBoard Цикл
		//Если СтрокаТЧ.ПутьККаталогу="" Тогда 
		//	Продолжить
		Если ТекстСамоконтроль<>"" Тогда 
			ТекстСамоконтроль=ТекстСамоконтроль+",
			|";
		КонецЕсли;
		
		Если СтрокаТЧ.ПутьККаталогу="" Тогда
			ПутьККаталогу=""
		Иначе
			Если Прав(СтрокаТЧ.ПутьККаталогу,1)<>"\" Тогда
				СтрокаТЧ.ПутьККаталогу=СтрокаТЧ.ПутьККаталогу+"\"
			КонецЕсли;
			ПутьККаталогу="log_dir = u'"+СтрЗаменить(СтрокаТЧ.ПутьККаталогу,"\","\\")+"'"
		КонецЕсли;
		
		ЗаписыватьГрафик = ?(СтрокаТЧ.ЗаписыватьГрафик=Неопределено,"",", write_graph="+?(СтрокаТЧ.ЗаписыватьГрафик=Истина,"True","False"));
		ЗаписыватьИзображения = ?(СтрокаТЧ.ЗаписыватьИзображения=Неопределено,"",", write_images="+?(СтрокаТЧ.ЗаписыватьИзображения=Истина,"True","False"));
		Если СтрокаТЧ.ЧастотаОбновления = Перечисления.Нейро_ЧастотаОбновленияTensorBoard.КаждуюЭпоху Тогда
			ЧастотаОбновления = ", update_freq = 'epoch'";
		ИначеЕсли СтрокаТЧ.ЧастотаОбновления = Перечисления.Нейро_ЧастотаОбновленияTensorBoard.КаждыйПакет Тогда
			ЧастотаОбновления = ", update_freq = 'batch'";
		ИначеЕсли СтрокаТЧ.ЧастотаОбновления = Перечисления.Нейро_ЧастотаОбновленияTensorBoard.ЧислоПакетов Тогда
			ЧастотаОбновления = ", update_freq = "+СтрЗаменить(СтрокаТЧ.ЧастотаОбновленияПакетов,Символы.НПП,"");
		Иначе
			ЧастотаОбновления = "";
		КонецЕсли;
		Если ТипЗнч(СтрокаТЧ.ПрофилироватьПакеты)=Тип("Число") Тогда
			ПрофилироватьПакеты = ", profile_batch = "+СтрЗаменить(СтрокаТЧ.ПрофилироватьПакеты,Символы.НПП,"")
		ИначеЕсли ТипЗнч(СтрокаТЧ.ПрофилироватьПакеты)=Тип("Строка") Тогда
			МассивДиапазон = СтрРазделить(СтрокаТЧ.ПрофилироватьПакеты,",",Ложь);
			Если МассивДиапазон.Количество()<2 Тогда
				ПрофилироватьПакеты = "";
			Иначе
				ПрофилироватьПакеты = ", profile_batch = "
				                    +СтрЗаменить(МассивДиапазон[0],Символы.НПП,"")
									+","+СтрЗаменить(МассивДиапазон[1],Символы.НПП,"");
			КонецЕсли;
		Иначе
			ПрофилироватьПакеты = "";
		КонецЕсли;
		Если СтрокаТЧ.МетаданныеПогружений=Неопределено Или СтрокаТЧ.МетаданныеПогружений.Пустая() Тогда
			МетаданныеПогружений="";
		Иначе
			МетаданныеПогружений=", embeddings_metadata = "
			+ Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Перечисления.Нейро_Типы.Массив, СтрокаТЧ.МетаданныеПогружений);
		КонецЕсли;
		
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*TensorBoard", ЧислоСтрок,Объект.TensorBoard.Индекс(СтрокаТЧ)));
		ЧислоСтрок=ЧислоСтрок+1;
		ТекстСамоконтроль=ТекстСамоконтроль+"keras.callbacks.TensorBoard("+ПутьККаталогу
		+?(СтрокаТЧ.ЧастотаГистограмм<>0,", histogram_freq="+СтрЗаменить(СтрокаТЧ.ЧастотаГистограмм,Символы.НПП,""),"")
		+ЗаписыватьГрафик + ЗаписыватьИзображения + ЧастотаОбновления + ПрофилироватьПакеты
		+?(СтрокаТЧ.ЧастотаПогружений<>0,", embeddings_freq="+СтрЗаменить(СтрокаТЧ.ЧастотаПогружений,Символы.НПП,""),"")
		+МетаданныеПогружений+")";
	КонецЦикла;
	
	Возврат ТекстСамоконтроль;
КонецФункции

Функция СформироватьТекстПрограммы_ЗагрузкаВесов(Объект, ТекстПрограммы, НомераСтрок, ФайлЗагрузкиВесов)
	//Если Объект.ЗагружатьВесаМоделей Тогда
		Если Объект.ПутьККонтрольнойТочке<>"" Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Модель", СтрЧислоСтрок(ТекстПрограммы),"Загрузка_Веса"));
			ТекстПрограммы=ТекстПрограммы+
			"model.load_weights(u'"+СтрЗаменить(Объект.ПутьККонтрольнойТочке,"\","\\")+"'"+?(Объект.ЗагружатьСлоиПоИменам,", by_name=True","")+")
			|";
		КонецЕсли;
		
		Если Объект.ЗагрузкаВесов.Количество()>0 Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Вложенные модели", СтрЧислоСтрок(ТекстПрограммы),"Процедура"));
			ТекстПрограммы=ТекстПрограммы+
			"def load_layers_weights(layers, layer_names):
			|    for layer in layers:
			|        for layer2 in layer_names:
			|            if (layer.name == layer2['Name']):
			|                if(layer2['Path'] != ''):
			|";
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Вложенные модели", СтрЧислоСтрок(ТекстПрограммы),"Загрузка весов"));
			ТекстПрограммы=ТекстПрограммы+
			"                    layer.load_weights(layer2['Path'],by_name=True)
			|                if(layer2['LoadParameters']):
			|";
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Вложенные модели", СтрЧислоСтрок(ТекстПрограммы),"Копирование параметров компиляции"));
			ТекстПрограммы=ТекстПрограммы+
			"                    trained_model = keras.models.load_model(layer2['Path'])
			|                    layer.compile(optimizer=trained_model.optimizer, loss=trained_model.loss, metrics=trained_model.metrics, loss_weights=trained_model.loss_weights)
			|                if(layer2['KeyParameters'] != ''):
			|";
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Вложенные модели", СтрЧислоСтрок(ТекстПрограммы),"Компиляция"));
			ТекстПрограммы=ТекстПрограммы+
			"                    for dic_params in list_params:
			|                        if(dic_params['Path']==layer2['KeyParameters']):
			|                            layer.compile(optimizer=dic_params['optimizer'], loss=dic_params['loss'], metrics=dic_params['metrics'], loss_weights=dic_params['loss_weights'])
			|                            break
			|                if(layer2['Freeze']):
			|";
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Вложенные модели", СтрЧислоСтрок(ТекстПрограммы),"Заморозка слоя"));
			ТекстПрограммы=ТекстПрограммы+
			"                    layer.trainable=False
			|                if hasattr(layer, 'layers'):
			|                    load_layers_weights(layer.layers, layer2['Childs'])
			|                break
			|";
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Вложенные модели", СтрЧислоСтрок(ТекстПрограммы),"Загрузка списка параметров"));
			ТекстПрограммы=ТекстПрограммы+
			"with open(u'"+СтрЗаменить(ФайлЗагрузкиВесов,"\","\\")+"', 'r') as read_file:
			|    layers_with_paths = json.load(read_file)
			|load_layers_weights(model.layers, layers_with_paths)
			|";
		КонецЕсли;
	//КонецЕсли;
	
КонецФункции

Функция СформироватьТекстПрограммы_ПрямоеКодированиеОбразцов(Объект, ТекстПрограммы, НомераСтрок)
	// vectorize_sequences
	ЕстьПрямоеКодированиеОбразцов=Ложь;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если (СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") И СтрокаОбразцы.ПрямоеКодирование) Или
			(СтрокаОбразцы.ПутьКСловарю="" И СтрокаОбразцы.ПрямоеКодирование И 
			СтрокаОбразцы.СпособЗагрузки=ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy")) Тогда
			ЕстьПрямоеКодированиеОбразцов=Истина; Прервать
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПрямоеКодированиеОбразцов Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Функция", СтрЧислоСтрок(ТекстПрограммы), "Векторизация последовательностей"));
		ТекстПрограммы=ТекстПрограммы+
		"def vectorize_sequences(sequences, dimension):
		|    results = np.zeros((len(sequences), dimension))
		|    for i, sequence in enumerate(sequences):
		|        results[i, sequence] = 1. 
		|    return results
		|";
	КонецЕсли;
	Возврат Истина
КонецФункции

Функция СформироватьТекстПрограммы_Словари(Объект, ТекстПрограммы, НомераСтрок, ИдентификаторFromJSON, МасСловариПутьКСловарю, МасСловариИд, БезЦелей=Ложь)
	// Словари
	//МасСловариПутьКСловарю = Новый Массив; МасСловариИд = Новый Массив;
	СчСловарей=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Или
			(СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") И СтрокаОбразцы.ПутьКСловарю <>"") Тогда
			Если МасСловариПутьКСловарю.Найти(СтрокаОбразцы.ПутьКСловарю)=Неопределено Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Словарь", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
				СчСловарей=СчСловарей+1; ТекстСч = СтрЗаменить(СокрЛП(СчСловарей),Символы.НПП,"");
				ПутьПитон=СтрЗаменить(СтрокаОбразцы.ПутьКСловарю,"\","\\");
				ТекстПрограммы=ТекстПрограммы+
				"with open(u'"+ПутьПитон+"') as f:
				|    data = json.load(f)
				|tokenizer"+ТекстСч+" = "+ИдентификаторFromJSON+"(data)
				|";
				МасСловариПутьКСловарю.Добавить(СтрокаОбразцы.ПутьКСловарю);
				МасСловариИд.Добавить("tokenizer"+ТекстСч);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если БезЦелей Тогда Возврат Истина КонецЕсли;
	
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Или 
			(СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") И СтрокаЦели.ПутьКСловарю <>"") Или
			(СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") И СтрокаЦели.ПутьКСловарю <>"") Тогда
			Если МасСловариПутьКСловарю.Найти(СтрокаЦели.ПутьКСловарю)=Неопределено Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Словарь", СтрЧислоСтрок(ТекстПрограммы),СтрокаЦели.ИмяСлоя));
				СчСловарей=СчСловарей+1; ТекстСч = СтрЗаменить(СокрЛП(СчСловарей),Символы.НПП,"");
				ПутьПитон=СтрЗаменить(СтрокаЦели.ПутьКСловарю,"\","\\");
				ТекстПрограммы=ТекстПрограммы+
				"with open(u'"+ПутьПитон+"') as f:
				|    data = json.load(f)
				|tokenizer"+ТекстСч+" = "+ИдентификаторFromJSON+"(data)
				|";
				МасСловариПутьКСловарю.Добавить(СтрокаЦели.ПутьКСловарю);
				МасСловариИд.Добавить("tokenizer"+ТекстСч);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина
КонецФункции

// Загрузка образцов
Функция СформироватьТекстПрограммы_ЗагрузкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенераторИзКаталога, Прогноз = Ложь, Оценка = Ложь)
	СчВходов=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") 
			И СтрокаОбразцы.ТекстИзКаталога Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Загрузка текстов", СтрЧислоСтрок(ТекстПрограммы),"Из каталога"));
			ТекстПрограммы=ТекстПрограммы+
			"texts = []
			|def collect_texts(path_dir, encoding):
			|    for fname in os.listdir(path_dir):
			|        fpathname = os.path.join(path_dir, fname)
			|        if os.path.isdir(fpathname):
			|            collect_texts(fpathname, encoding)
			|            continue
			|        f = open(fpathname, encoding=encoding)
			|        texts.append(f.read())
			|        f.close()
			|";
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		Если Объект.ИспользоватьГенератор И МассивЭтоГенераторИзКаталога[СчВходов-1] Тогда 
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Образец", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
			РезультатСтруктура=СформироватьТекстПрограммыГенератор(Объект, ТекстСч, Объект.ДанныеИзображений, СтрокаОбразцы, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы), Неопределено,"",Прогноз,Оценка,Неопределено);
			ТекстПрограммы=ТекстПрограммы+РезультатСтруктура.Текст;
			СтрокаОбразцы.Идентификатор = РезультатСтруктура.Идентификатор;
			Продолжить 
		КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Образец", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
 		Если СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
			numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
			ТекстПрограммы=ТекстПрограммы+
			"samples"+ТекстСч+" = np.load(u'"+СтрЗаменить(СтрокаОбразцы.ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
			|";
			СтрокаОбразцы.Идентификатор = "samples"+ТекстСч;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
			ТекстТипДанных=", dtype=np.object";
			Если ЗначениеЗаполнено(СтрокаОбразцы.НовыйТипДанных) Тогда
				ТекстТипДанных=", dtype=np."+Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", СтрокаОбразцы.НовыйТипДанных);
			КонецЕсли;
			Если СтрокаОбразцы.Разделитель="" Или СтрокаОбразцы.Разделитель=" " Тогда
				ТекстРазделитель = ""
			Иначе
				ТекстРазделитель = ", delimiter='"+СтрокаОбразцы.Разделитель+"'";
			КонецЕсли;
			Если СтрокаОбразцы.ПропуститьСтрок=0 Тогда
				ТекстПропуститьСтрок = ""
			Иначе
				ТекстПропуститьСтрок = ", skiprows="+СтрЗаменить(СокрЛП(СтрокаОбразцы.ПропуститьСтрок),Символы.НПП,"");
			КонецЕсли;
			Если СокрЛП(СтрокаОбразцы.Колонки)="" Тогда
				ТекстКолонки = ""
			Иначе
				МасКолонки = СтрРазделить(СтрокаОбразцы.Колонки,",",Ложь);
				СтрокаКолонки = "";
				Для Каждого НомерКолонки Из МасКолонки Цикл
					Если СтрокаКолонки<>"" Тогда СтрокаКолонки=СтрокаКолонки+", " КонецЕсли;
					СтрокаКолонки=СтрокаКолонки+СокрЛП(НомерКолонки);
				КонецЦикла;
				Если МасКолонки.Количество()>1 Тогда
					ТекстКолонки = ", usecols = ("+СтрокаКолонки+")";
				Иначе
					ТекстКолонки = ", usecols = "+СтрокаКолонки;
				КонецЕсли;
			КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
			ТекстПрограммы=ТекстПрограммы+
			"samples"+ТекстСч+" = np.loadtxt(u'"+СтрЗаменить(СтрокаОбразцы.ПутьКФайлу,"\","\\")+"'"+ТекстТипДанных+ТекстРазделитель+ТекстПропуститьСтрок+ТекстКолонки+")
			|";
			СтрокаОбразцы.Идентификатор = "samples"+ТекстСч;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
			ТекстКодировка=?(СтрокаОбразцы.Кодировка="","None","'"+СтрокаОбразцы.Кодировка+"'");
			Если СтрокаОбразцы.ТекстИзКаталога Тогда
				//ТекстПрограммы=ТекстПрограммы+
				//"dirname = u'"+СтрЗаменить(СтрокаОбразцы.ПутьКФайлу,"\","\\")+"'
				//|for fname in os.listdir(dirname):
				//|    if os.path.isdir(os.path.join(dirname, fname)):
				//|        continue
				//|    f = open(os.path.join(dirname, fname))
				//|    texts.append(f.read())
				//|    f.close()
				//|";
				ТекстПрограммы=ТекстПрограммы+
				"texts = []
				|collect_texts(u'"+СтрЗаменить(СтрокаОбразцы.ПутьКФайлу,"\","\\")+"', "+ТекстКодировка+")
				|";
			Иначе
				ТекстПрограммы=ТекстПрограммы+
				"f = open(u'"+СтрЗаменить(СтрокаОбразцы.ПутьКФайлу,"\","\\")+"', encoding="+ТекстКодировка+")
				|data = f.read()
				|f.close()
				|texts = data.split('\n')
				|if texts[-1]=='':
				|    texts=texts[:-1]
				|";
			КонецЕсли;
			ИндексСловаря=МасСловариПутьКСловарю.Найти(СтрокаОбразцы.ПутьКСловарю);
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Векторизация"));
			Если СтрокаОбразцы.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПлотныеВекторы") Тогда
				//Если СтрокаОбразцы.МестоДополнения = ПредопределенноеЗначение("Перечисление.Нейро_СпособДополнения.После") Тогда
				//	ТекстЗаполнение = ", padding='post'"
				//Иначе
				//	ТекстЗаполнение = ""
				//КонецЕсли;
				//Если СтрокаОбразцы.МестоУсечения = ПредопределенноеЗначение("Перечисление.Нейро_СпособДополнения.После") Тогда
				//	ТекстУсечение = ", truncating='post'"
				//Иначе
				//	ТекстУсечение = ""
				//КонецЕсли;
				//Если СтрокаОбразцы.ДлинаПоследовательности>0 Тогда
				//	ТекстДлинаПоследовательности=", maxlen="+СтрЗаменить(СокрЛП(СтрокаОбразцы.ДлинаПоследовательности),Символы.НПП,"");
				//Иначе
				//	ТекстДлинаПоследовательности="";
				//КонецЕсли;
				//ТекстПрограммы=ТекстПрограммы+
				//"sequences = "+МасСловариИд[ИндексСловаря]+".texts_to_sequences(texts)
				//|samples"+ТекстСч+" = keras.preprocessing.sequence.pad_sequences(sequences"+ТекстДлинаПоследовательности+ТекстЗаполнение+ТекстУсечение+")
				//|";
				ТекстПрограммы=ТекстПрограммы+
				"samples"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".texts_to_sequences(texts)
				|";
			ИначеЕсли СтрокаОбразцы.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
				Если Не СтрокаОбразцы.РежимВекторизации.Пустая() Тогда
					ТекстРежим=", mode='"+Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ТекстВКатегорииРежим", СтрокаОбразцы.РежимВекторизации)+"'";
				Иначе
					ТекстРежим="";
				КонецЕсли;
				ТекстПрограммы=ТекстПрограммы+
				"samples"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".texts_to_matrix(texts"+ТекстРежим+")
				|";
			КонецЕсли;
			СтрокаОбразцы.Идентификатор = "samples"+ТекстСч;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

// Загрузка и обработка целей
Функция СформироватьТекстПрограммы_ЗагрузкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации)
	СчВыходов=0;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Цель", СтрЧислоСтрок(ТекстПрограммы),СтрокаЦели.ИмяСлоя));
		СчВыходов=СчВыходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВыходов),Символы.НПП,"");
		Если СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
			numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
			ТекстПрограммы=ТекстПрограммы+
			"targets"+ТекстСч+" = np.load(u'"+СтрЗаменить(СтрокаЦели.ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
			|";
			Если СтрокаЦели.ПутьКСловарю<>"" Тогда
				ИндексСловаря=МасСловариПутьКСловарю.Найти(СтрокаЦели.ПутьКСловарю);
				Если СтрокаЦели.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"ПрямоеКодирование"));
					ТекстПрограммы=ТекстПрограммы+
					"targets"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".sequences_to_matrix("+"targets"+ТекстСч+")
					|";
				КонецЕсли;
			Иначе
				Если СтрокаЦели.Переформировать<>"" Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Переформировать"));
					ТекстПрограммы=ТекстПрограммы+
					"targets"+ТекстСч+" = targets"+ТекстСч+".reshape("+СтрокаЦели.Переформировать+")
					|";
				КонецЕсли;
				Если Не СтрокаЦели.НовыйТипДанных.Пустая() Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Тип"));
					ТекстТипДанных=Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", СтрокаЦели.НовыйТипДанных);
					ТекстПрограммы=ТекстПрограммы+
					"targets"+ТекстСч+" = targets"+ТекстСч+".astype(np."+ТекстТипДанных+")
					|";
				КонецЕсли;
				
				//Если ЗначениеЗаполнено(СтрокаЦели.Нормализовать) Тогда
				//	Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
				//		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
				//	ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
				//		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
				//	КонецЕсли;
				//	СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации)
				//КонецЕсли;
				
				Если СтрокаЦели.ПрямоеКодирование Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"ПрямоеКодирование"));
					ТекстКлассов = ?(СтрокаЦели.Классов=0, "", ", num_classes="+СтрЗаменить(СокрЛП(СтрокаЦели.Классов), Символы.НПП, ""));
					ТекстПрограммы=ТекстПрограммы+
					"targets"+ТекстСч+"=keras.utils.to_categorical(targets"+ТекстСч+ТекстКлассов+")
					|";
				КонецЕсли;
			КонецЕсли;
			СтрокаЦели.Идентификатор = "targets"+ТекстСч;
		ИначеЕсли СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ТекстоваяТаблица") Тогда
			Если ЗначениеЗаполнено(СтрокаЦели.НовыйТипДанных) Тогда
				ТекстТипДанных=", dtype=np."+Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", СтрокаЦели.НовыйТипДанных);
			Иначе
				ТекстТипДанных=""
			КонецЕсли;
			Если СтрокаЦели.Разделитель="" Или СтрокаЦели.Разделитель=" " Тогда
				ТекстРазделитель = ""
			Иначе
				ТекстРазделитель = ", delimiter='"+СтрокаЦели.Разделитель+"'";
			КонецЕсли;
			Если СтрокаЦели.ПропуститьСтрок=0 Тогда
				ТекстПропуститьСтрок = ""
			Иначе
				ТекстПропуститьСтрок = ", skiprows="+СтрЗаменить(СокрЛП(СтрокаЦели.ПропуститьСтрок),Символы.НПП,"");
			КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
			ТекстПрограммы=ТекстПрограммы+
			"targets"+ТекстСч+" = np.loadtxt(u'"+СтрЗаменить(СтрокаЦели.ПутьКФайлу,"\","\\")+"'"+ТекстТипДанных+ТекстРазделитель+ТекстПропуститьСтрок+")
			|";
			Если СтрокаЦели.Переформировать<>"" Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Переформировать"));
				ТекстПрограммы=ТекстПрограммы+
				"targets"+ТекстСч+" = targets"+ТекстСч+".reshape("+СтрокаЦели.Переформировать+")
				|";
			КонецЕсли;
			//Если ЗначениеЗаполнено(СтрокаЦели.Нормализовать) Тогда
			//	Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
			//		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
			//	ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
			//		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
			//	КонецЕсли;
			//	СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации)
			//КонецЕсли;
			Если СтрокаЦели.ПрямоеКодирование Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"ПрямоеКодирование"));
				ТекстКлассов = ?(СтрокаЦели.Классов=0, "", ", num_classes="+СтрЗаменить(СокрЛП(СтрокаЦели.Классов), Символы.НПП, ""));
				ТекстПрограммы=ТекстПрограммы+
				"targets"+ТекстСч+"=keras.utils.to_categorical(targets"+ТекстСч+ТекстКлассов+")
				|";
			КонецЕсли;
			СтрокаЦели.Идентификатор = "targets"+ТекстСч;			
		ИначеЕсли СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Загрузка"));
			ТекстКодировка=?(СтрокаЦели.Кодировка="","None","'"+СтрокаЦели.Кодировка+"'");
			ТекстПрограммы=ТекстПрограммы+
			"f = open(u'"+СтрЗаменить(СтрокаЦели.ПутьКФайлу,"\","\\")+"', encoding="+ТекстКодировка+")
			|data = f.read()
			|f.close()
			|texts = data.split('\n')
			|if texts[-1]=='':
			|    texts=texts[:-1]
			|";
			ИндексСловаря=МасСловариПутьКСловарю.Найти(СтрокаЦели.ПутьКСловарю);
			Если СтрокаЦели.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПлотныеВекторы") Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Векторизация"));
				ТекстПрограммы=ТекстПрограммы+
				"sequences = "+МасСловариИд[ИндексСловаря]+".texts_to_sequences(texts)
				|targets"+ТекстСч+" = keras.preprocessing.sequence.pad_sequences(sequences)
				|";
			ИначеЕсли СтрокаЦели.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Векторизация"));
				ТекстПрограммы=ТекстПрограммы+
				"targets"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".texts_to_matrix(texts)
				|";
			КонецЕсли;
			СтрокаЦели.Идентификатор = "targets"+ТекстСч;
		ИначеЕсли СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
			ОбразецИсточник=Неопределено; ИдИсточника=Неопределено;
			Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
				Если СтрокаЦели.ПутьКФайлу=СтрокаОбразцы.ИмяСлоя Тогда 
					ОбразецИсточник=СтрокаОбразцы; 
					ИдИсточника=СтрокаОбразцы.Идентификатор;
					Прервать 
				КонецЕсли;
			КонецЦикла;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"КопированиеКолонки"));
			ТекстПрограммы=ТекстПрограммы+
			"targets"+ТекстСч+" = "+ИдИсточника+"[:,"+СтрЗаменить(СокрЛП(СтрокаЦели.НомерКолонки), Символы.НПП, "")+"]
			|";
			Если СтрокаЦели.УдалитьКолонку Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"УдалениеКолонки"));
				ТекстПрограммы=ТекстПрограммы+
				ИдИсточника+" = np.delete("+ИдИсточника+", "+СтрЗаменить(СокрЛП(СтрокаЦели.НомерКолонки), Символы.НПП, "")+", axis=1)
				|";
			КонецЕсли;
			Если СтрокаЦели.ПутьКСловарю<>"" Тогда
				ИндексСловаря=МасСловариПутьКСловарю.Найти(СтрокаЦели.ПутьКСловарю);
				Если ОбразецИсточник.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") 
					Или ОбразецИсточник.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
					Если СтрокаЦели.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Векторизация"));
						ТекстПрограммы=ТекстПрограммы+
						"targets"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".sequences_to_matrix(targets"+ТекстСч+")
						|";
					КонецЕсли;
				ИначеЕсли ОбразецИсточник.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
					Если СтрокаЦели.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПлотныеВекторы") Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Векторизация"));
						ТекстПрограммы=ТекстПрограммы+
						"targets"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".texts_to_sequences(targets"+ТекстСч+")
						|";
					ИначеЕсли СтрокаЦели.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Векторизация"));
						ТекстПрограммы=ТекстПрограммы+
						"targets"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".texts_to_matrix(targets"+ТекстСч+")
						|";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокаЦели.Переформировать<>"" Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Переформировать"));
					ТекстПрограммы=ТекстПрограммы+
					"targets"+ТекстСч+" = targets"+ТекстСч+".reshape("+СтрокаЦели.Переформировать+")
					|";
				КонецЕсли;
				Если Не СтрокаЦели.НовыйТипДанных.Пустая() Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Тип"));
					ТекстТипДанных=Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", СтрокаЦели.НовыйТипДанных);
					ТекстПрограммы=ТекстПрограммы+
					"targets"+ТекстСч+" = targets"+ТекстСч+".astype(np."+ТекстТипДанных+")
					|";
				КонецЕсли;
				//Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
				//	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Нормализация"));
				//	Если ТипЗнч(МассивНормализации)=Тип("Структура") Тогда
				//		ИндексНормализации = ОпределитьИндексНормализации(СтрокаЦели.ИмяСлоя, МассивНормализации);
				//	Иначе
				//		ИндексНормализации = Неопределено;
				//	КонецЕсли;
				//	Если ИндексНормализации <> Неопределено Тогда
				//		ТекстПрограммы=ТекстПрограммы+
				//		"targets"+ТекстСч+" /= normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['unique']
				//		|";
				//	Иначе
				//		ТекстПрограммы=ТекстПрограммы+
				//		"targets"+ТекстСч+"_unique = len(np.unique(targets"+ТекстСч+"))
				//		|targets"+ТекстСч+" /= len(np.unique(targets"+ТекстСч+"))
				//		|";
				//		Если ТипЗнч(МассивНормализации)<>Тип("Структура") Тогда
				//			МассивНормализации.Добавить(Новый Структура("ИмяСлоя, Уникальных",СтрокаЦели.ИмяСлоя,"targets"+ТекстСч+"_unique"));
				//		КонецЕсли;
				//	КонецЕсли;
				//	//ТекстПрограммы=ТекстПрограммы+
				//	//"targets"+ТекстСч+"_unique = len(np.unique(targets"+ТекстСч+"))
				//	//|targets"+ТекстСч+" /= len(np.unique(targets"+ТекстСч+"))
				//	//|";
				//	//МассивНормализации.Добавить(Новый Структура("ИмяСлоя, Уникальных",СтрокаЦели.ИмяСлоя,"targets"+ТекстСч+"_unique"));
				//КонецЕсли;
				//Если ЗначениеЗаполнено(СтрокаЦели.Нормализовать) Тогда
				//	Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
				//		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
				//	ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
				//		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
				//	КонецЕсли;
				//	СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации)
				//КонецЕсли;
				Если СтрокаЦели.ПрямоеКодирование Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"ПрямоеКодирование"));
					ТекстКлассов = ?(СтрокаЦели.Классов=0, "", ", num_classes="+СтрЗаменить(СокрЛП(СтрокаЦели.Классов), Символы.НПП, ""));
					ТекстПрограммы=ТекстПрограммы+
					"targets"+ТекстСч+"=keras.utils.to_categorical(targets"+ТекстСч+ТекстКлассов+")
					|";
				КонецЕсли;
			КонецЕсли;
			СтрокаЦели.Идентификатор = "targets"+ТекстСч;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Обработка целей
Функция СформироватьТекстПрограммы_ОбработкаЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивНормализации, СтруктураНормализации=Неопределено)
	СчВыходов=0;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Цель", СтрЧислоСтрок(ТекстПрограммы),СтрокаЦели.ИмяСлоя));
		СчВыходов=СчВыходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВыходов),Символы.НПП,"");
		
		Если СтрокаЦели.Последовательности Тогда
			Если СтрокаЦели.МестоДополнения = ПредопределенноеЗначение("Перечисление.Нейро_СпособДополнения.После") Тогда
				ТекстЗаполнение = ", padding='post'"
			Иначе
				ТекстЗаполнение = ""
			КонецЕсли;
			Если СтрокаЦели.МестоУсечения = ПредопределенноеЗначение("Перечисление.Нейро_СпособДополнения.После") Тогда
				ТекстУсечение = ", truncating='post'"
			Иначе
				ТекстУсечение = ""
			КонецЕсли;
			Если СтрокаЦели.ДлинаПоследовательности>0 Тогда
				ТекстДлинаПоследовательности=", maxlen="+СтрЗаменить(СокрЛП(СтрокаЦели.ДлинаПоследовательности),Символы.НПП,"");
			Иначе
				ТекстДлинаПоследовательности="";
			КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Заполнение последовательностей"));
			ТекстПрограммы=ТекстПрограммы+
			"targets"+ТекстСч+" = keras.preprocessing.sequence.pad_sequences(targets"+ТекстСч+ТекстДлинаПоследовательности+ТекстЗаполнение+ТекстУсечение+")
			|";
		КонецЕсли;
		
		Если СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.МассивNumpy") Тогда
			Если СтрокаЦели.ПутьКСловарю<>"" Тогда
			Иначе
				Если ЗначениеЗаполнено(СтрокаЦели.Нормализовать) Тогда
					Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
					ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
					КонецЕсли;
					СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации, СтруктураНормализации)
				КонецЕсли;
			КонецЕсли;
			//СтрокаЦели.Идентификатор = "targets"+ТекстСч;
		ИначеЕсли СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ТекстоваяТаблица") Тогда
			Если ЗначениеЗаполнено(СтрокаЦели.Нормализовать) Тогда
				Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
				ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
				КонецЕсли;
				СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации, СтруктураНормализации)
			КонецЕсли;
			//СтрокаЦели.Идентификатор = "targets"+ТекстСч;			
		ИначеЕсли СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
			//СтрокаЦели.Идентификатор = "targets"+ТекстСч;
		ИначеЕсли СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.КолонкаИзОбразцов") Тогда
			Если СтрокаЦели.ПутьКСловарю<>"" Тогда
			Иначе
				Если ЗначениеЗаполнено(СтрокаЦели.Нормализовать) Тогда
					Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
					ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
					КонецЕсли;
					СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации, СтруктураНормализации)
				КонецЕсли;
			КонецЕсли;
			//СтрокаЦели.Идентификатор = "targets"+ТекстСч;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Последующая обработка образцов
Функция СформироватьТекстПрограммы_ОбработкаОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор=Неопределено, МассивНормализации = Неопределено, СтруктураНормализации=Неопределено)
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") Тогда
			Если СтрокаОбразцы.ПутьКСловарю<>"" Тогда
				Если СтрокаОбразцы.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Образец", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
				КонецЕсли;
			Иначе
				Если СтрокаОбразцы.Переформировать<>"" Или Не СтрокаОбразцы.НовыйТипДанных.Пустая() Или ЗначениеЗаполнено(СтрокаОбразцы.Нормализовать) Или СтрокаОбразцы.ПрямоеКодирование	Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Образец", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
			Если СтрокаОбразцы.Переформировать<>"" Или НЕ СтрокаОбразцы.НовыйТипДанных.Пустая() Или ЗначениеЗаполнено(СтрокаОбразцы.Нормализовать) Или СтрокаОбразцы.ПрямоеКодирование Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Образец", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Последующая обработка образцов
	СчВходов=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Образец", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
		СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		
		Если СтрокаОбразцы.Последовательности Тогда
			Если СтрокаОбразцы.МестоДополнения = ПредопределенноеЗначение("Перечисление.Нейро_СпособДополнения.После") Тогда
				ТекстЗаполнение = ", padding='post'"
			Иначе
				ТекстЗаполнение = ""
			КонецЕсли;
			Если СтрокаОбразцы.МестоУсечения = ПредопределенноеЗначение("Перечисление.Нейро_СпособДополнения.После") Тогда
				ТекстУсечение = ", truncating='post'"
			Иначе
				ТекстУсечение = ""
			КонецЕсли;
			Если СтрокаОбразцы.ДлинаПоследовательности>0 Тогда
				ТекстДлинаПоследовательности=", maxlen="+СтрЗаменить(СокрЛП(СтрокаОбразцы.ДлинаПоследовательности),Символы.НПП,"");
			Иначе
				ТекстДлинаПоследовательности="";
			КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Заполнение последовательностей"));
			ТекстПрограммы=ТекстПрограммы+
			"samples"+ТекстСч+" = keras.preprocessing.sequence.pad_sequences(samples"+ТекстСч+ТекстДлинаПоследовательности+ТекстЗаполнение+ТекстУсечение+")
			|";
		КонецЕсли;
		
		Если СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.МассивNumpy") Тогда
			Если СтрокаОбразцы.ПутьКСловарю<>"" Тогда
				ИндексСловаря=МасСловариПутьКСловарю.Найти(СтрокаОбразцы.ПутьКСловарю);
				Если СтрокаОбразцы.Векторизация=ПредопределенноеЗначение("Перечисление.Нейро_СпособВекторизацииТекста.ПрямоеКодирование") Тогда
					Если Не СтрокаОбразцы.РежимВекторизации.Пустая() Тогда
						ТекстРежим=", mode='"+Нейро_ОбщийМодуль.ПолучитьИмяИзЗначенияПеречисления("Нейро_ТекстВКатегорииРежим", СтрокаОбразцы.РежимВекторизации)+"'";
					Иначе
						ТекстРежим="";
					КонецЕсли;
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"ПрямоеКодирование"));
					ТекстПрограммы=ТекстПрограммы+
					"samples"+ТекстСч+" = "+МасСловариИд[ИндексСловаря]+".sequences_to_matrix(samples"+ТекстСч+ТекстРежим+")
					|";
				КонецЕсли;
			Иначе
				Если СтрокаОбразцы.Переформировать<>"" Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Переформировать"));
					ТекстПрограммы=ТекстПрограммы+
					"samples"+ТекстСч+" = samples"+ТекстСч+".reshape("+СтрокаОбразцы.Переформировать+")
					|";
				КонецЕсли;
				Если Не СтрокаОбразцы.НовыйТипДанных.Пустая() Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Тип"));
					ТекстТипДанных=Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", СтрокаОбразцы.НовыйТипДанных);
					ТекстПрограммы=ТекстПрограммы+
					"samples"+ТекстСч+" = samples"+ТекстСч+".astype(np."+ТекстТипДанных+")
					|";
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаОбразцы.Нормализовать) Тогда
					Если СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
					ИначеЕсли СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
						НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
					КонецЕсли;
					//СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации)
					СформироватьТекстПрограммы_НормализацияОбразцов(Объект, ТекстПрограммы, СтрокаОбразцы, СчВходов, ТекстСч, МассивЭтоГенератор, МассивНормализации, СтруктураНормализации);
				КонецЕсли;
				Если СтрокаОбразцы.ПрямоеКодирование Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Прямое кодирование"));
					ТекстКлассов = СтрЗаменить(СокрЛП(СтрокаОбразцы.Классов), Символы.НПП, "");
					ТекстПрограммы=ТекстПрограммы+
					"samples"+ТекстСч+" = vectorize_sequences(samples"+ТекстСч+", "+ТекстКлассов+")
					|";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ТекстоваяТаблица") Тогда
			Если СтрокаОбразцы.Переформировать<>"" Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Переформировать"));
				ТекстПрограммы=ТекстПрограммы+
				"samples"+ТекстСч+" = samples"+ТекстСч+".reshape("+СтрокаОбразцы.Переформировать+")
				|";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОбразцы.Нормализовать) Тогда
				Если СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
				ИначеЕсли СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Масштабирование"));
				КонецЕсли;
				//СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации)
				СформироватьТекстПрограммы_НормализацияОбразцов(Объект, ТекстПрограммы, СтрокаОбразцы, СчВходов, ТекстСч, МассивЭтоГенератор, МассивНормализации, СтруктураНормализации);
			КонецЕсли;
			Если СтрокаОбразцы.ПрямоеКодирование Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Прямое кодирование"));
				ТекстКлассов = СтрЗаменить(СокрЛП(СтрокаОбразцы.Классов), Символы.НПП, "");
				ТекстПрограммы=ТекстПрограммы+
				"samples"+ТекстСч+" = vectorize_sequences(samples"+ТекстСч+", "+ТекстКлассов+")
				|";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура СформироватьТекстПрограммы_НормализацияОбразцов(Объект, ТекстПрограммы, СтрокаОбразцы, СчВходов, ТекстСч, МассивЭтоГенератор, МассивНормализации, СтруктураНормализации=Неопределено)
	//Если ТипЗнч(СтруктураНормализации)=Тип("Структура") И СтрокаОбразцы.Нормализовать<>Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
	Если ТипЗнч(СтруктураНормализации)=Тип("Структура") Тогда
		ИндексНормализации = ОпределитьИндексНормализации(СтрокаОбразцы.ИмяСлоя, СтруктураНормализации);
	Иначе
		ИндексНормализации = Неопределено;
	КонецЕсли;
	
	Если ИндексНормализации = Неопределено Тогда //нет сохранений
		СрезСтрок="";
		Если Объект.ИспользоватьГенератор Тогда
			Если Не МассивЭтоГенератор[СчВходов-1] Тогда
				СрезНачало = ?(Объект.ИндексНачало>0,СтрЗаменить(СокрЛП(Объект.ИндексНачало), Символы.НПП,""),"");
				Если Объект.ИндексОкончание>0 Тогда
					СрезСтрок = СрезНачало+":"+СтрЗаменить(СокрЛП(Объект.ИндексОкончание), Символы.НПП,"");
				//ИначеЕсли Объект.ШаговЗаЭпоху>0 Тогда
				//	РазмерПакета = ?(Объект.РазмерПакета=0,32,Объект.РазмерПакета);
				//	СрезСтрок = СрезНачало+":"+СтрЗаменить(СокрЛП(Объект.РазмерПакета*Объект.ШаговЗаЭпоху), Символы.НПП,"");
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Объект.ВыделятьДляКонтроля>0 Тогда
				СрезСтрок = ":len(samples"+ТекстСч+")-int(len(samples"+ТекстСч+")*"+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",Перечисления.Нейро_Типы.Вещественное,Объект.ВыделятьДляКонтроля)+")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НормализоватьКолонки="";
	Если СокрЛП(СтрокаОбразцы.НормализоватьКолонки)<>"" Тогда
		МассивКолонок = СтрРазделить(СтрокаОбразцы.НормализоватьКолонки,",",Ложь);
		Если МассивКолонок.Количество()>1 Тогда
			Для Каждого НомерКолонки Из МассивКолонок Цикл
				Если НормализоватьКолонки<>"" Тогда НормализоватьКолонки=НормализоватьКолонки+", " КонецЕсли;
				НормализоватьКолонки=НормализоватьКолонки+СтрЗаменить(СокрЛП(НомерКолонки),Символы.НПП,"");
			КонецЦикла;
			НормализоватьКолонки = "["+НормализоватьКолонки+"]";
		Иначе
			НормализоватьКолонки=СтрЗаменить(СокрЛП(МассивКолонок[0]),Символы.НПП,"");
		КонецЕсли;
		//НормализоватьКолонки="[:,"+НормализоватьКолонки+"]";
	Иначе
		НормализоватьКолонки="";
	КонецЕсли;
	
	Если СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
		Если ИндексНормализации <> Неопределено Тогда //есть сохранения
			ТекстПрограммы=ТекстПрограммы+
			"samples"+ТекстСч+"_mean = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['mean']
			|samples"+ТекстСч+"_std = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['std']
			|samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" -= normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['mean']
			|samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" /= normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['std']
			|";
		Иначе //нет сохранений
			Если СрезСтрок<>"" И НормализоватьКолонки<>"" Тогда
				СтрокиИКолонки="["+СрезСтрок+","+НормализоватьКолонки+"]";
			ИначеЕсли СрезСтрок<>"" Тогда
				СтрокиИКолонки="["+СрезСтрок+"]";
			ИначеЕсли НормализоватьКолонки<>"" Тогда
				СтрокиИКолонки="[:,"+НормализоватьКолонки+"]";
			Иначе
				СтрокиИКолонки="";
			КонецЕсли;
			ТекстПрограммы=ТекстПрограммы+
			"samples"+ТекстСч+"_mean = samples"+ТекстСч+СтрокиИКолонки+".mean(axis=0)
			|samples"+ТекстСч+"_std = samples"+ТекстСч+СтрокиИКолонки+".std(axis=0)
			|samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" -= samples"+ТекстСч+СтрокиИКолонки+".mean(axis=0)
			|samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" /= samples"+ТекстСч+СтрокиИКолонки+".std(axis=0)
			|";
			//Если ТипЗнч(СтруктураНормализации)<>Тип("Структура") Тогда
			//КонецЕсли;
		КонецЕсли;
		МассивНормализации.Добавить(Новый Структура("Образец, Тип, ИмяСлоя, Среднее, СтандартноеОтклонение",Истина, СтрокаОбразцы.Нормализовать,СтрокаОбразцы.ИмяСлоя,"samples"+ТекстСч+"_mean","samples"+ТекстСч+"_std"));
	ИначеЕсли СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
		ИдНормализатор = ОпределитьИсточникМасштабирования(Объект, СтрокаОбразцы);
		
		Если СрезСтрок<>"" И НормализоватьКолонки<>"" Тогда
			СтрокиИКолонки="["+СрезСтрок+","+НормализоватьКолонки+"]";
		ИначеЕсли СрезСтрок<>"" Тогда
			СтрокиИКолонки="["+СрезСтрок+"]";
		ИначеЕсли НормализоватьКолонки<>"" Тогда
			СтрокиИКолонки="[:,"+НормализоватьКолонки+"]";
		Иначе
			СтрокиИКолонки="";
		КонецЕсли;
		Если ИдНормализатор="" Тогда
			МасМинМакс = СтрРазделить(СтрокаОбразцы.Масштабировать,",",Ложь);
			Если МасМинМакс.Количество()>1 Тогда
				МинЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
				МаксЗнач = СтрЗаменить(СокрЛП(МасМинМакс[1]),Символы.НПП,"");
			Иначе
				Попытка
					МинМакс = Число(СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,""));
					Если МинМакс<0 Тогда
						МинЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
						МаксЗнач = "0.";
					ИначеЕсли МинМакс>0 Тогда
						МинЗнач = "0.";
						МаксЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
					Иначе
						МинЗнач = "";
						МаксЗнач = "";
					КонецЕсли;
				Исключение
					МинЗнач = "";
					МаксЗнач = "";
				КонецПопытки;
			КонецЕсли;
			Если МинЗнач<>"" И МаксЗнач<>"" Тогда
				ТекстДиапазон = "feature_range=("+МинЗнач+", "+МаксЗнач+")"
			Иначе
				ТекстДиапазон = ""
			КонецЕсли;
			Если СтрокаОбразцы.МасштабироватьОбъединить Тогда
				ОбъединитьКолонки=".reshape(-1,1)"
			Иначе
				ОбъединитьКолонки=""
			КонецЕсли;
			Если ИндексНормализации<>Неопределено Тогда
				ТекстПрограммы=ТекстПрограммы+
				"scaler = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]
				|samples"+ТекстСч+"_scaler = MinMaxScaler()
				|samples"+ТекстСч+"_scaler.feature_range = scaler['feature_range']
				|samples"+ТекстСч+"_scaler.data_max_ = scaler['data_max_']
				|samples"+ТекстСч+"_scaler.data_min_ = scaler['data_min_']
				|samples"+ТекстСч+"_scaler.data_range_ = scaler['data_range_']
				|samples"+ТекстСч+"_scaler.min_ = scaler['min_']
				|samples"+ТекстСч+"_scaler.n_samples_seen_ = scaler['n_samples_seen_']
				|samples"+ТекстСч+"_scaler.scale_ = scaler['scale_']
				|samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" = samples"+ТекстСч+"_scaler.transform(samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+")
				|";
			Иначе
				ТекстПрограммы=ТекстПрограммы+
				"samples"+ТекстСч+"_scaler = MinMaxScaler("+ТекстДиапазон+")
				|samples"+ТекстСч+"_scaler.fit(samples"+ТекстСч+СтрокиИКолонки+ОбъединитьКолонки+")
				|samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" = samples"+ТекстСч+"_scaler.transform(samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+")
				|";
			КонецЕсли;
			МассивНормализации.Добавить(Новый Структура("Образец, Тип, ИмяСлоя, Нормировщик", Истина, СтрокаОбразцы.Нормализовать, СтрокаОбразцы.ИмяСлоя,"samples"+ТекстСч+"_scaler"));
		Иначе
			ТекстПрограммы=ТекстПрограммы+
			"samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" = "+ИдНормализатор+".transform(samples"+ТекстСч+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+")
			|";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьТекстПрограммы_НормализацияОбразцовГенератор(Объект, СтрокаТЧ, Строки, Размеры, Результат, МассивНормализации, СтруктураНормализации=Неопределено)
	НормализоватьКолонки="";
	Если СокрЛП(Строки[0].НормализоватьКолонки)<>"" Тогда
		МассивКолонок = СтрРазделить(Строки[0].НормализоватьКолонки,",",Ложь);
		Если МассивКолонок.Количество()>1 Тогда
			Для Каждого НомерКолонки Из МассивКолонок Цикл
				Если НормализоватьКолонки<>"" Тогда НормализоватьКолонки=НормализоватьКолонки+", " КонецЕсли;
				НормализоватьКолонки=НормализоватьКолонки+СтрЗаменить(СокрЛП(НомерКолонки),Символы.НПП,"");
			КонецЦикла;
			НормализоватьКолонки = ",["+НормализоватьКолонки+"]";
		Иначе
			НормализоватьКолонки=","+СтрЗаменить(СокрЛП(МассивКолонок[0]),Символы.НПП,"");
		КонецЕсли;
	Иначе
		НормализоватьКолонки="";
	КонецЕсли;
	
	ОписаниеНормализации = Неопределено;
	
	Если Строки[0].Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
		Если ТипЗнч(СтруктураНормализации)=Тип("Структура") Тогда
			ИндексНормализации = ОпределитьИндексНормализации(СтрокаТЧ.ИмяСлоя, СтруктураНормализации);
		Иначе
			ИндексНормализации = Неопределено;
		КонецЕсли;
		СтрокиИКолонки = "["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"]";
		Если ИндексНормализации <> Неопределено Тогда
			Результат=Результат+
			СтрокаТЧ.Идентификатор+"_mean = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['mean']
			|"+СтрокаТЧ.Идентификатор+"_std = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['std']
			|"+СтрокаТЧ.Идентификатор+" -= normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['mean']
			|"+СтрокаТЧ.Идентификатор+" /= normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['std']
			|"; 
		Иначе
			//Результат=Результат+
			//СтрокаТЧ.Идентификатор+"_mean = "+СтрокаТЧ.Идентификатор+"["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"].mean(axis=0)
			//|"+СтрокаТЧ.Идентификатор+"_std = "+СтрокаТЧ.Идентификатор+"["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"].std(axis=0)
			//|"+СтрокаТЧ.Идентификатор+" -= "+СтрокаТЧ.Идентификатор+"["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"].mean(axis=0)
			//|"+СтрокаТЧ.Идентификатор+" /= "+СтрокаТЧ.Идентификатор+"["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"].std(axis=0)
			//|"; 
			Результат=Результат+
			СтрокаТЧ.Идентификатор+"_mean = "+СтрокаТЧ.Идентификатор+?(Строки[0].НормализоватьРассчитывать=0,СтрокиИКолонки,"")+".mean(axis=0)
			|"+СтрокаТЧ.Идентификатор+"_std = "+СтрокаТЧ.Идентификатор+?(Строки[0].НормализоватьРассчитывать=0,СтрокиИКолонки,"")+".std(axis=0)
			//|"+СтрокаТЧ.Идентификатор+" -= "+СтрокаТЧ.Идентификатор+"["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"].mean(axis=0)
			//|"+СтрокаТЧ.Идентификатор+" /= "+СтрокаТЧ.Идентификатор+"["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"].std(axis=0)
			|"+СтрокаТЧ.Идентификатор+" -= "+СтрокаТЧ.Идентификатор+"_mean
			|"+СтрокаТЧ.Идентификатор+" /= "+СтрокаТЧ.Идентификатор+"_std
			|"; 
		КонецЕсли;
		ОписаниеНормализации = Новый Структура("Образец, Тип, ИмяСлоя, Среднее, СтандартноеОтклонение", Истина,Строки[0].Нормализовать , СтрокаТЧ.ИмяСлоя,СтрокаТЧ.Идентификатор+"_mean",СтрокаТЧ.Идентификатор+"_std");
		МассивНормализации.Добавить(ОписаниеНормализации);
	
	ИначеЕсли Строки[0].Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
		ИдНормализатор = ОпределитьИсточникМасштабирования(Объект, Строки[0]); //из слоя-источника
		СтрокиИКолонки = "["+Размеры.МинИндекс+":"+Размеры.МаксИндекс+НормализоватьКолонки+"]";
		//Если СрезСтрок<>"" И НормализоватьКолонки<>"" Тогда
		//	СтрокиИКолонки="["+СрезСтрок+","+НормализоватьКолонки+"]";
		//ИначеЕсли СрезСтрок<>"" Тогда
		//	СтрокиИКолонки="["+СрезСтрок+"]";
		//ИначеЕсли НормализоватьКолонки<>"" Тогда
		//	СтрокиИКолонки="[:,"+НормализоватьКолонки+"]";
		//Иначе
		//	СтрокиИКолонки="";
		//КонецЕсли;
		Если ИдНормализатор="" Тогда
			МасМинМакс = СтрРазделить(Строки[0].Масштабировать,",",Ложь);
			Если МасМинМакс.Количество()>1 Тогда
				МинЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
				МаксЗнач = СтрЗаменить(СокрЛП(МасМинМакс[1]),Символы.НПП,"");
			Иначе
				Попытка
					МинМакс = Число(СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,""));
					Если МинМакс<0 Тогда
						МинЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
						МаксЗнач = "0.";
					ИначеЕсли МинМакс>0 Тогда
						МинЗнач = "0.";
						МаксЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
					Иначе
						МинЗнач = "";
						МаксЗнач = "";
					КонецЕсли;
				Исключение
					МинЗнач = "";
					МаксЗнач = "";
				КонецПопытки;
			КонецЕсли;
			Если МинЗнач<>"" И МаксЗнач<>"" Тогда
				ТекстДиапазон = "feature_range=("+МинЗнач+", "+МаксЗнач+")"
			Иначе
				ТекстДиапазон = ""
			КонецЕсли;
			Если Строки[0].МасштабироватьОбъединить Тогда
				ОбъединитьКолонки=".reshape(-1,1)"
			Иначе
				ОбъединитьКолонки=""
			КонецЕсли;
			Если ТипЗнч(СтруктураНормализации)=Тип("Структура") Тогда
				ИндексНормализации = ОпределитьИндексНормализации(СтрокаТЧ.ИмяСлоя, СтруктураНормализации);
			Иначе
				ИндексНормализации = Неопределено;
			КонецЕсли;
			Если ИндексНормализации<>Неопределено Тогда //есть сохранение
				Результат=Результат+
				"scaler = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]
				|"+СтрокаТЧ.Идентификатор+"_scaler = MinMaxScaler()
				|"+СтрокаТЧ.Идентификатор+"_scaler.feature_range = scaler['feature_range']
				|"+СтрокаТЧ.Идентификатор+"_scaler.data_max_ = scaler['data_max_']
				|"+СтрокаТЧ.Идентификатор+"_scaler.data_min_ = scaler['data_min_']
				|"+СтрокаТЧ.Идентификатор+"_scaler.data_range_ = scaler['data_range_']
				|"+СтрокаТЧ.Идентификатор+"_scaler.min_ = scaler['min_']
				|"+СтрокаТЧ.Идентификатор+"_scaler.n_samples_seen_ = scaler['n_samples_seen_']
				|"+СтрокаТЧ.Идентификатор+"_scaler.scale_ = scaler['scale_']
				|"+СтрокаТЧ.Идентификатор+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" = "+СтрокаТЧ.Идентификатор+"_scaler.transform("+СтрокаТЧ.Идентификатор+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+")
				|";
			Иначе
				Результат=Результат+
				СтрокаТЧ.Идентификатор+"_scaler = MinMaxScaler("+ТекстДиапазон+")
				|"+СтрокаТЧ.Идентификатор+"_scaler.fit("+СтрокаТЧ.Идентификатор+?(Строки[0].НормализоватьРассчитывать=0,СтрокиИКолонки,"")+ОбъединитьКолонки+")
				|"+СтрокаТЧ.Идентификатор+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" = "+СтрокаТЧ.Идентификатор+"_scaler.transform("+СтрокаТЧ.Идентификатор+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+")
				|";
			КонецЕсли;
			//ТекстНормализацияЦели = "$$_ИмяЦели_$$ = "+СтрокаТЧ.Идентификатор+"_scaler.transform($$_ИмяЦели_$$)";
			ОписаниеНормализации = Новый Структура("Образец, Тип, ИмяСлоя, Нормировщик", Истина, Строки[0].Нормализовать, СтрокаТЧ.ИмяСлоя,СтрокаТЧ.Идентификатор+"_scaler");
			МассивНормализации.Добавить(ОписаниеНормализации);
		Иначе //взять из другого слоя
			Результат=Результат+
			СтрокаТЧ.Идентификатор+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+" = "+ИдНормализатор+".transform("+СтрокаТЧ.Идентификатор+?(НормализоватьКолонки="","","[:,"+НормализоватьКолонки+"]")+")
			|";
			
			//ТекстНормализацияЦели = "$$_ИмяЦели_$$ = "+ИдНормализатор+".transform($$_ИмяЦели_$$)";
			ОписаниеНормализации = Новый Структура("Образец, Тип, ИмяСлоя, Нормировщик", Истина, Строки[0].Нормализовать, СтрокаТЧ.ИмяСлоя, ИдНормализатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеНормализации;
КонецФункции

Процедура СформироватьТекстПрограммы_НормализацияЦелей(Объект, ТекстПрограммы, СтрокаЦели, СчВыходов, ТекстСч, МассивНормализации, СтруктураНормализации=Неопределено)
	Если ТипЗнч(СтруктураНормализации)=Тип("Структура") И СтрокаЦели.Нормализовать<>Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
		ИндексНормализации = ОпределитьИндексНормализации(СтрокаЦели.ИмяСлоя, СтруктураНормализации); //найти сохраненную нормализацию
	Иначе
		ИндексНормализации = Неопределено;
	КонецЕсли;
	
	СрезСтрок="";
	Если Объект.ИспользоватьГенератор Тогда
		СрезНачало = ?(Объект.ИндексНачало>0,СтрЗаменить(СокрЛП(Объект.ИндексНачало), Символы.НПП,""),"");
		Если Объект.ИндексОкончание>0 Тогда
			СрезСтрок = СрезНачало+":"+СтрЗаменить(СокрЛП(Объект.ИндексОкончание), Символы.НПП,"");
		//ИначеЕсли Объект.ШаговЗаЭпоху>0 Тогда
		//	РазмерПакета = ?(Объект.РазмерПакета=0,32,Объект.РазмерПакета);
		//	СрезСтрок = СрезНачало+":"+СтрЗаменить(СокрЛП(Объект.РазмерПакета*Объект.ШаговЗаЭпоху), Символы.НПП,"");
		КонецЕсли;
	Иначе
		Если Объект.ВыделятьДляКонтроля>0 Тогда
			СрезСтрок = ":len(targets"+ТекстСч+")-int(len(targets"+ТекстСч+")*"+Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",Перечисления.Нейро_Типы.Вещественное,Объект.ВыделятьДляКонтроля)+")";
		КонецЕсли;
	КонецЕсли;
	Если СрезСтрок<>"" Тогда
		СтрокиИКолонки="["+СрезСтрок+"]";
	Иначе
		СтрокиИКолонки="";
	КонецЕсли;
	
	Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
		//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Стандартизация"));
		Если ИндексНормализации <> Неопределено Тогда
			ТекстПрограммы=ТекстПрограммы+
			"targets"+ТекстСч+"_unique = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['unique']
			|targets"+ТекстСч+" /= normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]['unique']
			|";
		Иначе
			ТекстПрограммы=ТекстПрограммы+
			"targets"+ТекстСч+"_unique = len(np.unique(targets"+ТекстСч+СтрокиИКолонки+"))
			|targets"+ТекстСч+" /= len(np.unique(targets"+ТекстСч+СтрокиИКолонки+"))
			|";
		КонецЕсли;
		МассивНормализации.Добавить(Новый Структура("Образец, Тип, ИмяСлоя, Уникальных",Ложь, СтрокаЦели.Нормализовать, СтрокаЦели.ИмяСлоя,"targets"+ТекстСч+"_unique"));
		
	ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
		ИдНормализатор = ОпределитьИсточникМасштабирования(Объект, СтрокаЦели, Ложь); //из слоя источника
		
		Если ИдНормализатор="" Тогда
			МасМинМакс = СтрРазделить(СтрокаЦели.Масштабировать,",",Ложь);
			Если МасМинМакс.Количество()>1 Тогда
				МинЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
				МаксЗнач = СтрЗаменить(СокрЛП(МасМинМакс[1]),Символы.НПП,"");
			Иначе
				Попытка
					МинМакс = Число(СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,""));
					Если МинМакс<0 Тогда
						МинЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
						МаксЗнач = "0.";
					ИначеЕсли МинМакс>0 Тогда
						МинЗнач = "0.";
						МаксЗнач = СтрЗаменить(СокрЛП(МасМинМакс[0]),Символы.НПП,"");
					Иначе
						МинЗнач = "";
						МаксЗнач = "";
					КонецЕсли;
				Исключение
					МинЗнач = "";
					МаксЗнач = "";
				КонецПопытки;
			КонецЕсли;
			Если МинЗнач<>"" И МаксЗнач<>"" Тогда
				ТекстДиапазон = "feature_range=("+МинЗнач+", "+МаксЗнач+")"
			Иначе
				ТекстДиапазон = ""
			КонецЕсли;
			Если ИндексНормализации <> Неопределено Тогда
				ТекстПрограммы=ТекстПрограммы+
				"scaler = normalization_list["+СтрЗаменить(СокрЛП(ИндексНормализации),Символы.НПП,"")+"]
				|targets"+ТекстСч+"_scaler = MinMaxScaler()
				|targets"+ТекстСч+"_scaler.feature_range = scaler['feature_range']
				|targets"+ТекстСч+"_scaler.data_max_ = scaler['data_max_']
				|targets"+ТекстСч+"_scaler.data_min_ = scaler['data_min_']
				|targets"+ТекстСч+"_scaler.data_range_ = scaler['data_range_']
				|targets"+ТекстСч+"_scaler.min_ = scaler['min_']
				|targets"+ТекстСч+"_scaler.n_samples_seen_ = scaler['n_samples_seen_']
				|targets"+ТекстСч+"_scaler.scale_ = scaler['scale_']
				|targets"+ТекстСч+" = targets"+ТекстСч+"_scaler.transform(targets"+ТекстСч+")
				|";
			Иначе
				ТекстПрограммы=ТекстПрограммы+
				"targets"+ТекстСч+"_scaler = MinMaxScaler("+ТекстДиапазон+")
				|targets"+ТекстСч+"_scaler.fit(targets"+ТекстСч+СтрокиИКолонки+")
				|targets"+ТекстСч+" = targets"+ТекстСч+"_scaler.transform(targets"+ТекстСч+")
				|";
			КонецЕсли;
			МассивНормализации.Добавить(Новый Структура("Образец, Тип, ИмяСлоя, Нормировщик", Ложь, СтрокаЦели.Нормализовать, СтрокаЦели.ИмяСлоя,"targets"+ТекстСч+"_scaler"));
		Иначе
			ТекстПрограммы=ТекстПрограммы+
			"targets"+ТекстСч+" = "+ИдНормализатор+".transform(targets"+ТекстСч+")
			|";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьТекстПрограммы_ДенормализацияЦели(Объект, Индекс, МассивЭтоГенератор, МассивНормализации, ИспользоватьИндекс=Ложь)
	//Результат = Новый Структура("ТекстПрограммы, Идентификатор","","");
	Результат = "";
	Если МассивНормализации.Количество()=0 Тогда Возврат Результат КонецЕсли;
	СтрокаЦели = Объект.Цели[Индекс];
	СчВыходов=Индекс+1; ТекстСч = СтрЗаменить(СокрЛП(СчВыходов),Символы.НПП,"");
	ТекстИндекс = ?(ИспользоватьИндекс,"["+СтрЗаменить(СокрЛП(Индекс),Символы.НПП,"")+"]","");
	
	Если Объект.ИспользоватьГенератор И СтрокаЦели.ИмяГенератора<>"" Тогда
		ОбразецИсточник=Неопределено; ИдИсточника=Неопределено; ИндексИсточника=0; ЭтоГенератор=Ложь;
		Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
			ИндексИсточника=ИндексИсточника+1;
			Если СтрокаЦели.ИмяГенератора=СтрокаОбразцы.ИмяСлоя Тогда 
				ОбразецИсточник=СтрокаОбразцы;
				ИдИсточника=СтрокаОбразцы.Идентификатор;
				//ЭтоГенераторИзКаталога=МассивЭтоГенераторИзКаталога[ИндексИсточника-1];
				ЭтоГенератор=МассивЭтоГенератор[ИндексИсточника-1];
				Прервать 
			КонецЕсли;
		КонецЦикла;
		Если ОбразецИсточник=Неопределено Или Не ЭтоГенератор Тогда Возврат Результат КонецЕсли;
		ИндексНормализации = Неопределено;
		Для Сч=0 По МассивНормализации.Количество()-1 Цикл
			Если ОбразецИсточник.ИмяСлоя=МассивНормализации[Сч].ИмяСлоя Тогда
				ИндексНормализации = Сч; Прервать
			КонецЕсли;
		КонецЦикла;
		Если ИндексНормализации = Неопределено Тогда Возврат Результат КонецЕсли;
		
		КолонкиЦели = "";
		Если ОбразецИсточник.ТипГенератора = Перечисления.Нейро_Генераторы.ВременныхПоследовательностей Тогда
			Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
			Если Строки.Количество()>0 Тогда
				Если Строки[0].Источник=0 И Строки[0].НормализоватьКолонки<>"" Тогда //Стандартный
					КолонкиЦели="["+СокрЛП(Строки[0].НормализоватьКолонки)+"]";
				ИначеЕсли Строки[0].Источник=1 Тогда //Если Учебный генератор, денормализовать только колонку цели
					КолонкиЦели="["+СтрЗаменить(СокрЛП(Строки[0].КолонкаЦели),Символы.НПП,"")+"]";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивНормализации[ИндексНормализации].Тип = Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
			Результат =
			"result"+ТекстИндекс+" *= "+МассивНормализации[ИндексНормализации].СтандартноеОтклонение+КолонкиЦели+"
			|result"+ТекстИндекс+" += "+МассивНормализации[ИндексНормализации].Среднее+КолонкиЦели+"
			|";
		ИначеЕсли МассивНормализации[ИндексНормализации].Тип = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
			Если КолонкиЦели="" Тогда
				Результат =
				"result"+ТекстИндекс+" = "+МассивНормализации[ИндексНормализации].Нормировщик+".inverse_transform(result"+ТекстИндекс+")
				|"
			Иначе
				Результат =
				"result"+ТекстИндекс+"_sh = np.zeros((result"+ТекстИндекс+".shape[0],"+МассивНормализации[ИндексНормализации].Нормировщик+".scale_.shape[0]), dtype=result"+ТекстИндекс+".dtype)
				//|result"+ТекстИндекс+"_sh[:,"+КолонкиЦели+"]=result"+ТекстИндекс+"[:,list(range(result"+ТекстИндекс+".shape[1]))]
				|result"+ТекстИндекс+"_sh[:,"+КолонкиЦели+"]=result"+ТекстИндекс+"
				|result"+ТекстИндекс+" = "+МассивНормализации[ИндексНормализации].Нормировщик+".inverse_transform(result"+ТекстИндекс+"_sh)[:,"+КолонкиЦели+"]
				|"
			КонецЕсли;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;	
	
	ИндексНормализации = Неопределено;
	Для Сч=0 По МассивНормализации.Количество()-1 Цикл
		Если СтрокаЦели.ИмяСлоя=МассивНормализации[Сч].ИмяСлоя Тогда
			ИндексНормализации = Сч; Прервать
		КонецЕсли;
	КонецЦикла;
	Если ИндексНормализации = Неопределено Тогда Возврат Результат КонецЕсли;
	
	Если СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
		Результат =
		"result"+ТекстИндекс+" *= "+МассивНормализации[ИндексНормализации].Уникальных+"
		|";
	ИначеЕсли СтрокаЦели.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
		ИдНормализатор = ОпределитьИсточникМасштабирования(Объект, СтрокаЦели, Ложь); //из слоя источника
		Если ИдНормализатор="" Тогда
			Результат =
			"result"+ТекстИндекс+" = "+МассивНормализации[ИндексНормализации].Нормировщик+".inverse_transform(result"+ТекстИндекс+")
			|"
		Иначе
			Результат =
			"result"+ТекстИндекс+" = "+ИдНормализатор+".inverse_transform(result"+ТекстИндекс+")
			|";
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ОпределитьИндексНормализации(ИмяСлоя, Нормализация)
	Сч=0;
	Для Каждого КиЗ Из Нормализация Цикл
		Если КиЗ.Значение.layer = ИмяСлоя Тогда
			Возврат Сч
		КонецЕсли;
		Сч=Сч+1;
	КонецЦикла;
	Возврат Неопределено
КонецФункции

Функция ОпределитьИсточникМасштабирования(Объект, СтрокаТЧ, Образец=Истина)
	Сч=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Сч=Сч+1; ТекстСч = СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		//Если СтрокаОбразцы.ИмяСлоя = СтрокаТЧ.Масштабировать И Образец Тогда Продолжить КонецЕсли;
		Если СтрокаОбразцы.ИмяСлоя = СтрокаТЧ.Масштабировать Тогда 
			Если СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
				Возврат "samples"+ТекстСч+"_scaler"
			Иначе
				Если Объект.ИспользоватьГенератор И ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) И СокрЛП(СтрокаОбразцы.ИмяГенератора)<>"" Тогда
					Если СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.ВременныхПоследовательностей Тогда
						Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
						Если Строки.Количество()>0 И Строки[0].Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
							Возврат "samples"+ТекстСч+"_scaler"
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Образец Тогда Возврат "" КонецЕсли;
	
	Сч=0;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Сч=Сч+1; ТекстСч = СтрЗаменить(СокрЛП(Сч),Символы.НПП,"");
		//Если СтрокаЦели.ИмяСлоя = СтрокаТЧ.Масштабировать И Не Образец Тогда Продолжить КонецЕсли;
		Если СтрокаЦели.ИмяСлоя = СтрокаТЧ.Масштабировать Тогда 
			Если СтрокаОбразцы.Нормализовать=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
				Возврат "targets"+ТекстСч+"_scaler"
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ""
КонецФункции


// Учебный генератор
Функция СформироватьТекстПрограммы_УчебныйГенератор(Объект, ТекстПрограммы, НомераСтрок, БезЦелей = Ложь)
	ЕстьУчебныйГенератор=Ложь;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.ТипГенератора = Перечисления.Нейро_Генераторы.ВременныхПоследовательностей И СокрЛП(СтрокаОбразцы.ИмяГенератора)<>"" Тогда
			Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
			Если Строки.Количество()>0 И Строки[0].Источник=1 Тогда
				ЕстьУчебныйГенератор=Истина; Прервать
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьУчебныйГенератор Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Функция", СтрЧислоСтрок(ТекстПрограммы), "Генератор Учебный"));
		ТекстПрограммы=ТекстПрограммы+
		"def regression_generator(data, lookback, delay, min_index=0, max_index=None, shuffle=False, batch_size=128, step=1, tidx=0):
		|    if max_index is None:
		|        max_index = len(data) - delay - 1
		|    i = min_index + lookback
		|    while 1:
		|        if shuffle:
		|            rows = np.random.randint(min_index + lookback, max_index, size=batch_size)
		|        else:
		|            if i + batch_size >= max_index:
		|                i = min_index + lookback
		|            rows = np.arange(i, min(i + batch_size, max_index))
		|            i += len(rows)
		|
		|        samples = np.zeros((len(rows), lookback // step, data.shape[-1]))
		|";
		Если Не БезЦелей Тогда
			ТекстПрограммы=ТекстПрограммы+
			"        targets = np.zeros((len(rows),))
			|";
		КонецЕсли;
		ТекстПрограммы=ТекстПрограммы+
		"        for j, row in enumerate(rows):
		|            indices = range(rows[j] - lookback, rows[j], step)
		|            samples[j] = data[indices]
		|";
		Если БезЦелей Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Генератор Учебный", СтрЧислоСтрок(ТекстПрограммы), "Пакет образцов"));
			ТекстПрограммы=ТекстПрограммы+
			"        yield samples
			|";
		Иначе
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Генератор Учебный", СтрЧислоСтрок(ТекстПрограммы), "Пакет образцов и целей"));
			ТекстПрограммы=ТекстПрограммы+
			"            targets[j] = data[rows[j] + delay][tidx]
			|        yield samples, targets
			|";
		КонецЕсли;
	КонецЕсли;
КонецФункции

//Генераторы (не из каталога)
Функция СформироватьТекстПрограммы_Генераторы(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов, Прогноз = Ложь, Оценка = Ложь, МассивНормализации=Неопределено, СтруктураНормализации=Неопределено)
	СчВходов=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		Если МассивЭтоГенератор[СчВходов-1] И Не МассивЭтоГенераторИзКаталога[СчВходов-1] Тогда 
			//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Генератор", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
			СтрокаЦели = Неопределено; ПутьКЦели = "";
			Если Лев(СтрокаОбразцы.ЦелиГенератора,1)="[" И Прав(СтрокаОбразцы.ЦелиГенератора,1)="]" Тогда
				ТекстСтрокиЦели = Сред(СтрокаОбразцы.ЦелиГенератора,2,СтрДлина(СтрокаОбразцы.ЦелиГенератора)-2);
				МассивСтрокиЦели = СтрРазделить(ТекстСтрокиЦели,",",Ложь);
				СтрокаЦели = Новый Массив;
				Для Каждого СледСтрокаЦели Из МассивСтрокиЦели Цикл
					СтрокиЦели = Объект.Цели.НайтиСтроки(Новый Структура("ИмяСлоя", СокрЛП(СледСтрокаЦели)));
					Если СтрокиЦели.Количество()>0 Тогда
						СтрокаЦели.Добавить(СтрокиЦели[0]);
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокиЦели = Объект.Цели.НайтиСтроки(Новый Структура("ИмяСлоя", СтрокаОбразцы.ЦелиГенератора));
				Если СтрокиЦели.Количество()=0 Тогда
					ПутьКЦели = СтрокаОбразцы.ЦелиГенератора;
				Иначе
					СтрокаЦели = СтрокиЦели[0];
				КонецЕсли;
			КонецЕсли;
			Если СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.ВременныхПоследовательностей Тогда
				РезультатСтруктура=СформироватьТекстПрограммыГенератор(Объект, ТекстСч, Объект.ВременныеПоследовательности, СтрокаОбразцы, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы), СтрокаЦели, ПутьКЦели, Прогноз, Оценка, МассивНормализации, СтруктураНормализации);
			ИначеЕсли СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.Изображений Тогда
				РезультатСтруктура=СформироватьТекстПрограммыГенератор(Объект, ТекстСч, Объект.ДанныеИзображений, СтрокаОбразцы, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы), СтрокаЦели, ПутьКЦели, Прогноз, Оценка, МассивНормализации, СтруктураНормализации);
			ИначеЕсли СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.Пользовательский Тогда
				РезультатСтруктура=СформироватьТекстПрограммыГенератор(Объект, ТекстСч, Объект.ПользовательскиеГенераторы, СтрокаОбразцы, НомераСтрок, СтрЧислоСтрок(ТекстПрограммы), СтрокаЦели, ПутьКЦели, Прогноз, Оценка, МассивНормализации, СтруктураНормализации);
			КонецЕсли;
			//Если РезультатСтруктура.СреднееАрифметическое<>"" Или РезультатСтруктура.СтандартноеОтклонение<>"" И Не РезультатСтруктура.ВставлятьПосле Тогда
			//	
			//КонецЕсли;
			ТекстПрограммы=ТекстПрограммы+РезультатСтруктура.Текст;
			СтрокаОбразцы.Идентификатор = РезультатСтруктура.Идентификатор;
		КонецЕсли;
		Если Прогноз Или Оценка Тогда Продолжить КонецЕсли;
		Если МассивЭтоГенератор[СчВходов-1] И ГенераторыОбразцов[СчВходов-1]>0 Тогда 
			Если ГенераторыОбразцов[СчВходов-1] = 1 Тогда //Массив Bumpy
				ТекстПрограммы=ТекстПрограммы+
				"gen_info.append({'layer':'"+СтрокаОбразцы.ИмяСлоя+"','generators':[";
				ИменаГенераторов=СтрРазделить(СтрокаОбразцы.Идентификатор,",",Ложь);
				ТекстКоличества = "";
				Для Каждого ИмяГенератора Из ИменаГенераторов Цикл
					Если ТекстКоличества<>"" Тогда ТекстКоличества=ТекстКоличества+", " КонецЕсли;
					ТекстКоличества = ТекстКоличества + "{'length':" + ИмяГенератора + ".n,'class_indices': None}";
				КонецЦикла;
				ТекстПрограммы=ТекстПрограммы+ТекстКоличества+"]})
				|";
			ИначеЕсли ГенераторыОбразцов[СчВходов-1] = 2 Тогда //Каталог с файлами
				ТекстПрограммы=ТекстПрограммы+
				"gen_info.append({'layer':'"+СтрокаОбразцы.ИмяСлоя+"','generators':[";
				ИменаГенераторов=СтрРазделить(СтрокаОбразцы.Идентификатор,",",Ложь);
				ТекстКоличества = "";
				Для Каждого ИмяГенератора Из ИменаГенераторов Цикл
					Если ТекстКоличества<>"" Тогда ТекстКоличества=ТекстКоличества+", " КонецЕсли;
					ТекстКоличества = ТекстКоличества + "{'length':" + ИмяГенератора + ".n,'class_indices':" + ИмяГенератора + ".class_indices}";
				КонецЦикла;
				ТекстПрограммы=ТекстПрограммы+ТекстКоличества+"]})
				|";
			ИначеЕсли ГенераторыОбразцов[СчВходов-1] = 3 Тогда //Временные ряды
				ТекстПрограммы=ТекстПрограммы+
				"gen_info.append({'layer':'"+СтрокаОбразцы.ИмяСлоя+"','generators':[";
				ИменаГенераторов=СтрРазделить(СтрокаОбразцы.Идентификатор,",",Ложь);
				ТекстКоличества = "";
				Для Каждого ИмяГенератора Из ИменаГенераторов Цикл
					Если ТекстКоличества<>"" Тогда ТекстКоличества=ТекстКоличества+", " КонецЕсли;
					ТекстКоличества = ТекстКоличества + "{'length':len(" + ИмяГенератора + "),'class_indices': None}";
				КонецЦикла;
				ТекстПрограммы=ТекстПрограммы+ТекстКоличества+"]})
				|";
			ИначеЕсли ГенераторыОбразцов[СчВходов-1] = 4 Тогда //Учебный
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Генератор
Функция СформироватьТекстПрограммы_Генератор(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, БезЦелей = Ложь)
	Если Объект.ВидГенератора = 1 Тогда
		Возврат Истина
	ИначеЕсли Объект.ВидГенератора = 2 Тогда
		Возврат СформироватьТекстПрограммы_ПользовательскийГенераторОбщий(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, БезЦелей)
	КонецЕсли;
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Функция", СтрЧислоСтрок(ТекстПрограммы), "Генератор общий"));
	ТекстПрограммы=ТекстПрограммы+
	"def generator(min_index, max_index, shuffle=False, batch_size=32, subset='training'):
	|";
	ТекстПрограммы=ТекстПрограммы+
	"    i = min_index
	|    iTSG = 0
	|    while 1:
	|        if shuffle:
	|            rows = np.random.randint(min_index, max_index, size=batch_size)
	|        else:
	|            if i + batch_size >= max_index:
	|                i = min_index
	|            rows = np.arange(i, min(i + batch_size, max_index))
	|            rowstxt=slice(i, min(i + batch_size, max_index))
	|            i += len(rows)
	|";
	СчВходов=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		Если МассивЭтоГенератор[СчВходов-1] Тогда
			Генераторы = СтрРазделить(СтрокаОбразцы.Идентификатор,",",Ложь);
			Если Генераторы.Количество()=1 Тогда
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы), "Получить следующий пакет"));
				Если СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
					СтрокиГен = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
					Если СтрокиГен[0].Источник=0 Тогда
						ТекстПрограммы=ТекстПрограммы+
						"        next_batch"+ТекстСч+"="+Генераторы[0]+"[iTSG]
						|        iTSG += 1
						|        if(iTSG>len("+Генераторы[0]+")-1):
						|            iTSG = 0
						|";
					ИначеЕсли СтрокиГен[0].Источник=1 Тогда
						ТекстПрограммы=ТекстПрограммы+
						"        next_batch"+ТекстСч+"=next("+Генераторы[0]+")
						|";
					КонецЕсли;
				ИначеЕсли СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Пользовательский") Тогда
						ТекстПрограммы=ТекстПрограммы+
						"        next_batch"+ТекстСч+"=next("+Генераторы[0]+")
						|";
				Иначе
					ТекстПрограммы=ТекстПрограммы+
					"        next_batch"+ТекстСч+"="+Генераторы[0]+".next()
					|";
				КонецЕсли;
			Иначе
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы), "Получить следующий пакет"));
				Если СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.ВременныхПоследовательностей") Тогда
					СтрокиГен = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
					Если СтрокиГен[0].Источник=0 Тогда
						ТекстПрограммы=ТекстПрограммы+
						"        if subset=='training':
						|            next_batch"+ТекстСч+"="+Генераторы[0]+"[iTSG]
						|            iTSG += 1
						|            if(iTSG>len("+Генераторы[0]+")-1):
						|                iTSG = 0
						|        else:
						|            next_batch"+ТекстСч+"="+Генераторы[1]+"[iTSG]
						|            iTSG += 1
						|            if(iTSG>len("+Генераторы[1]+")-1):
						|                iTSG = 0
						|";
					ИначеЕсли СтрокиГен[0].Источник=1 Тогда
						ТекстПрограммы=ТекстПрограммы+
						"        if subset=='training':
						|            next_batch"+ТекстСч+"=next("+Генераторы[0]+")
						|        else:
						|            next_batch"+ТекстСч+"=next("+Генераторы[1]+")
						|";
					КонецЕсли;
				ИначеЕсли СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Пользовательский") Тогда
					ТекстПрограммы=ТекстПрограммы+
					"        if subset=='training':
					|            next_batch"+ТекстСч+"=next("+Генераторы[0]+")
					|        else:
					|            next_batch"+ТекстСч+"=next("+Генераторы[1]+")
					|";
				Иначе //Изображений
					ТекстПрограммы=ТекстПрограммы+
					"        if subset=='training':
					|            next_batch"+ТекстСч+"="+Генераторы[0]+".next()
					|        else:
					|            next_batch"+ТекстСч+"="+Генераторы[1]+".next()
					|";
				КонецЕсли;
			КонецЕсли;
			//Если МассивЭтоГенераторИзКаталога[СчВходов-1] Тогда
			//КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы), "Получить образцы из пакета"));
			Если БезЦелей Тогда
				ТекстИндекс = "";
				Если МассивЭтоГенератор[СчВходов-1] И СтрокаОбразцы.ТипГенератора=ПредопределенноеЗначение("Перечисление.Нейро_Генераторы.Изображений") Тогда
					СтрокиГен = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
					Если СтрокиГен[0].Источник=1 Тогда //Из каталога
						ТекстИндекс = "[0]";
					КонецЕсли;
				КонецЕсли;
				ТекстПрограммы=ТекстПрограммы+
				"        samples"+ТекстСч+"batch=next_batch"+ТекстСч+ТекстИндекс+"
				|";
			Иначе
				ТекстПрограммы=ТекстПрограммы+
				"        samples"+ТекстСч+"batch=next_batch"+ТекстСч+"[0]
				|";
			КонецЕсли;
			//Продолжить 
		Иначе //Не генератор
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы), "Сформировапть пакет образцов"));
			Если СтрокаОбразцы.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиОбразцов.ОбычныйТекст") Тогда
				ТекстПрограммы=ТекстПрограммы+
				"        if shuffle:
				|            samples"+ТекстСч+"batch=[samples"+ТекстСч+"[index] for index in rows]
				|        else:
				|            samples"+ТекстСч+"batch=samples"+ТекстСч+"[rowstxt]
				|";
			Иначе
				ТекстПрограммы=ТекстПрограммы+
				"        samples"+ТекстСч+"batch=np.copy(samples"+ТекстСч+"[rows])
				|";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не БезЦелей Тогда
		СчВходов=0;
		Для Каждого СтрокаЦели Из Объект.Цели Цикл
			СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
			ОбразецИсточник=Неопределено; ИдИсточника=Неопределено; ИндексИсточника=0; ЭтоГенератор=Ложь;
			ТекстИндексПакетаИсточника = ТекстСч; ТекстИндексПодПакета = "";
			Если СтрокаЦели.ИмяГенератора<>"" Тогда
				Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
					ИндексИсточника=ИндексИсточника+1;
					Если СтрокаЦели.ИмяГенератора=СтрокаОбразцы.ИмяСлоя Тогда 
						ОбразецИсточник=СтрокаОбразцы;
						ИдИсточника=СтрокаОбразцы.Идентификатор;
						//ЭтоГенераторИзКаталога=МассивЭтоГенераторИзКаталога[ИндексИсточника-1];
						ЭтоГенератор=МассивЭтоГенератор[ИндексИсточника-1];
						ТекстИндексПакетаИсточника = СтрЗаменить(СокрЛП(ИндексИсточника),Символы.НПП,"");
						Прервать 
					ИначеЕсли Лев(СтрокаЦели.ИмяГенератора,СтрДлина(СтрокаОбразцы.ИмяСлоя)+1)=СтрокаОбразцы.ИмяСлоя+"[" И Прав(СтрокаЦели.ИмяГенератора,1)="]" Тогда 
						ОбразецИсточник=СтрокаОбразцы;
						ИдИсточника=СтрокаОбразцы.Идентификатор;
						//	ИдИсточника=СтрокаОбразцы.Идентификатор+Прав(СтрокаЦели.ИмяГенератора,СтрДлина(СтрокаЦели.ИмяГенератора)-СтрДлина(СтрокаОбразцы.ИмяСлоя));
					    ТекстИндексПодПакета = Прав(СтрокаЦели.ИмяГенератора,СтрДлина(СтрокаЦели.ИмяГенератора)-СтрДлина(СтрокаОбразцы.ИмяСлоя));
						ЭтоГенератор=МассивЭтоГенератор[ИндексИсточника-1];
						ТекстИндексПакетаИсточника = СтрЗаменить(СокрЛП(ИндексИсточника),Символы.НПП,"");
						Прервать 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭтоГенератор Тогда 
				ТекстИндексы = ПолучитьИндексыЦелиГенератора(Объект, ОбразецИсточник);
				Если ТекстИндексы<>"" Тогда
					ИндексыКолонок = СтрРазделить(ТекстИндексы,",",Ложь);
					Если ИндексыКолонок.Количество()>1 Тогда ТекстИндексы="["+ТекстИндексы+"]" КонецЕсли;
				КонецЕсли;
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы), "Получить цели из пакета"));
				ТекстПрограммы=ТекстПрограммы+
				"        targets"+ТекстСч+"batch=next_batch"+ТекстИндексПакетаИсточника+"[1]"+ТекстИндексПодПакета+?(ТекстИндексы<>"","[:,"+ТекстИндексы+"]","")+"
				|";
			Иначе
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы), "Сформировапть пакет целей"));
				Если СтрокаЦели.СпособЗагрузки = ПредопределенноеЗначение("Перечисление.Нейро_СпособыЗагрузкиЦелей.ОбычныйТекст") Тогда
					ТекстПрограммы=ТекстПрограммы+
					"        if shuffle:
					|            targets"+ТекстСч+"batch=[targets"+ТекстСч+"[index] for index in rows]
					|        else:
					|            targets"+ТекстСч+"batch=targets"+ТекстСч+"[rowstxt]
					|";
				Иначе
					ТекстПрограммы=ТекстПрограммы+
					"        targets"+ТекстСч+"batch=np.copy(targets"+ТекстСч+"[rows])
					|";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СписокОбразцов=""; СчВходов=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл //Результат - образцы
		СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		Если СписокОбразцов<>"" Тогда СписокОбразцов=СписокОбразцов+", " КонецЕсли;
		СписокОбразцов=СписокОбразцов+"samples"+ТекстСч+"batch"
	КонецЦикла;
	Если Объект.Образцы.Количество()>1 Тогда СписокОбразцов="["+СписокОбразцов+"]" КонецЕсли;
	
	Если Не БезЦелей Тогда
		СписокЦелей=""; СчВходов=0;
		Для Каждого СтрокаЦели Из Объект.Цели Цикл //Результат цели
			СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
			
			Если СписокЦелей<>"" Тогда СписокЦелей=СписокЦелей+", " КонецЕсли;
			СписокЦелей=СписокЦелей+"targets"+ТекстСч+"batch"
		КонецЦикла;
		Если Объект.Цели.Количество()>1 Тогда СписокЦелей="["+СписокЦелей+"]" КонецЕсли;
	КонецЕсли;

	Если БезЦелей Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Генератор общий", СтрЧислоСтрок(ТекстПрограммы), "Выдать образцы"));
		ТекстПрограммы=ТекстПрограммы+
		"        yield "+СписокОбразцов+"
		|";
	Иначе
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Генератор общий", СтрЧислоСтрок(ТекстПрограммы), "Выдать образцы и цели"));
		ТекстПрограммы=ТекстПрограммы+
		"        yield "+СписокОбразцов+", "+СписокЦелей+"
		|";
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

//Если цели имеют несколько колонок, можно возвращать только некоторые из них (через запятую).
Функция ПолучитьИндексыЦелиГенератора(Объект, СтрокаОбразцы)
	Если СтрокаОбразцы=Неопределено Или Не ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) Или СокрЛП(СтрокаОбразцы.ИмяГенератора="") Тогда Возврат "" КонецЕсли;
	Если СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.ВременныхПоследовательностей Тогда
		Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
		Если Строки.Количество()>0 Тогда
			Возврат СокрЛП(Строки[0].СписокКолонок)
		КонецЕсли;
	КонецЕсли;
	Возврат ""
КонецФункции

Функция ЗаполнитьМассивыЭтоГенератор(Объект, МассивЭтоГенератор, МассивЭтоГенераторИзКаталога, ГенераторыОбразцов)
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) И СокрЛП(СтрокаОбразцы.ИмяГенератора)<>"" Тогда
			МассивЭтоГенератор.Добавить(Истина);
		Иначе
			МассивЭтоГенератор.Добавить(Ложь);
		КонецЕсли;
		Результат = Ложь;
		Если СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.Изображений Тогда
			Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
			Если Строки.Количество()>0 И Строки[0].Источник=1 Тогда Результат = Истина КонецЕсли;
		КонецЕсли;
		МассивЭтоГенераторИзКаталога.Добавить(Результат);
	КонецЦикла;
	
	//ГенераторыОбразцов = Новый Массив;
	//Проверить наличие и типы генераторов
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) Тогда
			Если СтрокаОбразцы.ТипГенератора = Перечисления.Нейро_Генераторы.Изображений Тогда
				Строки = Объект.ДанныеИзображений.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
				Если Строки[0].Источник = 0 Тогда
					ГенераторыОбразцов.Добавить(1); //Массив Bumpy
				ИначеЕсли Строки[0].Источник = 1 Тогда
					ГенераторыОбразцов.Добавить(2); //Каталог с файлами
				КонецЕсли;
			ИначеЕсли СтрокаОбразцы.ТипГенератора = Перечисления.Нейро_Генераторы.ВременныхПоследовательностей Тогда
				Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
				Если Строки[0].Источник = 0 Тогда
					ГенераторыОбразцов.Добавить(3); //Временные ряды
				ИначеЕсли Строки[0].Источник = 1 Тогда
					ГенераторыОбразцов.Добавить(4); //Учебный
				КонецЕсли;
			ИначеЕсли СтрокаОбразцы.ТипГенератора = Перечисления.Нейро_Генераторы.Пользовательский Тогда
					ГенераторыОбразцов.Добавить(5); //Пользовательский
			КонецЕсли;
		Иначе
			ГенераторыОбразцов.Добавить(0); //Нет генератора
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция СформироватьТекстПрограммыПоказатьИзображения(Параметры, ПараметрыГенератора) Экспорт
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы=
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+Нейро_ОбщийМодуль.ИдFromKeras("
		|from keras.preprocessing.image import ImageDataGenerator,  img_to_array, load_img
		|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|import os
		|import numpy as np
		|import json
		|");
	Иначе
		ТекстПрограммы=
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдFromKeras("
		|from keras.preprocessing.image import ImageDataGenerator,  img_to_array, load_img
		|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|import os
		|import numpy as np
		|import json
		|");
	КонецЕсли;
	
	Если Параметры.Расширение=".png" Тогда
		Расширение="png"
	Иначе
		Расширение="jpeg"
	КонецЕсли;
	
	//СтрокаСписокФайлов="";
	//Для Сч=1 По 8 Цикл
	//	Если СтрокаСписокФайлов<>"" Тогда
	//		СтрокаСписокФайлов=СтрокаСписокФайлов+",
	//		|";
	//	КонецЕсли;
	//	ПутьКФайлу = Параметры.КаталогИзображения+Параметры.ИмяБезРасширения+"_"+СокрЛП(Сч)+"."+Расширение;
	//	СтрокаСписокФайлов=СтрокаСписокФайлов+"u'"+СтрЗаменить(ПутьКФайлу,"\","\\")+"'";
	//КонецЦикла;
	
	НовыйКаталог = Параметры.КаталогИзображения+"preview";
	
	ТекстПрограммы=ТекстПрограммы+
    "dir_augmented_data = u'"+СтрЗаменить(НовыйКаталог,"\","\\")+"'
	|try:
	|    os.mkdir(dir_augmented_data)
	|except:
	|    for item in os.listdir(dir_augmented_data):
	|        os.remove(os.path.join(dir_augmented_data, item))
	|";
	
	//"filelist=["+СтрокаСписокФайлов+"]
	//|for file_name in filelist:
	//|    try:
	//|        os.remove(file_name)
	//|    except:
	//|        pass
	//|";
	ТекстГенератора="datagen = "+СформироватьТекстПрограммыГенераторИзображения(ПараметрыГенератора);
	ТекстПрограммы=ТекстПрограммы+ТекстГенератора+
	"
	|orig_img = load_img(u'"+СтрЗаменить(Параметры.ФайлИзображения,"\","\\")+"')
	|x = img_to_array(orig_img)
	|x = x.reshape((1,) + x.shape)
	|";
	Если ПараметрыГенератора.Источник=0 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"datagen.fit(x)
		|";
	КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+
	"i = 0
	|Nplot = 8
	|for batch in datagen.flow(x,batch_size=1,
	|                      save_to_dir=dir_augmented_data,
	|                      save_prefix=u'"+Параметры.ИмяБезРасширения+"',
	|                      save_format='"+Расширение+"'):
	|    i += 1
	|    if i > Nplot - 1: ## generate 8 pictures
	|        break
	|";
	
	Возврат ТекстПрограммы
КонецФункции

Функция СформироватьТекстПрограммыГенераторИзображения(ПараметрыГенератора, Прогноз = Ложь, Оценка = Ложь)
	МассивПараметров=Новый Массив;
	
	Если ПараметрыГенератора.Источник=0 Тогда
		ЗаполнитьМассивПараметров_ГенераторИзображенияМассив(ПараметрыГенератора, МассивПараметров, Прогноз, Оценка);
	ИначеЕсли ПараметрыГенератора.Источник=1 Тогда
		ЗаполнитьМассивПараметров_ГенераторИзображенияКаталог(ПараметрыГенератора, МассивПараметров, Прогноз, Оценка);
	КонецЕсли;
	
	СтрокаПараметры="";
	Для Каждого СтруктураПараметра Из МассивПараметров Цикл
		Если СтрокаПараметры<>"" Тогда СтрокаПараметры=СтрокаПараметры+", " КонецЕсли;
		СтрокаПараметры=СтрокаПараметры+СтруктураПараметра.Ключ+"="+СтруктураПараметра.Значение;
	КонецЦикла;
	
	Возврат 
	"ImageDataGenerator("+СтрокаПараметры+")";
КонецФункции

Процедура ЗаполнитьМассивПараметров_ГенераторИзображенияМассив(Параметры, МассивПараметров, Прогноз = Ложь, Оценка = Ложь)
	//keras.preprocessing.image.ImageDataGenerator(featurewise_center=False, samplewise_center=False, featurewise_std_normalization=False, samplewise_std_normalization=False, zca_whitening=False, zca_epsilon=1e-06, 
	//rotation_range=0, width_shift_range=0.0, height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0, channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=False, vertical_flip=False, rescale=None, preprocessing_function=None, data_format='channels_last', validation_split=0.0, interpolation_order=1, dtype='float32')	
	
	ТипВещественное=Перечисления.Нейро_Типы.Вещественное;
	
	Если Параметры.ЦентрироватьПоПризнакам Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","featurewise_center","True"));
	КонецЕсли;
	Если Параметры.ЦентрироватьПоОбразцам Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","samplewise_center","True"));
	КонецЕсли;
	Если Параметры.НормализацияПоПризнакам Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","featurewise_std_normalization","True"));
	КонецЕсли;
	Если Параметры.НормализацияПоОбразцам Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","samplewise_std_normalization","True"));
	КонецЕсли;
	Если Параметры.ОтбеливаниеZCA Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","zca_whitening","True"));
	КонецЕсли;
	Если Параметры.ОтбеливаниеЭпсилон<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","zca_epsilon",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.ОтбеливаниеЭпсилон)));
	КонецЕсли;
	
	ДополнитьМассивПараметров_ГенераторИзображения(Параметры, МассивПараметров, Прогноз, Оценка);

	//Если Параметры.КоэффициентМасштабирования<>0 Тогда
	//	МассивПараметров.Добавить(Новый Структура("Ключ, Значение","rescale",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.КоэффициентМасштабирования)));
	//КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаполнитьМассивПараметров_ГенераторИзображенияКаталог(Параметры, МассивПараметров, Прогноз = Ложь, Оценка = Ложь)
	Если Параметры.КоэффициентМасштабирования=0 Тогда
		КоэффициентМасштабирования="1./255"
	Иначе
		КоэффициентМасштабирования=Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", Перечисления.Нейро_Типы.Вещественное, Параметры.КоэффициентМасштабирования)
	КонецЕсли;
	МассивПараметров.Добавить(Новый Структура("Ключ, Значение","rescale",КоэффициентМасштабирования));
	
	ДополнитьМассивПараметров_ГенераторИзображения(Параметры, МассивПараметров, Прогноз, Оценка);
КонецПроцедуры

Процедура ДополнитьМассивПараметров_ГенераторИзображения(Параметры, МассивПараметров, Прогноз = Ложь, Оценка = Ложь)
	//rotation_range=0, width_shift_range=0.0, height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0, channel_shift_range=0.0, 
	//fill_mode='nearest', cval=0.0, horizontal_flip=False, vertical_flip=False, rescale=None, preprocessing_function=None, data_format='channels_last', 
	//validation_split=0.0, interpolation_order=1, dtype='float32')	
	ТипВещественное=Перечисления.Нейро_Типы.Вещественное;
	ТипЦелое=Перечисления.Нейро_Типы.Целое;
	
	Если Параметры.ДиапазонВращения<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","rotation_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипЦелое,Параметры.ДиапазонВращения)));
	КонецЕсли;
	Если Параметры.ДиапазонСдвигаПоШирине=0 И Параметры.ДиапазонСдвигаПоШиринеВещественное<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","width_shift_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.ДиапазонСдвигаПоШиринеВещественное)));
	ИначеЕсли Параметры.ДиапазонСдвигаПоШирине=1 И Параметры.ДиапазонСдвигаПоШиринеЦелое<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","width_shift_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипЦелое,Параметры.ДиапазонСдвигаПоШиринеЦелое)));
	КонецЕсли;
	Если Параметры.ДиапазонСдвигаПоВысоте=0 И Параметры.ДиапазонСдвигаПоВысотеВещественное<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","height_shift_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.ДиапазонСдвигаПоВысотеВещественное)));
	ИначеЕсли Параметры.ДиапазонСдвигаПоВысоте=1 И Параметры.ДиапазонСдвигаПоВысотеЦелое<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","height_shift_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипЦелое,Параметры.ДиапазонСдвигаПоВысотеЦелое)));
	КонецЕсли;
	Если Параметры.ЯркостьНаименьшая<>0 Или Параметры.ЯркостьНаибольшая<>0 Тогда
		ЯркостьНаименьшая = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.ЯркостьНаименьшая);
		ЯркостьНаибольшая = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.ЯркостьНаибольшая);
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","brightness_range","("+ЯркостьНаименьшая+","+ЯркостьНаибольшая+")"));
	КонецЕсли;
	Если Параметры.Уклон<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","shear_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.Уклон)));
	КонецЕсли;
	Если Параметры.ИзменениеРазмера<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","zoom_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.ИзменениеРазмера)));
	КонецЕсли;
	Если Параметры.КаналаСдвиг<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","channel_shift_range",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.КаналаСдвиг)));
	КонецЕсли;
	Если Параметры.РежимЗаполнения=1 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","fill_mode","'constant'"));
	ИначеЕсли Параметры.РежимЗаполнения=2 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","fill_mode","'reflect'"));
	ИначеЕсли Параметры.РежимЗаполнения=3 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","fill_mode","'wrap'"));
	КонецЕсли;
	Если Параметры.РежимЗаполненияКонстанта<>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","cval",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.РежимЗаполненияКонстанта)));
	КонецЕсли;
	Если Параметры.ОтразитьПоГоризонтали Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","horizontal_flip","True"));
	КонецЕсли;
	Если Параметры.ОтразитьПоВертикали Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","vertical_flip","True"));
	КонецЕсли;
	Если Параметры.ВыделятьДляКонтроля<>0 И Не Прогноз И Не Оценка Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","validation_split",Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ТипВещественное,Параметры.ВыделятьДляКонтроля)));
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ТипДанных) Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","dtype","np."++Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", Параметры.ТипДанных)));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстПрограммыГенератор(Объект, ТекстИндекс, ТЧ, СтрокаТЧ, НомераСтрок, ЧислоСтрок, СтрокаЦели=Неопределено, ПутьКЦели="", Прогноз = Ложь, Оценка = Ложь, МассивНормализации, СтруктураНормализации=Неопределено)
	Результат = ""; РезультатСтруктура=Новый Структура;
	ИмяГенератораОбучения=""; ИмяГенератораПроверки="";
	//СреднееАрифметическое = ""; СтандартноеОтклонение = ""; ВставлятьПосле = Ложь;
	Если СтрокаТЧ.ТипГенератора=Перечисления.Нейро_Генераторы.Изображений Тогда
		Строки = ТЧ.НайтиСтроки(Новый Структура("Имя",СтрокаТЧ.ИмяГенератора));
		Если Строки.Количество()=0 Тогда Возврат Результат КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),"Генератор изображений"));
		Результат = 
		"datagen"+ТекстИндекс+" = "+
		СформироватьТекстПрограммыГенераторИзображения(Строки[0], Прогноз, Оценка)+"
		|";
		Если Строки[0].ВыделятьДляКонтроля>0 И Не Прогноз И Не Оценка Тогда
			ИмяГенератораОбучения="train_generator"+ТекстИндекс;
			ИмяГенератораПроверки="validation_generator"+ТекстИндекс;
			Если Строки[0].Источник = 1 Тогда //flow_from_directory
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," из каталога"));
				Результат = Результат + ИмяГенератораОбучения+" = datagen"+ТекстИндекс +"."+ СформироватьТекстПрограммыГенераторИзображенияИзКаталога(СтрокаТЧ.ПутьКФайлу, Строки[0], Объект.РазмерПакета, Объект.Перемешивать, Ложь)+"
				|";
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," из каталога (проверка)"));
				Результат = Результат + ИмяГенератораПроверки+" = datagen"+ТекстИндекс +"."+ СформироватьТекстПрограммыГенераторИзображенияИзКаталога(СтрокаТЧ.ПутьКФайлу, Строки[0], Объект.РазмерПакета, Ложь, Истина)+"
				|";
			Иначе //flow
				Если Строки[0].ИнициализаторГСЧ<>0 Тогда
					ПараметрИнициализаторГСЧ=", seed="+СтрЗаменить(СокрЛП(Строки[0].ИнициализаторГСЧ),Символы.НПП,"");
				Иначе
					ПараметрИнициализаторГСЧ=""
				КонецЕсли;
				Если Строки[0].ЦентрироватьПоПризнакам Или Строки[0].НормализацияПоПризнакам Или Строки[0].ОтбеливаниеZCA Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," заполнить генератор"));
					Результат = Результат + 
					"datagen"+ТекстИндекс+".fit("+СтрокаТЧ.Идентификатор+ПараметрИнициализаторГСЧ+")
					|";
					//Если ТипЗнч(МассивНормализации)=Тип("Массив") Тогда
						Результат = Результат + 
						СтрокаТЧ.Идентификатор+"_mean = datagen"+ТекстИндекс+".mean
						|"+СтрокаТЧ.Идентификатор+"_std = datagen"+ТекстИндекс+".std
						|";
						//СреднееАрифметическое = "datagen"+ТекстИндекс+".mean";
						//СтандартноеОтклонение = "datagen"+ТекстИндекс+".std";
						//ВставлятьПосле=Истина;
						МассивНормализации.Добавить(Новый Структура("Образец, Тип, ИмяСлоя, Среднее, СтандартноеОтклонение", Истина, Перечисления.Нейро_ВидыНормализации.Стандартизация, СтрокаТЧ.ИмяСлоя, СтрокаТЧ.Идентификатор+"_mean",СтрокаТЧ.Идентификатор+"_std"));
					//КонецЕсли;
				КонецЕсли;
				СтруктураТексты=СформироватьТекстПрограммыГенераторИзображенияИзМассива(СтрокаТЧ, Строки[0], Объект.РазмерПакета, Объект.Перемешивать, Ложь, СтрокаЦели, ПутьКЦели);
				//Результат = Результат + ИмяГенератораОбучения+" = datagen"+ТекстИндекс +"."+ СформироватьТекстПрограммыГенераторИзображенияИзМассива(СтрокаТЧ, Строки[0], РазмерПакета, Перемешивать, Ложь, СтрокаЦели, ПутьКЦели)+"
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," из массива"));
				Результат = Результат + СтруктураТексты.ТекстДоп + ИмяГенератораОбучения+" = datagen"+ТекстИндекс +"."+ СтруктураТексты.Текст +"
				|";
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," из массива (проверка)"));
				СтруктураТексты=СформироватьТекстПрограммыГенераторИзображенияИзМассива(СтрокаТЧ, Строки[0], Объект.РазмерПакета, Ложь, Истина, СтрокаЦели, ПутьКЦели);
				//Результат = Результат + ИмяГенератораПроверки+" = datagen"+ТекстИндекс +"."+ СформироватьТекстПрограммыГенераторИзображенияИзМассива(СтрокаТЧ, Строки[0], РазмерПакета, Ложь, Истина, СтрокаЦели, ПутьКЦели)+"
				Результат = Результат + ИмяГенератораПроверки+" = datagen"+ТекстИндекс +"."+ СтруктураТексты.Текст +"
				|";
			КонецЕсли;
		Иначе
			ИмяГенератораОбучения="train_generator"+ТекстИндекс;
			Если Строки[0].Источник = 1 Тогда //flow_from_directory
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," из каталога"));
				Результат = Результат + ИмяГенератораОбучения+" = datagen"+ТекстИндекс +"."+ СформироватьТекстПрограммыГенераторИзображенияИзКаталога(СтрокаТЧ.ПутьКФайлу, Строки[0], Объект.РазмерПакета, Объект.Перемешивать)+"
				|";
			Иначе //flow
				Если Строки[0].ИнициализаторГСЧ<>0 Тогда
					ПараметрИнициализаторГСЧ=", seed="+СтрЗаменить(СокрЛП(Строки[0].ИнициализаторГСЧ),Символы.НПП,"");
				Иначе
					ПараметрИнициализаторГСЧ=""
				КонецЕсли;
				Если Строки[0].ЦентрироватьПоПризнакам Или Строки[0].НормализацияПоПризнакам Или Строки[0].ОтбеливаниеZCA Тогда
					НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," заполнить генератор"));
					Результат = Результат + 
					"datagen"+ТекстИндекс+".fit("+СтрокаТЧ.Идентификатор+ПараметрИнициализаторГСЧ+")
					|";
					//Если ТипЗнч(МассивНормализации)=Тип("Массив") Тогда
						Результат = Результат + 
						СтрокаТЧ.Идентификатор+"_mean = datagen"+ТекстИндекс+".mean
						|"+СтрокаТЧ.Идентификатор+"_std = datagen"+ТекстИндекс+".std
						|";
						//СреднееАрифметическое = "datagen"+ТекстИндекс+".mean";
						//СтандартноеОтклонение = "datagen"+ТекстИндекс+".std";
						//ВставлятьПосле=Истина;
						МассивНормализации.Добавить(Новый Структура("Образец, Тип, ИмяСлоя, Среднее, СтандартноеОтклонение", Истина, Перечисления.Нейро_ВидыНормализации.Стандартизация, СтрокаТЧ.ИмяСлоя, СтрокаТЧ.Идентификатор+"_mean", СтрокаТЧ.Идентификатор+"_std"));
					//КонецЕсли;
				КонецЕсли;
				Если Прогноз Тогда
					СтруктураТексты=СформироватьТекстПрограммыГенераторИзображенияИзМассива(СтрокаТЧ, Строки[0], Объект.РазмерПакета, Объект.Перемешивать, Неопределено, Неопределено, "");
				Иначе
					СтруктураТексты=СформироватьТекстПрограммыГенераторИзображенияИзМассива(СтрокаТЧ, Строки[0], Объект.РазмерПакета, Объект.Перемешивать, Неопределено,СтрокаЦели, ПутьКЦели);
				КонецЕсли;
				НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат))," из массива"));
				Результат = Результат + СтруктураТексты.ТекстДоп + ИмяГенератораОбучения+" = datagen"+ТекстИндекс +"."+ СтруктураТексты.Текст +"
				|";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаТЧ.ТипГенератора=Перечисления.Нейро_Генераторы.ВременныхПоследовательностей Тогда
		Строки = ТЧ.НайтиСтроки(Новый Структура("Имя",СтрокаТЧ.ИмяГенератора));
		Если Строки.Количество()=0 Тогда Возврат Результат КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),"Генератор"));
		Размеры = ПолучитьКоэффициентыИтерации(СтрокаТЧ.Идентификатор, ?(Строки[0].Источник = 0,Истина,Ложь), Строки[0].ИндексНачало, Строки[0].ИндексОкончание, Объект.РазмерПакета, Строки[0].РазмерПакета, Неопределено);
		Нормализатор = Неопределено;
		Если ЗначениеЗаполнено(Строки[0].Нормализовать) Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),"Нормализация (генератор)"));
			Нормализатор = СформироватьТекстПрограммы_НормализацияОбразцовГенератор(Объект, СтрокаТЧ, Строки, Размеры, Результат, МассивНормализации, СтруктураНормализации);
		КонецЕсли;
		ИмяГенератораОбучения="train_generator"+ТекстИндекс;
		Если Строки[0].Источник = 0 Тогда
			СтруктураТексты = СформироватьТекстПрограммыГенераторВременныхРядов(СтрокаТЧ.Идентификатор, Строки[0], Размеры, Строки[0].Перемешивать, СтрокаЦели, ПутьКЦели);
			ВидГенератора = " временных рядов";
		ИначеЕсли Строки[0].Источник = 1 Тогда
			СтруктураТексты = СформироватьТекстПрограммыГенераторУчебный(СтрокаТЧ.Идентификатор, Строки[0], Размеры, Строки[0].Перемешивать);
			ВидГенератора = " Учебный";
		КонецЕсли;
		Результат = Результат + СтруктураТексты.ТекстДоп;
		Если СтруктураТексты.Цели<>Неопределено И СтруктураТексты.Цели<>"" И Нормализатор<>Неопределено И Строки[0].НормализоватьЦели Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),"Нормализация"));
			Если Нормализатор.Тип=Перечисления.Нейро_ВидыНормализации.Стандартизация Тогда
				Результат = Результат + СтруктураТексты.Цели+" -= "+Нормализатор.Среднее+"
				|" + СтруктураТексты.Цели+" /= "+Нормализатор.СтандартноеОтклонение+"
				|";
			ИначеЕсли Нормализатор.Тип=Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда
				Результат = Результат + СтруктураТексты.Цели+" = "+Нормализатор.Нормировщик+".transform("+СтруктураТексты.Цели+")
				|";
			КонецЕсли;
		КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),ВидГенератора));
		//Результат = Результат + СтруктураТексты.ТекстДоп + ИмяГенератораОбучения+" = " + СтруктураТексты.Текст + "
		Результат = Результат + ИмяГенератораОбучения+" = " + СтруктураТексты.Текст + "
		|";
		Если (Строки[0].ИндексНачалоПроверка<>0 Или Строки[0].ИндексОкончаниеПроверка<>0) И Не Прогноз И Не Оценка Тогда
			//Размеры = ВычислитьИтерацию(Строки[0].ИндексНачалоПроверка, Строки[0].ИндексОкончаниеПроверка, Объект.ИндексПроверкаНачало, Объект.ИндексПроверкаОкончание, Объект.РазмерПакета, Строки[0].РазмерПакета, Объект.ШаговЗаЭпохуПроверка);
			Размеры = ПолучитьКоэффициентыИтерации(СтрокаТЧ.Идентификатор, ?(Строки[0].Источник = 0,Истина,Ложь), Строки[0].ИндексНачалоПроверка, Строки[0].ИндексОкончаниеПроверка, Объект.РазмерПакета, Строки[0].РазмерПакета, Строки[0].РазмерПакетаПроверка);
			//Если Размеры.Ошибка Тогда ВызватьИсключение(Размеры.Сообщение+" для "+СтрокаТЧ.ИмяГенератора) КонецЕсли;
			//Если Объект.ШаговЗаЭпохуПроверка<>Размеры.ШаговЗаЭпоху Тогда Объект.ШаговЗаЭпохуПроверка=Размеры.ШаговЗаЭпоху КонецЕсли;
			ИмяГенератораПроверки="validation_generator"+ТекстИндекс;
			Если Строки[0].Источник = 0 Тогда
				СтруктураТексты = СформироватьТекстПрограммыГенераторВременныхРядов(СтрокаТЧ.Идентификатор, Строки[0], Размеры, Ложь, СтрокаЦели, ПутьКЦели, Истина);
				ВидГенератора = " временных рядов (проверка)";
			ИначеЕсли Строки[0].Источник = 1 Тогда
				СтруктураТексты = СформироватьТекстПрограммыГенераторУчебный(СтрокаТЧ.Идентификатор, Строки[0], Размеры, Ложь);
				ВидГенератора = " Учебный (проверка)";
			КонецЕсли;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),ВидГенератора));
			//Результат = Результат + СтруктураТексты.ТекстДоп + ИмяГенератораПроверки + " = " + СтруктураТексты.Текст + "
			Результат = Результат + ИмяГенератораПроверки + " = " + СтруктураТексты.Текст + "
			|";
		КонецЕсли;
	ИначеЕсли СтрокаТЧ.ТипГенератора=Перечисления.Нейро_Генераторы.Пользовательский Тогда
		Строки = ТЧ.НайтиСтроки(Новый Структура("Имя",СтрокаТЧ.ИмяГенератора));
		Если Строки.Количество()=0 Тогда Возврат Результат КонецЕсли;
		Размеры = ПолучитьКоэффициентыИтерации(СтрокаТЧ.Идентификатор, Ложь, Строки[0].ИндексНачало, Строки[0].ИндексОкончание, Объект.РазмерПакета, Строки[0].РазмерПакета, Неопределено);
		
		ОтборИмяГенератора = Новый Структура("Имя",СтрокаТЧ.ИмяГенератора);
		СтрокиДоп = Объект.ПользовательскиеГенераторыПараметры.НайтиСтроки(ОтборИмяГенератора);
		ИмяГенератораОбучения="train_generator"+ТекстИндекс;
		СтруктураТексты = СформироватьТекстПрограммыВызовЧастногоГенератора(СтрокаТЧ.Идентификатор, Строки[0], Размеры, Строки[0].Перемешивать, СтрокиДоп, СтрокаЦели, ПутьКЦели,,Прогноз);
		Результат = Результат + СтруктураТексты.ТекстДоп;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),"Генератор "+СтрокаТЧ.ИмяГенератора));
		Результат = Результат + ИмяГенератораОбучения+" = " + СтруктураТексты.Текст + "
		|";
		Если (Строки[0].ИндексНачалоПроверка<>0 Или Строки[0].ИндексОкончаниеПроверка<>0) И Не Прогноз И Не Оценка Тогда
			Размеры = ПолучитьКоэффициентыИтерации(СтрокаТЧ.Идентификатор, Ложь, Строки[0].ИндексНачалоПроверка, Строки[0].ИндексОкончаниеПроверка, Объект.РазмерПакета, Строки[0].РазмерПакета, Строки[0].РазмерПакетаПроверка);
  				    //ПолучитьКоэффициентыИтерации(Идентификатор,          АвтоМаксИдекс, МинИндекс1,            МаксИндекс1,                       РазмерПакетаОбщ,     РазмерПакетаВнутр,      РазмерПакетаВнутрПроверка)
			ИмяГенератораПроверки="validation_generator"+ТекстИндекс;
			СтруктураТексты = СформироватьТекстПрограммыВызовЧастногоГенератора(СтрокаТЧ.Идентификатор, Строки[0], Размеры, Ложь, СтрокиДоп, СтрокаЦели, ПутьКЦели, Истина, Прогноз);
			Результат = Результат + СтруктураТексты.ТекстДоп;
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаТЧ.ИмяСлоя, ЧислоСтрок+?(Результат="",0,СтрЧислоСтрок(Результат)),"Генератор (проверка) "+СтрокаТЧ.ИмяГенератора));
			Результат = Результат + ИмяГенератораПроверки + " = " + СтруктураТексты.Текст + "
			|";
		КонецЕсли;
	КонецЕсли;
	РезультатСтруктура.Вставить("Текст", Результат);
	РезультатСтруктура.Вставить("Идентификатор", ?(ИмяГенератораПроверки="",ИмяГенератораОбучения,ИмяГенератораОбучения+","+ИмяГенератораПроверки));
	//РезультатСтруктура.Вставить("СреднееАрифметическое", СреднееАрифметическое);
	//РезультатСтруктура.Вставить("СтандартноеОтклонение", СтандартноеОтклонение);
	//РезультатСтруктура.Вставить("ВставлятьПосле", ВставлятьПосле);
	Возврат РезультатСтруктура;
КонецФункции

Функция СформироватьТекстПрограммыГенераторИзображенияИзКаталога(ПутьККаталогу, Параметры, РазмерПакета, Перемешивать, Проверочный=Неопределено)
	//flow_from_directory(directory, target_size=(256, 256), color_mode='rgb', classes=None, class_mode='categorical', batch_size=32, shuffle=True, seed=None, 
	//save_to_dir=None, save_prefix='', save_format='png', follow_links=False, subset=None, interpolation='nearest')
	
	//Вы можете передать validation_split аргумент (число от 0 до 1) ImageDataGenerator экземпляру класса, чтобы разделить данные для обучения и проверки:
	//generator = ImagaDataGenerator(..., validation_split=0.3)
	//А затем передайте subsetаргумент, чтобы flow_from_directoryуказать генераторы обучения и проверки:
	//train_gen = generator.flow_from_directory(dir_path, ..., subset='training')
	//val_gen = generator.flow_from_directory(dir_path, ..., subset='validation')	
	
	
	//Результат = 
	//"directory = u'"+СтрЗаменить(ПутьККаталогу,"\","\\")+"'
	//|";
	ПутьЮникод = "u'"+СтрЗаменить(ПутьККаталогу,"\","\\")+"'";
	
	МассивПараметров=Новый Массив;
	
	Если Параметры.РазрешениеШирина>0 Или Параметры.РазрешениеВысота>0 Тогда
		Ширина=СтрЗаменить(СокрЛП(Параметры.РазрешениеШирина), Символы.НПП,"");
		Высота=СтрЗаменить(СокрЛП(Параметры.РазрешениеВысота), Символы.НПП,"");
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","target_size","("+Ширина+","+Высота+")"));
	КонецЕсли;
	
	Если Параметры.Палитра>0 Тогда
		Если Параметры.Палитра=1 Тогда
			Палитра="'rgba'"
		Иначе
			Палитра="'grayscale'"
		КонецЕсли;
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","color_mode",Палитра));
	КонецЕсли;
	
	Если Параметры.Классификация>0 Тогда
		Если Параметры.Классификация=1 Тогда //Бинарная(1)
			Классификация="'binary'"
		ИначеЕсли Параметры.Классификация=2 Тогда //Разброс(2)
			Классификация="'sparse'"
		ИначеЕсли Параметры.Классификация=3 Тогда //Образцы(3)
			Классификация="'input'"
		ИначеЕсли Параметры.Классификация=4 Тогда //Нет(4)
			Классификация="None"
		КонецЕсли;
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","class_mode",Классификация));
	КонецЕсли;
	
	Если Параметры.РазмерПакета=0 Тогда
		Если Не (РазмерПакета=0 Или РазмерПакета=32) Тогда
			МассивПараметров.Добавить(Новый Структура("Ключ, Значение","batch_size",СтрЗаменить(СокрЛП(РазмерПакета), Символы.НПП,"")));
		КонецЕсли;
	Иначе
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","batch_size",СтрЗаменить(СокрЛП(Параметры.РазмерПакета), Символы.НПП,"")));
	КонецЕсли;
	
	Если Не Перемешивать Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","shuffle","False"));
	КонецЕсли;
	
	Если Параметры.ИнициализаторГСЧ>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","seed",СтрЗаменить(СокрЛП(Параметры.ИнициализаторГСЧ), Символы.НПП,"")));
	КонецЕсли;
	
	Если Проверочный<>Неопределено Тогда
		Если НЕ Проверочный И Параметры.КаталогСохранения<>"" Тогда
			МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_to_dir","u'"+СтрЗаменить(Параметры.КаталогСохранения,"\","\\")+"'"));
		ИначеЕсли Проверочный И Параметры.КаталогСохраненияПроверка<>"" Тогда
			МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_to_dir","u'"+СтрЗаменить(Параметры.КаталогСохраненияПроверка,"\","\\")+"'"));
		КонецЕсли;
	ИначеЕсли Параметры.КаталогСохранения<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_to_dir","u'"+СтрЗаменить(Параметры.КаталогСохранения,"\","\\")+"'"));
	КонецЕсли;
	
	Если Параметры.ПрефиксИмениФайла<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_prefix","u'"+Параметры.ПрефиксИмениФайла+"'"));
	КонецЕсли;
	
	Если Параметры.ФорматФайла=1 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_format","'jpeg'"));
	КонецЕсли;
	
	Если Проверочный<>Неопределено Тогда
		Если Проверочный Тогда
			Подмножество="'validation'"   //учебный
		Иначе
			Подмножество="'training'" //проверочный
		КонецЕсли;
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","subset",Подмножество));
	КонецЕсли;
	
	Если Параметры.Интерполяция>0 Тогда
		Если Параметры.Интерполяция=1 Тогда //Билинейная(1)
			Интерполяция="'bilinear'"
		ИначеЕсли Параметры.Интерполяция=2 Тогда //Бикубическая(2)
			Интерполяция="'bicubic'"
		ИначеЕсли Параметры.Интерполяция=3 Тогда //Фильтр Ланцоша(3)
			Интерполяция="'lanczos'"
		ИначеЕсли Параметры.Интерполяция=4 Тогда //box(4)
			Интерполяция="'box'"
		ИначеЕсли Параметры.Интерполяция=5 Тогда //Фильтр Хэмминга(5)
			Интерполяция="'hamming'"
		КонецЕсли;
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","interpolation",Интерполяция));
	КонецЕсли;
	
	СтрокаПараметры="directory="+ПутьЮникод;
	Для Каждого СтруктураПараметра Из МассивПараметров Цикл
		СтрокаПараметры=СтрокаПараметры+", ";
		СтрокаПараметры=СтрокаПараметры+СтруктураПараметра.Ключ+"="+СтруктураПараметра.Значение;
	КонецЦикла;
	
	Возврат 
	"flow_from_directory("+СтрокаПараметры+")";
КонецФункции

Функция СформироватьТекстПрограммыГенераторИзображенияИзМассива(СтрокаТЧ, Параметры, РазмерПакета, Перемешивать, Проверочный=Неопределено, СтрокаЦели=Неопределено, ПутьКЦели="")
	//flow(x, y=None, batch_size=32, shuffle=True, sample_weight=None, seed=None, save_to_dir=None, save_prefix='', save_format='png', subset=None)

	//Вы можете передать validation_split аргумент (число от 0 до 1) ImageDataGenerator экземпляру класса, чтобы разделить данные для обучения и проверки:
	//generator = ImagaDataGenerator(..., validation_split=0.3)
	//А затем передайте subsetаргумент, чтобы flow_from_directory указать генераторы обучения и проверки:
	//train_gen = generator.flow_from_directory(dir_path, ..., subset='training')
	//val_gen = generator.flow_from_directory(dir_path, ..., subset='validation')	
	
	Результат = Новый Структура("Текст, ТекстДоп", "", "");
	
	МассивПараметров=Новый Массив;
	
	Если Параметры.РазмерПакета=0 Тогда
		Если Не (РазмерПакета=0 Или РазмерПакета=32) Тогда
			МассивПараметров.Добавить(Новый Структура("Ключ, Значение","batch_size",СтрЗаменить(СокрЛП(РазмерПакета), Символы.НПП,"")));
		КонецЕсли;
	Иначе
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","batch_size",СтрЗаменить(СокрЛП(Параметры.РазмерПакета), Символы.НПП,"")));
	КонецЕсли;
	
	Если Не Перемешивать Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","shuffle","False"));
	КонецЕсли;
	
	Если Параметры.ИнициализаторГСЧ>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","seed",СтрЗаменить(СокрЛП(Параметры.ИнициализаторГСЧ), Символы.НПП,"")));
	КонецЕсли;
	
	Если Проверочный<>Неопределено Тогда
		Если НЕ Проверочный И Параметры.КаталогСохранения<>"" Тогда
			МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_to_dir","u'"+СтрЗаменить(Параметры.КаталогСохранения,"\","\\")+"'"));
		ИначеЕсли Проверочный И Параметры.КаталогСохраненияПроверка<>"" Тогда
			МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_to_dir","u'"+СтрЗаменить(Параметры.КаталогСохраненияПроверка,"\","\\")+"'"));
		КонецЕсли;
	ИначеЕсли Параметры.КаталогСохранения<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_to_dir","u'"+СтрЗаменить(Параметры.КаталогСохранения,"\","\\")+"'"));
	КонецЕсли;
	
	Если Параметры.ПрефиксИмениФайла<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_prefix","u'"+Параметры.ПрефиксИмениФайла+"'"));
	КонецЕсли;
	
	Если Параметры.ФорматФайла=1 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","save_format","'jpeg'"));
	КонецЕсли;
	
	Если Проверочный<>Неопределено Тогда
		Если Проверочный Тогда
			Подмножество="'validation'"   //учебный
		Иначе
			Подмножество="'training'" //проверочный
		КонецЕсли;
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","subset",Подмножество));
	КонецЕсли;
	
	СтрокаПараметры=СтрокаТЧ.Идентификатор;
	Если СтрокаЦели<>Неопределено Тогда
		Если ТипЗнч(СтрокаЦели)=Тип("Массив") Тогда
			Цели = "";
			Для Каждого СтрокаЦель Из СтрокаЦели Цикл
				Если Цели<>"" Тогда Цели=Цели+", " КонецЕсли;
				Цели=Цели+СтрокаЦель.Идентификатор;
			КонецЦикла;
			Цели = "["+Цели+"]";
		Иначе
			Цели = СтрокаЦели.Идентификатор;
		КонецЕсли;
		//СтрокаПараметры=СтрокаПараметры+", "+СтрокаЦели.Идентификатор;
		СтрокаПараметры=СтрокаПараметры+", "+Цели;
	ИначеЕсли ПутьКЦели<>"" Тогда
		Если Проверочный<>Неопределено И Проверочный Тогда
			//Не загружаем повторно
		Иначе
			numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
			Результат.ТекстДоп=СтрокаТЧ.Идентификатор+"_target = np.load(u'"+СтрЗаменить(ПутьКЦели,"\","\\")+"'"+numpy_allow_pickle+")
			|";
		КонецЕсли;
		СтрокаПараметры=СтрокаПараметры+", "+СтрокаТЧ.Идентификатор+"_target";
	КонецЕсли;
	
	Для Каждого СтруктураПараметра Из МассивПараметров Цикл
		СтрокаПараметры=СтрокаПараметры+", ";
		СтрокаПараметры=СтрокаПараметры+СтруктураПараметра.Ключ+"="+СтруктураПараметра.Значение;
	КонецЦикла;
	
	Результат.Текст="flow("+СтрокаПараметры+")";
	Возврат Результат;
КонецФункции

Функция СформироватьТекстПрограммыВычислитьВременныеРяды(Параметры, ПараметрыГенератора) Экспорт
	ТекстПрограммы=
	"import sys
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+Нейро_ОбщийМодуль.ИдFromKeras("
	|from keras.preprocessing.sequence import TimeseriesGenerator
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	|import os
	|import numpy as np
	|import json
	|");
	
	ТекстТипДанныхО="";
	Если ЗначениеЗаполнено(Параметры.ФайлОбразцов.Тип) Тогда
		ТекстТипДанныхО=", dtype=np."+Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", Параметры.ФайлОбразцов.Тип);
	КонецЕсли;
	Если Параметры.ФайлОбразцов.Разделитель="" Или Параметры.ФайлОбразцов.Разделитель=" " Тогда
		ТекстРазделительО = ""
	Иначе
		ТекстРазделительО = ", delimiter='"+Параметры.ФайлОбразцов.Разделитель+"'";
	КонецЕсли;
	Если Параметры.ФайлОбразцов.ПропуститьСтрок=0 Тогда
		ТекстПропуститьСтрокО = ""
	Иначе
		ТекстПропуститьСтрокО = ", skiprows="+СтрЗаменить(СокрЛП(Параметры.ФайлОбразцов.ПропуститьСтрок), Символы.НПП,"");
	КонецЕсли;
	Если Параметры.ФайлОбразцов.Колонки="" Тогда
		ТекстКолонкиО = ""
	Иначе
		МасКолонки = СтрРазделить(Параметры.ФайлОбразцов.Колонки,",",Ложь);
		СтрокаКолонки = "";
		Для Каждого НомерКолонки Из МасКолонки Цикл
			Если СтрокаКолонки<>"" Тогда СтрокаКолонки=СтрокаКолонки+", " КонецЕсли;
			СтрокаКолонки=СтрокаКолонки+СокрЛП(НомерКолонки);
		КонецЦикла;
		Если МасКолонки.Количество()>1 Тогда
			ТекстКолонкиО = ", usecols = ("+СтрокаКолонки+")";
		Иначе
			ТекстКолонкиО = ", usecols = "+СтрокаКолонки;
		КонецЕсли;
	КонецЕсли;
	
	ТекстТипДанныхЦ="";
	Если ЗначениеЗаполнено(Параметры.ФайлЦелей.Тип) Тогда
		ТекстТипДанныхЦ=", dtype=np."+Нейро_ОбщийМодуль.ПолучитьКомментарийИзЗначенияПеречисления("Нейро_ТипыNumPy", Параметры.ФайлЦелей.Тип);
	КонецЕсли;
	Если Параметры.ФайлЦелей.Разделитель="" Или Параметры.ФайлЦелей.Разделитель=" " Тогда
		ТекстРазделительЦ = ""
	Иначе
		ТекстРазделительЦ = ", delimiter='"+Параметры.ФайлЦелей.Разделитель+"'";
	КонецЕсли;
	Если Параметры.ФайлЦелей.ПропуститьСтрок=0 Тогда
		ТекстПропуститьСтрокЦ = ""
	Иначе
		ТекстПропуститьСтрокЦ = ", skiprows="+СтрЗаменить(СокрЛП(Параметры.ФайлЦелей.ПропуститьСтрок), Символы.НПП,"");
	КонецЕсли;
	Если Параметры.ФайлЦелей.Колонки="" Тогда
		ТекстКолонкиЦ = ""
	Иначе
		МасКолонки = СтрРазделить(Параметры.ФайлЦелей.Колонки,",",Ложь);
		СтрокаКолонки = "";
		Для Каждого НомерКолонки Из МасКолонки Цикл
			Если СтрокаКолонки<>"" Тогда СтрокаКолонки=СтрокаКолонки+", " КонецЕсли;
			СтрокаКолонки=СтрокаКолонки+СокрЛП(НомерКолонки);
		КонецЦикла;
		Если МасКолонки.Количество()>1 Тогда
			ТекстКолонкиЦ = ", usecols = ("+СтрокаКолонки+")";
		Иначе
			ТекстКолонкиЦ = ", usecols = "+СтрокаКолонки;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Источник=0 Тогда //Текст(0)
		ТекстПрограммы=ТекстПрограммы+
		"samples = np.loadtxt(u'"+СтрЗаменить(Параметры.ФайлОбразцов.ПутьКФайлу,"\","\\")+"'"+ТекстТипДанныхО+ТекстРазделительО+ТекстПропуститьСтрокО+ТекстКолонкиО+")
		|";
		Если Параметры.ФайлЦелей.ПутьКФайлу = Параметры.ФайлОбразцов.ПутьКФайлу Тогда
			ТекстПрограммы=ТекстПрограммы+
			"targets = samples
			|";
		Иначе
			ТекстПрограммы=ТекстПрограммы+
			"targets = np.loadtxt(u'"+СтрЗаменить(Параметры.ФайлЦелей.ПутьКФайлу,"\","\\")+"'"+ТекстТипДанныхЦ+ТекстРазделительЦ+ТекстПропуститьСтрокЦ+ТекстКолонкиЦ+")
			|";
		КонецЕсли;
	Иначе // Файл(1)
		ФайлО = Новый Файл(Параметры.ФайлОбразцов.ПутьКФайлу);
		Если ФайлО.Расширение=".npy" Тогда
			numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
			ТекстПрограммы=ТекстПрограммы+
			"samples = np.load(u'"+СтрЗаменить(Параметры.ФайлОбразцов.ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
			|";
		Иначе
			ТекстПрограммы=ТекстПрограммы+
			"samples = np.loadtxt(u'"+СтрЗаменить(Параметры.ФайлОбразцов.ПутьКФайлу,"\","\\")+"'"+ТекстТипДанныхО+ТекстРазделительО+ТекстПропуститьСтрокО+ТекстКолонкиО+")
			|";
		КонецЕсли;
		Если Параметры.ФайлЦелей.ПутьКФайлу = Параметры.ФайлОбразцов.ПутьКФайлу Тогда
			ТекстПрограммы=ТекстПрограммы+
			"targets = samples
			|";
		Иначе
			ФайлЦ = Новый Файл(Параметры.ФайлЦелей.ПутьКФайлу);
			Если ФайлЦ.Расширение=".npy" Тогда
				numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
				ТекстПрограммы=ТекстПрограммы+
				"targets = np.load(u'"+СтрЗаменить(Параметры.ФайлЦелей.ПутьКФайлу,"\","\\")+"'"+numpy_allow_pickle+")
				|";
			Иначе
				ТекстПрограммы=ТекстПрограммы+
				"targets = np.loadtxt(u'"+СтрЗаменить(Параметры.ФайлЦелей.ПутьКФайлу,"\","\\")+"'"+ТекстТипДанныхЦ+ТекстРазделительЦ+ТекстПропуститьСтрокЦ+ТекстКолонкиЦ+")
				|";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстДлинаПоследовательности = ", length = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.ДлинаПоследовательности), Символы.НПП,"");
	Если ПараметрыГенератора.ЧастотаВыборки>1 Тогда
		ТекстЧастотаВыборки = ", sampling_rate = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.ЧастотаВыборки), Символы.НПП,"");
	Иначе
		ТекстЧастотаВыборки = ""
	КонецЕсли;
	Если ПараметрыГенератора.РазмерШага>1 Тогда
		ТекстРазмерШага = ", stride = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.РазмерШага), Символы.НПП,"");
	Иначе
		ТекстРазмерШага = ""
	КонецЕсли;
	Если ПараметрыГенератора.ИндексНачало>0 Тогда
		ТекстИндексНачало = ", start_index = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.ИндексНачало), Символы.НПП,"");
	Иначе
		ТекстИндексНачало = ""
	КонецЕсли;
	Если ПараметрыГенератора.ИндексОкончание>0 Тогда
		ТекстИндексОкончание = ", end_index = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.ИндексОкончание), Символы.НПП,"");
	Иначе
		ТекстИндексОкончание = ""
	КонецЕсли;
	Если ПараметрыГенератора.Перемешивать Тогда
		ТекстПеремешивать = ", shuffle = True";
	Иначе
		ТекстПеремешивать = ""
	КонецЕсли;
	Если ПараметрыГенератора.Обратить Тогда
		ТекстОбратить = ", reverse = True";
	Иначе
		ТекстОбратить = ""
	КонецЕсли;
	Если ПараметрыГенератора.РазмерПакета<>128 Тогда
		Если ПараметрыГенератора.РазмерПакета=0 Тогда
			ТекстРазмерПакета = ", batch_size = 1";
		Иначе
			ТекстРазмерПакета = ", batch_size = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.РазмерПакета), Символы.НПП,"");
		КонецЕсли;
	Иначе
		ТекстРазмерПакета = ""
	КонецЕсли;

	ТекстПрограммы=ТекстПрограммы+
	"data_gen = TimeseriesGenerator(samples, targets"+ТекстДлинаПоследовательности+ТекстЧастотаВыборки+ТекстРазмерШага+ТекстИндексНачало+ТекстИндексОкончание+ТекстПеремешивать+ТекстОбратить+ТекстРазмерПакета+")
	|batches = {}
	|for i in range(len(data_gen)):
	|    batch = data_gen[i]
	//|    batches[u'Пакет_'+str(i)]=batch[1].tolist()
	|    batches[u'Пакет_'+str(i)]={'samples':batch[0].tolist(),'targets':batch[1].tolist()}
	|with open(u'"+СтрЗаменить(Параметры.ФайлРезультатов,"\","\\")+"', 'w', encoding='utf-8') as file:
	|    json.dump(batches, file)
	|";
	
	Возврат ТекстПрограммы
КонецФункции

Функция СформироватьТекстПрограммыNumpy2Txt(Параметры, Разделитель, ТипДанных) Экспорт
	numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
	ТекстПрограммы=
	"import sys
	//|import keras
	//|from keras.preprocessing.sequence import TimeseriesGenerator
	|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
	|sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
	//|import os
	|import numpy as np
	//|import json
	|srcarray = np.load(u'"+СтрЗаменить(Параметры.ФайлИсточник,"\","\\")+"'"+numpy_allow_pickle+")
	|";
	
	Тип=Нейро_ОбщийМодуль.НайтиПеречислениеПоТекстуСинонима("Нейро_ТипыNumPy", ТипДанных);
	Формат=Нейро_ОбщийМодуль.ПолучитьКороткийФорматNumpyПоТипу(Тип);
	
	ТекстПрограммы=ТекстПрограммы+
	"np.savetxt(u'"+СтрЗаменить(Параметры.ФайлРезультатов,"\","\\")+"', srcarray"+?(Формат="","",", fmt='"+Формат+"'")+", delimiter='"+?(Разделитель="", ",", Разделитель)+"')";
	
	Возврат ТекстПрограммы
КонецФункции

Функция СформироватьТекстПрограммыГенераторВременныхРядов(Идентификатор, ПараметрыГенератора, Размеры, Перемешивать, СтрокаЦели=Неопределено, ПутьКЦели="", Проверочный=Ложь)
	//Результат = Новый Структура("Текст, ТекстДоп", "", "");
	Результат = Новый Структура("Текст, ТекстДоп, Цели", "", "");
	
	МассивПараметров=Новый Массив;
	
	ТекстДлинаПоследовательности = ", length = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.ДлинаПоследовательности), Символы.НПП,"");
	Если ПараметрыГенератора.ЧастотаВыборки>1 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","sampling_rate",СтрЗаменить(СокрЛП(ПараметрыГенератора.ЧастотаВыборки), Символы.НПП,"")));
	КонецЕсли;
	Если ПараметрыГенератора.РазмерШага>1 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","stride",СтрЗаменить(СокрЛП(ПараметрыГенератора.РазмерШага), Символы.НПП,"")));
	КонецЕсли;
	
	Если Размеры.МинИндекс<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","start_index",Размеры.МинИндекс));
	КонецЕсли;
	Если Размеры.МаксИндекс<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","end_index",Размеры.МаксИндекс));
	КонецЕсли;
	Если Перемешивать Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","shuffle","True"));
	КонецЕсли;
	Если ПараметрыГенератора.Обратить Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","reverse","True"));
	КонецЕсли;
	Если Размеры.РазмерПакета<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","batch_size",Размеры.РазмерПакета));
	КонецЕсли;
	
	СтрокаПараметры="";
	Для Каждого СтруктураПараметра Из МассивПараметров Цикл
		Если СтрокаПараметры<>"" Тогда СтрокаПараметры=СтрокаПараметры+", " КонецЕсли;
		СтрокаПараметры=СтрокаПараметры+СтруктураПараметра.Ключ+"="+СтруктураПараметра.Значение;
	КонецЦикла;
	
	Если СтрокаЦели=Неопределено И ПутьКЦели="" Тогда
		Цели = Идентификатор;
	ИначеЕсли ПутьКЦели<>"" Тогда
		Если Проверочный<>Неопределено И Проверочный Тогда
			//Не загружаем повторно
		Иначе
			numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
			Результат.ТекстДоп=Идентификатор+"_target = np.load(u'"+СтрЗаменить(ПутьКЦели,"\","\\")+"'"+numpy_allow_pickle+")
			|";
		КонецЕсли;
		Цели = Идентификатор+"_target";
	ИначеЕсли СтрокаЦели<>Неопределено Тогда
		Если ТипЗнч(СтрокаЦели)=Тип("Массив") Тогда
			Цели = "";
			Для Каждого СтрокаЦель Из СтрокаЦели Цикл
				Если Цели<>"" Тогда Цели=Цели+", " КонецЕсли;
				Цели=Цели+СтрокаЦель.Идентификатор;
			КонецЦикла;
			Цели = "["+Цели+"]";
		Иначе
			Цели = СтрокаЦели.Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Цели=Цели;
	
	Результат.Текст = "TimeseriesGenerator("+Идентификатор+", "+Цели+ТекстДлинаПоследовательности+?(СтрокаПараметры<>"",",","")+СтрокаПараметры+")";
	Возврат Результат;
КонецФункции

Функция СформироватьТекстПрограммыГенераторУчебный(Идентификатор, ПараметрыГенератора, Размеры, Перемешивать)
	Результат = Новый Структура("Текст, ТекстДоп, Цели", "", "");
	
	МассивПараметров=Новый Массив;
	
	//ТекстДлинаПоследовательности = ", length = "+СтрЗаменить(СокрЛП(ПараметрыГенератора.ДлинаПоследовательности), Символы.НПП,"");
	
	МассивПараметров.Добавить(Новый Структура("Ключ, Значение","lookback",СтрЗаменить(СокрЛП(ПараметрыГенератора.ИнтерваловНазад), Символы.НПП,"")));
	МассивПараметров.Добавить(Новый Структура("Ключ, Значение","delay",СтрЗаменить(СокрЛП(ПараметрыГенератора.ИнтерваловВперед), Символы.НПП,"")));
	Если Размеры.МинИндекс<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","min_index",Размеры.МинИндекс));
	КонецЕсли;
	МассивПараметров.Добавить(Новый Структура("Ключ, Значение","max_index",Размеры.МаксИндекс));
	Если Перемешивать Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","shuffle","True"));
	КонецЕсли;
	Если Размеры.РазмерПакета<>"" Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","batch_size",Размеры.РазмерПакета));
	КонецЕсли;
	Если ПараметрыГенератора.РазмерШага>1 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","step",СтрЗаменить(СокрЛП(ПараметрыГенератора.РазмерШага), Символы.НПП,"")));
	КонецЕсли;
	
	Если ПараметрыГенератора.КолонкаЦели>0 Тогда
		МассивПараметров.Добавить(Новый Структура("Ключ, Значение","tidx",СтрЗаменить(СокрЛП(ПараметрыГенератора.КолонкаЦели), Символы.НПП,"")));
	КонецЕсли;
	
	СтрокаПараметры="";
	Для Каждого СтруктураПараметра Из МассивПараметров Цикл
		Если СтрокаПараметры<>"" Тогда СтрокаПараметры=СтрокаПараметры+", " КонецЕсли;
		СтрокаПараметры=СтрокаПараметры+СтруктураПараметра.Ключ+"="+СтруктураПараметра.Значение;
	КонецЦикла;
	
	Результат.Текст = "regression_generator("+Идентификатор+?(СтрокаПараметры<>"",",","")+СтрокаПараметры+")";
	Возврат Результат;
КонецФункции


Функция ПолучитьКоэффициентыИтерации(Идентификатор, АвтоМаксИдекс, МинИндекс1, МаксИндекс1, РазмерПакетаОбщ, РазмерПакетаВнутр, РазмерПакетаВнутрПроверка)
	Результат = Новый Структура("МинИндекс, МаксИндекс, РазмерПакета");
	Результат.МинИндекс = ?(МинИндекс1=0,"",СтрЗаменить(СокрЛП(МинИндекс1), Символы.НПП, ""));
	Если МаксИндекс1=0 Тогда
		Если АвтоМаксИдекс Тогда
			Результат.МаксИндекс = "len("+Идентификатор+")-1"
			//Результат.МаксИндекс = "len("+Идентификатор+")"
		Иначе
			Результат.МаксИндекс = "None"
		КонецЕсли;
	Иначе
		Результат.МаксИндекс = СтрЗаменить(СокрЛП(МаксИндекс1), Символы.НПП, "");
	КонецЕсли;
	
	Если РазмерПакетаВнутр=0 Тогда
		РазмерПакета = ?(РазмерПакетаОбщ=0,128,РазмерПакетаОбщ);
	Иначе
		РазмерПакета = РазмерПакетаВнутр;
	КонецЕсли;
	
	Если РазмерПакетаВнутрПроверка<>Неопределено Тогда
		РазмерПакета = ?(РазмерПакетаВнутрПроверка=0,РазмерПакета,РазмерПакетаВнутрПроверка);
	КонецЕсли;
	
	Результат.РазмерПакета = ?(РазмерПакета=128,"",СтрЗаменить(СокрЛП(РазмерПакета), Символы.НПП, ""));
	
	//Если ШаговЗаЭпоху=0 Тогда
	//	Если МаксИндекс1=0 Тогда
	//		Если НЕ АвтоМаксИдекс Тогда
	//			//Результат.МаксИндекс = "None"
	//			Результат.Ошибка = Истина
	//			Результат = Новый Структура("Ошибка, Сообщение", Истина, "Не удалось вычислить количество шагов за эпоху");
	//			Возврат Результат;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Результат.ШаговЗаЭпоху = "("+Результат.МаксИндекс+"-"+Результат.МинИндекс+")/"+Результат.РазмерПакета;
	//Иначе
	//	Результат.ШаговЗаЭпоху = СтрЗаменить(СокрЛП(ШаговЗаЭпоху), Символы.НПП, "");
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция Импорт_Scikit_learn(Объект)
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.Нормализовать = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда 
			Возврат Истина 
		ИначеЕсли Объект.ИспользоватьГенератор И ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) И СтрокаОбразцы.ИмяГенератора<>"" Тогда
			Если СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.ВременныхПоследовательностей Тогда
				Строки = Объект.ВременныеПоследовательности.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
				Если Строки.Количество()>0 И Строки[0].Нормализовать = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда 
					Возврат Истина 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.Нормализовать = Перечисления.Нейро_ВидыНормализации.Масштабирование Тогда Возврат Истина КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь
КонецФункции

//def load_layers_weights(layers, layer_names):
//    for layer in layers:
//        for layer2 in layer_names:
//            if (layer.name == layer2['Name']):
//                if(layer2['Path'] != ''):
//                    print(layer2['Path'])
//                    layer.load_weights(layer2['Path'],by_name=True)
//                if hasattr(layer, 'layers'):
//                    load_layers_weights(layer.layers, layer2['Childs'])
//                break

//model = keras.models.model_from_json(loaded_json)

//with open(u'C:\\T\\News_CP\\Слои.json', "r") as read_file:
//    layers_with_paths = json.load(read_file)

//load_layers_weights(model.layers, layers_with_paths)

Функция СформироватьТекстПрограммыСписокФайлов(Параметры) Экспорт
	Если Нейро_ОбщийМодуль.ПолучитьНастройку("ИспользоватьВстроенныйKeras") Тогда
		ТекстПрограммы =
		"import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|"+Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|";
	Иначе
		ТекстПрограммы =
		Нейро_ОбщийМодуль.ИдИмпортKeras()+"
		|import sys
		|sys.stderr = open(u'"+СтрЗаменить(Параметры.ФайлОшибок,"\","\\")+"', 'w')
		|";
	КонецЕсли;
	
	//Если ОтображениеВыполнения<1 Тогда
		ТекстПрограммы=ТекстПрограммы+
		"sys.stdout = open(u'"+СтрЗаменить(Параметры.ФайлСообщений,"\","\\")+"', 'w')
		|";
	//КонецЕсли;
	ТекстПрограммы=ТекстПрограммы+Нейро_ОбщийМодуль.ИдFromKeras(
	"import os
	|");

	ТекстПрограммы=ТекстПрограммы+
	"filedest = open(u'"+СтрЗаменить(Параметры.ФайлРезультатов,"\","\\")+"','w')
	|def collect_texts(path_dir):
	|    for fname in os.listdir(path_dir):
	|        fpathname = os.path.join(path_dir, fname)
	|        if os.path.isdir(fpathname):
	|            collect_texts(fpathname)
	|            continue
	|        filedest.write(fpathname+'\n')
	|collect_texts(u'"+СтрЗаменить(Параметры.ПутьККаталогу,"\","\\")+"')
	|filedest.close()
	|";
	
	Возврат ТекстПрограммы
КонецФункции

Функция СформироватьТекстПрограммы_ПользовательскиеГенераторы(Объект, ТекстПрограммы, НомераСтрок, БезЦелей = Ложь)
	Результат = Новый Структура("Ошибка, Текст", Ложь, "");
	
	МассивГенераторов=Новый Массив; МассивИменГенераторов=Новый Массив; МассивИменФункций=Новый Массив;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.ТипГенератора = Перечисления.Нейро_Генераторы.Пользовательский И СокрЛП(СтрокаОбразцы.ИмяГенератора)<>"" Тогда
			Строки = Объект.ПользовательскиеГенераторы.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
			Если Строки.Количество()>0 Тогда
				Если МассивГенераторов.Найти(Строки[0].Генератор)=Неопределено Тогда
					МассивГенераторов.Добавить(Строки[0].Генератор);
					МассивИменГенераторов.Добавить(СтрокаОбразцы.ИмяГенератора);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 0 По МассивГенераторов.Количество()-1 Цикл
		ГенераторСсылка = МассивГенераторов[Сч];
		Если ГенераторСсылка.Вид = Перечисления.Нейро_ВидыПользовательскогоГенератора.Общий Тогда Продолжить; КонецЕсли;
		Если ГенераторСсылка.ИмяГенератора="" Тогда 
			Результат.Ошибка = Истина;
			Результат.Текст  = 
			"Отсутствует имя в генератора в справочнике: "+СокрЛП(ГенераторСсылка)+" ("+СокрЛП(ГенераторСсылка.Код)+")
			|Пользовательский генератор: "+МассивИменГенераторов[Сч];
			Возврат Результат
		КонецЕсли;
		ИмяФункции = Нейро_СозданиеМоделиНаСервере.Транслит(ГенераторСсылка.ИмяГенератора);
		МассивИменФункций.Добавить(ИмяФункции);
		СтрокаПараметры="";
		Для Каждого Параметр Из ГенераторСсылка.Параметры Цикл
			Если СтрокаПараметры<>"" Тогда СтрокаПараметры=СтрокаПараметры+", " КонецЕсли;
			СтрокаПараметры=СтрокаПараметры+Нейро_СозданиеМоделиНаСервере.Транслит(Параметр.Имя);
		КонецЦикла;
		МассивСтрок = СтрРазделить(ГенераторСсылка.ТекстПрограммы, Символы.ПС);
		Если МассивСтрок.Количество()=0 Или (МассивСтрок.Количество()=1 И СокрЛП(МассивСтрок[0])="") Тогда
			Результат.Ошибка = Истина;
			Результат.Текст  = 
			"Отсутствует текст программы тела генератора в справочнике: "+СокрЛП(ГенераторСсылка)+" ("+СокрЛП(ГенераторСсылка.Код)+")
			|Пользовательский генератор: "+МассивИменГенераторов[Сч];
			Возврат Результат
		КонецЕсли;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Функция", СтрЧислоСтрок(ТекстПрограммы), "Генератор "+ГенераторСсылка.ИмяГенератора));
		ТекстПрограммы=ТекстПрограммы+
		"def "+ИмяФункции+"("+СтрокаПараметры+"):
		|";
		Для Каждого ТекстоваяСтрока Из МассивСтрок Цикл
			ТекстПрограммы=ТекстПрограммы+"    "+ТекстоваяСтрока+"
			|";
		КонецЦикла;
	КонецЦикла;
	
	СтруктураМассивов = Новый Структура("МассивГенераторов, МассивИменГенераторов, МассивИменФункций", МассивГенераторов, МассивИменГенераторов, МассивИменФункций);
	Результат.Вставить("Массивы", СтруктураМассивов);
	
	Возврат Результат
КонецФункции

// Генератор
Функция СформироватьТекстПрограммы_ПользовательскийГенераторОбщий(Объект, ТекстПрограммы, НомераСтрок, МассивЭтоГенератор, БезЦелей = Ложь)
	Если Объект.ПользовательскийГенератор.Вид <> Перечисления.Нейро_ВидыПользовательскогоГенератора.Общий Тогда
		Возврат Ложь
	КонецЕсли;
	
	Если Объект.ПользовательскийГенератор.Импорт.Количество()>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Секция импорт", СтрЧислоСтрок(ТекстПрограммы), "Генератор общий"));
	КонецЕсли;
	Для Каждого СтрокаИмпорт Из Объект.ПользовательскийГенератор.Импорт Цикл
		ТекстПрограммы=ТекстПрограммы+СтрокаИмпорт.Идентификатор+"
		|";
	КонецЦикла;
	
	//Формирование заголовка
	СтрокаПараметры="";
	Для Каждого Параметр Из Объект.ПользовательскийГенератор.Параметры Цикл
		Если СтрокаПараметры<>"" Тогда СтрокаПараметры=СтрокаПараметры+", " КонецЕсли;
		ПоУмолчанию="";
		//Если Параметр.Имя="shuffle" Тогда
		//	ПоУмолчанию="=False";
		//ИначеЕсли Параметр.Имя="batch_size" Тогда
		//	ПоУмолчанию="=32";
		//ИначеЕсли Параметр.Имя="subset" Тогда
		//	ПоУмолчанию="='training'";
		//КонецЕсли;
		СтрокаПараметры=СтрокаПараметры+Параметр.Имя+ПоУмолчанию;
		//Параметр
	КонецЦикла;
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Функция", СтрЧислоСтрок(ТекстПрограммы), "Генератор общий"));
	ТекстПрограммы=ТекстПрограммы+
	"def generator("+СтрокаПараметры+"):
	|";
	Строки = СтрРазделить(Объект.ПользовательскийГенератор.ТекстПрограммы, Символы.ПС);
	Результат = "";
	Для Сч=1 По СтрЧислоСтрок(Объект.ПользовательскийГенератор.ТекстПрограммы) Цикл
		Результат=Результат+"    "+СтрПолучитьСтроку(Объект.ПользовательскийГенератор.ТекстПрограммы,Сч)+"
		|";
	КонецЦикла;
	ТекстПрограммы=ТекстПрограммы+Результат+"
	|";
	
	Возврат Истина
КонецФункции

// Переменные с именами для общего генератора
Функция СформироватьТекстПрограммы_ВызовОбщегоГенератора(Объект, ТекстПрограммы, НомераСтрок, ТолькоТренировочный=Ложь)
	Если Объект.ВидГенератора = 1 Тогда
		Возврат Истина
	ИначеЕсли Объект.ВидГенератора = 2 Тогда
		Возврат СформироватьТекстПрограммы_ВызовОбщегоПользовательскогоГенератора(Объект, ТекстПрограммы, НомераСтрок)
	КонецЕсли;
	
	//Общий генератор(ы)
	ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексНачало),Символы.НПП,"");
	//ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	Если Объект.ИндексОкончание=0 Тогда
		ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпоху)),Символы.НПП,"");
	Иначе
		ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	КонецЕсли;
	РазмерПакета    = ?(Объект.РазмерПакета=0,"",", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,""));
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор тренировочный"));
	ТекстПрограммы=ТекстПрограммы+
	"train_gen = generator("+ИндексНачало+","+ИндексОкончание+?(Объект.Перемешивать,", shuffle=True","")+РазмерПакета+")
	|";
	
	Если ТолькоТренировочный Тогда Возврат Истина КонецЕсли;
	
	Если Объект.ИндексПроверкаОкончание>0 Тогда
		ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало),Символы.НПП,"");
		ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаОкончание),Символы.НПП,"");
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор проверочный"));
		ТекстПрограммы=ТекстПрограммы+
		"val_gen = generator("+ИндексНачало+","+ИндексОкончание+РазмерПакета+", subset='validation')
		|";
	ИначеЕсли Объект.ШаговЗаЭпохуПроверка>0 Тогда
		ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало),Символы.НПП,"");
		ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпохуПроверка)),Символы.НПП,"");
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор проверочный"));
		ТекстПрограммы=ТекстПрограммы+
		"val_gen = generator("+ИндексНачало+","+ИндексОкончание+РазмерПакета+", subset='validation')
		|";
	КонецЕсли;
	
	Возврат Истина
КонецФункции

// Переменные с именами для общего пользовательского генератора
Функция СформироватьТекстПрограммы_ВызовОбщегоПользовательскогоГенератора(Объект, ТекстПрограммы, НомераСтрок)
    //def generator(min_index, max_index, shuffle=False, batch_size=32, subset'training', nInputs, nOutputs, parametr1, zfk2):
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("min_index");
	СтруктураПараметров.Вставить("max_index");
	СтруктураПараметров.Вставить("shuffle");
	СтруктураПараметров.Вставить("batch_size");
	СтруктураПараметров.Вставить("subset");
	СтруктураПараметров.Вставить("nInputs");
	СтруктураПараметров.Вставить("nOutputs");
		
	//Общий генератор(ы)
	ИндексНачало = СтрЗаменить(СокрЛП(Объект.ИндексНачало),Символы.НПП,"");
	Если Объект.ИндексОкончание=0 Тогда
		ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпоху)),Символы.НПП,"");
	Иначе
		ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексОкончание),Символы.НПП,"");
	КонецЕсли;
	//РазмерПакета    = ?(Объект.РазмерПакета=0,"",", batch_size="+СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,""));
	СтруктураПараметров.min_index = ИндексНачало; СтруктураПараметров.max_index=ИндексОкончание;
	СтруктураПараметров.batch_size = ?(Объект.РазмерПакета=0,"32",СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,""));
	СтруктураПараметров.shuffle = ?(Объект.Перемешивать,"True","False");
	СтруктураПараметров.subset = "'training'";
	СтруктураПараметров.nInputs = СтрЗаменить(СокрЛП(Объект.Образцы.Количество()),Символы.НПП,"");
	СтруктураПараметров.nOutputs = СтрЗаменить(СокрЛП(Объект.Цели.Количество()),Символы.НПП,"");
	ТекстПараметры = "";
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Если ТекстПараметры<>"" Тогда ТекстПараметры = ТекстПараметры + ", " КонецЕсли;
		ТекстПараметры=ТекстПараметры+КлючИЗначение.Значение
	КонецЦикла;
	
	МассивДопПараметры = Новый Массив;
	Для Каждого ДопПараметр Из Объект.ПараметрыОбщегоПользовательскогоГенератора Цикл
		Если ДопПараметр.Тип=Перечисления.Нейро_Типы.Массив Или ДопПараметр.Тип=Перечисления.Нейро_Типы.Функция Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Параметр генератора"));
			ПеременнаяПараметр = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстПоТипуЗначения("gen_par_"+ДопПараметр.Параметр, ДопПараметр.Значение);
			ТекстПрограммы=ТекстПрограммы+ПеременнаяПараметр+"
			|";
			МассивДопПараметры.Добавить("gen_par_"+ДопПараметр.Параметр);
		Иначе
			МассивДопПараметры.Добавить(Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ДопПараметр.Тип, ДопПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДопПараметр Из МассивДопПараметры Цикл
		Если ТекстПараметры<>"" Тогда ТекстПараметры = ТекстПараметры + ", " КонецЕсли;
		ТекстПараметры=ТекстПараметры+ДопПараметр
	КонецЦикла;
	
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор тренировочный"));
	
	ТекстПрограммы=ТекстПрограммы+
	"train_gen = generator("+ТекстПараметры+")
	|";
	
	Если Объект.ИндексПроверкаОкончание>0 Или Объект.ШаговЗаЭпохуПроверка>0 Тогда
		ИндексНачало    = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало),Символы.НПП,"");
		Если Объект.ИндексПроверкаОкончание>0 Или Объект.ШаговЗаЭпохуПроверка>0 Тогда
			ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаОкончание),Символы.НПП,"");
		ИначеЕсли Объект.ШаговЗаЭпохуПроверка>0 Тогда
			ИндексОкончание = СтрЗаменить(СокрЛП(Объект.ИндексПроверкаНачало+(?(Объект.РазмерПакета=0,32,Объект.РазмерПакета)*Объект.ШаговЗаЭпохуПроверка)),Символы.НПП,"");
		КонецЕсли;
		СтруктураПараметров.min_index = ИндексНачало; СтруктураПараметров.max_index=ИндексОкончание;
		//СтруктураПараметров.batch_size = ?(Объект.РазмерПакета=0,"32",СтрЗаменить(СокрЛП(Объект.РазмерПакета),Символы.НПП,""));
		СтруктураПараметров.shuffle = "False";
		СтруктураПараметров.subset = "'validation'";
		СтруктураПараметров.nInputs = СтрЗаменить(СокрЛП(Объект.Образцы.Количество()),Символы.НПП,"");
		СтруктураПараметров.nOutputs = СтрЗаменить(СокрЛП(Объект.Цели.Количество()),Символы.НПП,"");
		ТекстПараметры = "";
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			Если ТекстПараметры<>"" Тогда ТекстПараметры = ТекстПараметры + ", " КонецЕсли;
			ТекстПараметры=ТекстПараметры+КлючИЗначение.Значение
		КонецЦикла;
		Для Каждого ДопПараметр Из МассивДопПараметры Цикл
			Если ТекстПараметры<>"" Тогда ТекстПараметры = ТекстПараметры + ", " КонецЕсли;
			ТекстПараметры=ТекстПараметры+ДопПараметр
		КонецЦикла;
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор проверочный"));
		ТекстПрограммы=ТекстПрограммы+
		"val_gen = generator("+ТекстПараметры+")
		|";
	КонецЕсли;	
	
	Возврат Истина
КонецФункции

// Пользовательский частный генератор
Функция СформироватьТекстПрограммыВызовЧастногоГенератора(Идентификатор, ПараметрыГенератора, Размеры, Перемешивать, ДопПараметры, СтрокаЦели=Неопределено, ПутьКЦели="", Проверочный=Ложь, БезЦелей = Ложь)
	Результат = Новый Структура("Текст, ТекстДоп, Цели", "", "");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("samples");
	СтруктураПараметров.Вставить("targets");
	СтруктураПараметров.Вставить("min_index");
	СтруктураПараметров.Вставить("max_index");
	СтруктураПараметров.Вставить("shuffle");
	СтруктураПараметров.Вставить("batch_size");
	СтруктураПараметров.Вставить("subset");
	
	Если БезЦелей Тогда
		Цели = "None"
	Иначе
		Если СтрокаЦели=Неопределено И ПутьКЦели="" Тогда
			Цели = Идентификатор;
		ИначеЕсли ПутьКЦели<>"" Тогда
			Если Не Проверочный Тогда
				numpy_allow_pickle=?(Нейро_ОбщийМодуль.ПолучитьНастройку("numpy_allow_pickle"),", allow_pickle=True","");
				Результат.ТекстДоп=Идентификатор+"_target = np.load(u'"+СтрЗаменить(ПутьКЦели,"\","\\")+"'"+numpy_allow_pickle+")
				|";
			КонецЕсли;
			Цели = Идентификатор+"_target";
		ИначеЕсли СтрокаЦели<>Неопределено Тогда
			Если ТипЗнч(СтрокаЦели)=Тип("Массив") Тогда
				Цели = "";
				Для Каждого СтрокаЦель Из СтрокаЦели Цикл
					Если Цели<>"" Тогда Цели=Цели+", " КонецЕсли;
					Цели=Цели+СтрокаЦель.Идентификатор;
				КонецЦикла;
				Цели = "["+Цели+"]";
			Иначе
				Цели = СтрокаЦели.Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Цели=Цели;
	
	СтруктураПараметров.samples = Идентификатор; СтруктураПараметров.targets=Цели;
	СтруктураПараметров.min_index = ?(Размеры.МинИндекс="","0",Размеры.МинИндекс);
	СтруктураПараметров.max_index=?(Размеры.МаксИндекс="","0",Размеры.МаксИндекс);
	СтруктураПараметров.shuffle = ?(Перемешивать,"True","False");
	СтруктураПараметров.batch_size = ?(Размеры.РазмерПакета="","0",Размеры.РазмерПакета);
	Если Проверочный Тогда
		СтруктураПараметров.subset = "'validation'";
	Иначе
		СтруктураПараметров.subset = "'training'";
	КонецЕсли;
	ТекстПараметры = "";
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Если ТекстПараметры<>"" Тогда ТекстПараметры = ТекстПараметры + ", " КонецЕсли;
		ТекстПараметры=ТекстПараметры+КлючИЗначение.Значение
	КонецЦикла;
	
	МассивДопПараметры = Новый Массив;
	Для Каждого ДопПараметр Из ДопПараметры Цикл
		Если ДопПараметр.Тип=Перечисления.Нейро_Типы.Массив Или ДопПараметр.Тип=Перечисления.Нейро_Типы.Функция Тогда
			//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Параметр генератора"));
			Если Не Проверочный Тогда
				ПеременнаяПараметр = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстПоТипуЗначения(Идентификатор+"_"+ПараметрыГенератора.Генератор.ИмяГенератора+"_"+ДопПараметр.Идентификатор, ДопПараметр.Значение);
				Результат.ТекстДоп=Результат.ТекстДоп+ПеременнаяПараметр+"
				|";
			КонецЕсли;
			МассивДопПараметры.Добавить(Идентификатор+"_"+ПараметрыГенератора.Генератор.ИмяГенератора+"_"+ДопПараметр.Идентификатор);
		Иначе
			МассивДопПараметры.Добавить(Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("",ДопПараметр.Тип, ДопПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДопПараметр Из МассивДопПараметры Цикл
		Если ТекстПараметры<>"" Тогда ТекстПараметры = ТекстПараметры + ", " КонецЕсли;
		ТекстПараметры=ТекстПараметры+ДопПараметр
	КонецЦикла;
	
	Результат.Текст = ПараметрыГенератора.Генератор.ИмяГенератора+"("+ТекстПараметры+")";
	
	Возврат Результат;
КонецФункции

// Переменные с именами для общего генератора
Функция СформироватьТекстПрограммы_ВызовПрямогоГенератора(Объект, ТекстПрограммы, НомераСтрок)
	Результат = Новый Структура("Ошибка, Текст", Ложь, "");
	
	СчВходов=0; ВсеГенераторы=Истина; Тренировочные = Новый Массив; Проверочные = Новый Массив;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		Если Не ЗначениеЗаполнено(СтрокаОбразцы.ТипГенератора) Тогда
			Результат.Текст = Результат.Текст +"Слой: " + СтрокаОбразцы.ИмяСлоя+". Не выбран тип генератора!
			|";
			ВсеГенераторы=Ложь;
		ИначеЕсли СокрЛП(СтрокаОбразцы.ИмяГенератора)="" Тогда
			Результат.Текст = Результат.Текст +"Слой: " + СтрокаОбразцы.ИмяСлоя+"; тип: "+СокрЛП(СтрокаОбразцы.ТипГенератора)+". Не выбран генератор!
			|";
			ВсеГенераторы=Ложь;
		Иначе
			Строки = Объект.ПользовательскиеГенераторы.НайтиСтроки(Новый Структура("Имя",СтрокаОбразцы.ИмяГенератора));
			Если Строки.Количество()=0 Тогда 
				Результат.Текст = Результат.Текст +"Слой: " + СтрокаОбразцы.ИмяСлоя+"; тип: "+СокрЛП(СтрокаОбразцы.ТипГенератора)+". Неверное имя генератора: "+СтрокаОбразцы.ИмяГенератора+"
				|";
				ВсеГенераторы=Ложь;
			КонецЕсли;
		КонецЕсли;
		Генераторы = СтрРазделить(СтрокаОбразцы.Идентификатор,",",Ложь);
		Тренировочные.Добавить(Генераторы[0]);
		Если Генераторы.Количество()>1 Тогда
			Проверочные.Добавить(Генераторы[1])
		КонецЕсли;
	КонецЦикла;
	Если Не ВсеГенераторы Тогда
		Результат.Ошибка=Истина; Возврат Результат
	КонецЕсли;
	
	ТекстТренировочные="";
	Для Сч=0 По Тренировочные.Количество()-1 Цикл
		Если ТекстТренировочные<>"" Тогда ТекстТренировочные=ТекстТренировочные+", " КонецЕсли;
		ТекстТренировочные=ТекстТренировочные+Тренировочные[Сч];
	КонецЦикла;
	Если Тренировочные.Количество()>1 Тогда ТекстТренировочные="["+ТекстТренировочные+"]" КонецЕсли;
	
	ТекстПроверочные="";
	Для Сч=0 По Проверочные.Количество()-1 Цикл
		Если ТекстПроверочные<>"" Тогда ТекстПроверочные=ТекстПроверочные+", " КонецЕсли;
		ТекстПроверочные=ТекстПроверочные+Проверочные[Сч];
	КонецЦикла;
	Если Проверочные.Количество()>1 Тогда ТекстПроверочные="["+ТекстПроверочные+"]" КонецЕсли;
	
	НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор тренировочный"));
	ТекстПрограммы=ТекстПрограммы+
	"train_gen = "+ТекстТренировочные+"
	|";
	
	Если Проверочные.Количество()>0 Тогда 
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Объявить", СтрЧислоСтрок(ТекстПрограммы), "Генератор проверочный"));
		ТекстПрограммы=ТекстПрограммы+
		"val_gen = "+ТекстПроверочные+"
		|";
		ТекстПроверочные="["+ТекстПроверочные+"]" 
	КонецЕсли;
	
	Возврат Результат
КонецФункции

Функция СформироватьТекстПрограммыСпискиАлгоритмов(Объект, ТекстПрограммы, НомераСтрок, Параметры, Прогноз = Ложь)
	ТабАлгоритмы = Новый ТаблицаЗначений;
	ТабАлгоритмы.Колонки.Добавить("Алгоритм");
	
	Если Объект.ВидГенератора=2 Тогда //Пользовательский
		Для Каждого СтрокаАлгоритм Из Объект.ПользовательскийГенератор.Алгоритмы  Цикл
			НоваяСтрока = ТабАлгоритмы.Добавить();
			НоваяСтрока.Алгоритм = СтрокаАлгоритм.Алгоритм;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		//СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		Если СтрокаОбразцы.Преобразования<>"" Тогда
			Отбор = Новый Структура("ИмяСписка", СтрокаОбразцы.Преобразования);
			Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
			Для Каждого Строка Из Строки Цикл
				НоваяСтрока = ТабАлгоритмы.Добавить();
				НоваяСтрока.Алгоритм = Строка.Алгоритм;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаОбразцы.ТипГенератора=Перечисления.Нейро_Генераторы.Пользовательский И СтрокаОбразцы.ИмяГенератора<>"" Тогда
			ОтборИмяГенератора = Новый Структура("Имя", СтрокаОбразцы.ИмяГенератора);
			Строки = Объект.ПользовательскиеГенераторы.НайтиСтроки(ОтборИмяГенератора);
			//СтрокиДоп = Объект.ПользовательскиеГенераторыПараметры.НайтиСтроки(ОтборИмяГенератора);
			Если Строки.Количество()>0 Тогда
				Для Каждого СтрокаАлгоритм Из Строки[0].Генератор.Алгоритмы Цикл
					НоваяСтрока = ТабАлгоритмы.Добавить();
					НоваяСтрока.Алгоритм = СтрокаАлгоритм.Алгоритм;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		//СчВыходов=СчВыходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВыходов),Символы.НПП,"");
		Если СтрокаЦели.Преобразования<>"" Тогда
			Отбор = Новый Структура("ИмяСписка", СтрокаЦели.Преобразования);
			Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
			Для Каждого Строка Из Строки Цикл
				НоваяСтрока = ТабАлгоритмы.Добавить();
				НоваяСтрока.Алгоритм = Строка.Алгоритм;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Прогноз И Объект.СписокПрогноза<>"" Тогда
		Отбор = Новый Структура("ИмяСписка", Объект.СписокПрогноза);
		Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
		Для Каждого Строка Из Строки Цикл
			НоваяСтрока = ТабАлгоритмы.Добавить();
			НоваяСтрока.Алгоритм = Строка.Алгоритм;
		КонецЦикла;
	КонецЕсли;
	
	ТабАлгоритмы.Свернуть("Алгоритм");
	
	ТабИмпорт = Новый ТаблицаЗначений;
	ТабИмпорт.Колонки.Добавить("Идентификатор");
	Если Объект.ВидГенератора=2 Тогда //Пользовательский
		Для Каждого СтрокаИмпорт Из Объект.ПользовательскийГенератор.Импорт  Цикл
			НоваяСтрока = ТабИмпорт.Добавить();
			НоваяСтрока.Идентификатор = СтрокаИмпорт.Идентификатор;
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтрокаАлгоритм Из ТабАлгоритмы Цикл
		Для Каждого СтрокаИмпорт Из СтрокаАлгоритм.Алгоритм.Импорт Цикл
			НоваяСтрока = ТабИмпорт.Добавить();
			НоваяСтрока.Идентификатор = СтрокаИмпорт.Идентификатор;
		КонецЦикла;
	КонецЦикла;

	ТабИмпорт.Свернуть("Идентификатор");
	
	Если ТабИмпорт.Количество()>0 Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Импорт", СтрЧислоСтрок(ТекстПрограммы),"Алгоритмы"));
	КонецЕсли;
	Для Каждого СтрокаИмпорт Из ТабИмпорт Цикл
		ТекстПрограммы=ТекстПрограммы+СтрокаИмпорт.Идентификатор+"
		|";
	КонецЦикла;
	
	Для Каждого СтрокаАлгоритм Из ТабАлгоритмы Цикл
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Алгоритм", СтрЧислоСтрок(ТекстПрограммы),СтрокаАлгоритм.Алгоритм.Наименование));
		ТекстПрограммы=ТекстПрограммы+СтрокаАлгоритм.Алгоритм.ТекстПрограммы+"
		|";
	КонецЦикла;
КонецФункции

Процедура ДобавитьВМассивИмпорта(СтрокиИмпорт, СтрокаИмпорт)
	//Если СтрокиИмпорт.Найти(СтрокаИмпорт)<>Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Поз = СтрНайти(СтрокаИмпорт,"import ");
	//Если Поз=0 Тогда
	//	Возврат;
	//КонецЕсли;
	//ИменаИПсевдонимы = ПолучитьИменаКлассовИмпорта(СтрокиИмпорт);
	//СтрокаИмен = Прав(СтрокаИмпорт,СтрДлина(СтрокаИмпорт)-(Поз+СтрДлина("import ")));
	//МассивИмен = СтрРазделить(СтрокаИмен,",",Ложь);
	//Для Каждого СтрокаИмяИПсевдоним Из МассивИмен Цикл
	//	ИмяИПсевдоним = СтрРазделить(СтрокаИмяИПсевдоним," as ",Истина);
	//	Если ИмяИПсевдоним.Количество()=1 Тогда
	//		//НоваяСтрока.Имя       = ИмяИПсевдоним[0];
	//		//НоваяСтрока.Псевдоним = "";
	//	Иначе
	//		//НоваяСтрока.Имя       = ИмяИПсевдоним[0];
	//		//НоваяСтрока.Псевдоним = ИмяИПсевдоним[1];
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

Функция ПолучитьИменаКлассовИмпорта(СтрокиИмпорт)
	//Результат = Новый ТаблицаЗначений;
	//Результат.Колонки.Добавить("Имя");
	//Результат.Колонки.Добавить("Псевдоним");
	//Для Каждого СтрокаИмпорт Из СтрокиИмпорт Цикл
	//	Поз = СтрНайти(СтрокаИмпорт,"import ");
	//	Если Поз=0 Тогда Продолжить КонецЕсли;
	//	СтрокаИмен = Прав(СтрокаИмпорт,СтрДлина(СтрокаИмпорт)-(Поз+СтрДлина("import ")));
	//	МассивИмен = СтрРазделить(СтрокаИмен,",",Ложь);
	//	Для Каждого СтрокаИмяИПсевдоним Из МассивИмен Цикл
	//		ИмяИПсевдоним = СтрРазделить(СтрокаИмяИПсевдоним," as ",Истина);
	//		НоваяСтрока = Результат.Добавить();
	//		Если ИмяИПсевдоним.Количество()=1 Тогда
	//			НоваяСтрока.Имя       = ИмяИПсевдоним[0];
	//			НоваяСтрока.Псевдоним = "";
	//		Иначе
	//			НоваяСтрока.Имя       = ИмяИПсевдоним[0];
	//			НоваяСтрока.Псевдоним = ИмяИПсевдоним[1];
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	//Возврат Результат
КонецФункции

// Применение списка алгоритмов к образцам
Функция СформироватьТекстПрограммы_ПреобразованиеОбразцов(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор=Неопределено)
	СчВходов=0;
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Образец", СтрЧислоСтрок(ТекстПрограммы),СтрокаОбразцы.ИмяСлоя));
		СчВходов=СчВходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВходов),Символы.НПП,"");
		
		Если СтрокаОбразцы.Преобразования<>"" Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаОбразцы.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Преобразования"));
			Отбор = Новый Структура("ИмяСписка", СтрокаОбразцы.Преобразования);
			Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
			Для Каждого Строка Из Строки Цикл
				//Строка.Алгоритм.Идентификатор  Строка.Присваивать  СтрокаОбразцы.Идентификатор
				Отбор = Новый Структура("ИмяСписка, Номер", СтрокаОбразцы.Преобразования, Строка.Номер);
				СтрокиПараметров = Объект.ПараметрыАлгоритмов.НайтиСтроки(Отбор);
				ТзПараметры = Объект.ПараметрыАлгоритмов.Выгрузить(СтрокиПараметров);
				ТзПараметры.Сортировать("НомерПараметра");
				ТекстПараметры = ""; ИменоватьПараметры=Ложь;
				Для Каждого СтрокаПараметр Из ТзПараметры Цикл
					Если ТекстПараметры<>"" Тогда ТекстПараметры=ТекстПараметры+", " КонецЕсли;
					Если СтрокаПараметр.Тип=Перечисления.Нейро_Типы.Слой Тогда
						ЗначениеПараметра = ПолучитьИдентификаторСлоя(Объект, СтрокаПараметр.Значение);
						Если ЗначениеПараметра=Неопределено Тогда ЗначениеПараметра="None" КонецЕсли;
					ИначеЕсли СтрокаПараметр.Тип=Перечисления.Нейро_Типы.Неопределено Или СтрокаПараметр.Значение=Неопределено Тогда
						ЗначениеПараметра="None"; ИменоватьПараметры=Истина;
					Иначе
						ЗначениеПараметра = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", СтрокаПараметр.Тип, СтрокаПараметр.Значение);
					КонецЕсли;
					ТекстПараметры=ТекстПараметры+?(ИменоватьПараметры=Истина,СтрокаПараметр.Идентификатор+"=","")+ЗначениеПараметра;
				КонецЦикла;
				ТекстПрограммы = ТекстПрограммы + ?(Строка.Присваивать,СтрокаОбразцы.Идентификатор+" = ","")+Строка.Алгоритм.Идентификатор+"("+ТекстПараметры+")
				|";
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Применение списка алгоритмов к целям
Функция СформироватьТекстПрограммы_ПреобразованиеЦелей(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор=Неопределено)
	
	СчВыходов=0;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		//НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "*Цель", СтрЧислоСтрок(ТекстПрограммы),СтрокаЦели.ИмяСлоя));
		СчВыходов=СчВыходов+1; ТекстСч = СтрЗаменить(СокрЛП(СчВыходов),Символы.НПП,"");
		
		Если СтрокаЦели.Преобразования<>"" Тогда
			НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", СтрокаЦели.ИмяСлоя, СтрЧислоСтрок(ТекстПрограммы),"Преобразования"));
			Отбор = Новый Структура("ИмяСписка", СтрокаЦели.Преобразования);
			Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
			Для Каждого Строка Из Строки Цикл
				//Строка.Алгоритм.Идентификатор  Строка.Присваивать  СтрокаОбразцы.Идентификатор
				Отбор = Новый Структура("ИмяСписка, Номер", СтрокаЦели.Преобразования, Строка.Номер);
				СтрокиПараметров = Объект.ПараметрыАлгоритмов.НайтиСтроки(Отбор);
				ТзПараметры = Объект.ПараметрыАлгоритмов.Выгрузить(СтрокиПараметров);
				ТзПараметры.Сортировать("НомерПараметра");
				ТекстПараметры = ""; ИменоватьПараметры=Ложь;
				Для Каждого СтрокаПараметр Из ТзПараметры Цикл
					Если ТекстПараметры<>"" Тогда ТекстПараметры=ТекстПараметры+", " КонецЕсли;
					Если СтрокаПараметр.Тип=Перечисления.Нейро_Типы.Слой Тогда
						ЗначениеПараметра = ПолучитьИдентификаторСлоя(Объект, СтрокаПараметр.Значение);
						Если ЗначениеПараметра=Неопределено Тогда ЗначениеПараметра="None" КонецЕсли;
					ИначеЕсли СтрокаПараметр.Тип=Перечисления.Нейро_Типы.Неопределено Или СтрокаПараметр.Значение=Неопределено Тогда
						ЗначениеПараметра="None"; ИменоватьПараметры=Истина;
					Иначе
						ЗначениеПараметра = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", СтрокаПараметр.Тип, СтрокаПараметр.Значение);
					КонецЕсли;
					ТекстПараметры=ТекстПараметры+?(ИменоватьПараметры=Истина,СтрокаПараметр.Идентификатор+"=","")+ЗначениеПараметра;
				КонецЦикла;
				ТекстПрограммы = ТекстПрограммы + ?(Строка.Присваивать,СтрокаЦели.Идентификатор+" = ","")+Строка.Алгоритм.Идентификатор+"("+ТекстПараметры+")
				|";
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции


// Применение списка алгоритмов к результатам прогноза
Функция СформироватьТекстПрограммы_ПреобразованиеРезультатовПрогноза(Объект, ТекстПрограммы, НомераСтрок, Параметры, МасСловариПутьКСловарю, МасСловариИд, МассивЭтоГенератор=Неопределено)
	Если Объект.СписокПрогноза<>"" Тогда
		НомераСтрок.Добавить(Новый Структура("Имя, Номер, Доп", "Результат прогноза", СтрЧислоСтрок(ТекстПрограммы),"Преобразования"));
		Отбор = Новый Структура("ИмяСписка", Объект.СписокПрогноза);
		Строки = Объект.Алгоритмы.НайтиСтроки(Отбор);
		Для Каждого Строка Из Строки Цикл
			//Строка.Алгоритм.Идентификатор  Строка.Присваивать  СтрокаОбразцы.Идентификатор
			Отбор = Новый Структура("ИмяСписка, Номер", Объект.СписокПрогноза, Строка.Номер);
			СтрокиПараметров = Объект.ПараметрыАлгоритмов.НайтиСтроки(Отбор);
			ТзПараметры = Объект.ПараметрыАлгоритмов.Выгрузить(СтрокиПараметров);
			ТзПараметры.Сортировать("НомерПараметра");
			ТекстПараметры = ""; ИменоватьПараметры=Ложь;
			Для Каждого СтрокаПараметр Из ТзПараметры Цикл
				Если ТекстПараметры<>"" Тогда ТекстПараметры=ТекстПараметры+", " КонецЕсли;
				Если СтрокаПараметр.Тип=Перечисления.Нейро_Типы.Слой Тогда
					Если НРег(СтрокаПараметр.Значение)="result" Тогда
						ЗначениеПараметра = СтрокаПараметр.Значение
					Иначе
						ЗначениеПараметра = ПолучитьИдентификаторСлоя(Объект, СтрокаПараметр.Значение);
						Если ЗначениеПараметра=Неопределено Тогда ЗначениеПараметра="None" КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаПараметр.Тип=Перечисления.Нейро_Типы.Неопределено Или СтрокаПараметр.Значение=Неопределено Тогда
					ЗначениеПараметра="None"; ИменоватьПараметры=Истина;
				Иначе
					ЗначениеПараметра = Нейро_ОбщийМодуль.СформироватьПрограммныйТекстИзЗначения("", СтрокаПараметр.Тип, СтрокаПараметр.Значение);
				КонецЕсли;
				ТекстПараметры=ТекстПараметры+?(ИменоватьПараметры=Истина,СтрокаПараметр.Идентификатор+"=","")+ЗначениеПараметра;
			КонецЦикла;
			ТекстПрограммы = ТекстПрограммы + ?(Строка.Присваивать,"result = ","")+Строка.Алгоритм.Идентификатор+"("+ТекстПараметры+")
			|";
		КонецЦикла;
	КонецЕсли;
		
	Возврат Истина;
КонецФункции

Функция ПолучитьИдентификаторСлоя(Объект, ИмяСлоя)
	Для Каждого СтрокаОбразцы Из Объект.Образцы Цикл
		Если СтрокаОбразцы.ИмяСлоя = ИмяСлоя Тогда Возврат СтрокаОбразцы.Идентификатор КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаЦели Из Объект.Цели Цикл
		Если СтрокаЦели.ИмяСлоя = ИмяСлоя Тогда Возврат СтрокаЦели.Идентификатор КонецЕсли;
	КонецЦикла;
	Возврат Неопределено
КонецФункции
