#Область ПолучитьКаталогНейроконструктора

Процедура ПолучитьКаталогНейроконструктора(Форма) Экспорт
	Оп = Новый ОписаниеОповещения("ПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, Форма);
	НачатьПолучениеКаталогаВременныхФайлов(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	КаталогНейроКонструктора = Новый Файл(ИмяКаталогаВременныхФайлов+"NeuroConstr\");
	ДП = Новый Структура;
	ДП.Вставить("Форма", ДополнительныеПараметры);
	ДП.Вставить("КаталогНК", ИмяКаталогаВременныхФайлов+"NeuroConstr\");
	Оп = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект, ДП);
	КаталогНейроКонструктора.НачатьПроверкуСуществования(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	ИмяКаталогаНК = ДопПараметры.КаталогНК;
	Если Существует Тогда
		ДопПараметры.Форма.ПутьКДанным=ИмяКаталогаНК;
	Иначе
		ОпКаталогНК = Новый ОписаниеОповещения("СоздатьКаталогНКЗавершение", ЭтотОбъект, ДопПараметры.Форма);
		НачатьСозданиеКаталога(ОпКаталогНК, ИмяКаталогаНК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогНКЗавершение(ИмяКаталога, Форма) Экспорт
	Форма.ПутьКДанным=ИмяКаталога;
КонецПроцедуры

#КонецОбласти

#Область ПолучитьКаталогПоИмени

&НаКлиенте
Процедура НачатьПроверкуСуществованияКаталога(ОписаниеОповещенияДалее) Экспорт
	//Доп=Новый Структура("Имя, Приемник", "NPY", ПутьККаталогуОбучения);
	
	Форма = ОписаниеОповещенияДалее.Модуль;
	КаталогОбучения = Новый Файл(Форма.ПутьКДанным+ОписаниеОповещенияДалее.ДополнительныеПараметры.Имя);
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Путь", Форма.ПутьКДанным+ОписаниеОповещенияДалее.ДополнительныеПараметры.Имя);
	ДопПараметры.Вставить("Оповещение", ОписаниеОповещенияДалее);
	Оп = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИменованногоКаталога", ЭтотОбъект, ДопПараметры);
	КаталогОбучения.НачатьПроверкуСуществования(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИменованногоКаталога(Существует, ДопПараметры) Экспорт
	Если Существует Тогда
		ПослеСозданияКаталогаМодели(ДопПараметры.Путь, ДопПараметры.Оповещение)
	Иначе
		ОпКаталогНК = Новый ОписаниеОповещения("ПослеСозданияКаталогаМодели", ЭтотОбъект, ДопПараметры.Оповещение);
		НачатьСозданиеКаталога(ОпКаталогНК, ДопПараметры.Путь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталогаМодели(ИмяКаталога, ОписаниеОповещения) Экспорт
	Форма = ОписаниеОповещения.Модуль;
	Приемник = ОписаниеОповещения.ДополнительныеПараметры.Приемник;
	Форма[Приемник]=ИмяКаталога+"\";
	//Форма.ПутьККаталогуОбучения=ИмяКаталога+"\";
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИмяКаталога);
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьПрограммуНаПитоне

Процедура ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстДок, ПараметрыВыполнения) Экспорт
	Оп = Новый ОписаниеОповещения("ОкончаниеЗаписиФайлаПрограммы", ЭтотОбъект, ПараметрыВыполнения);
	ТекстДок.НачатьЗапись(Оп, ПараметрыВыполнения.КаталогВыполнения+ПараметрыВыполнения.ФайлПрограммы, КодировкаТекста.UTF8);
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеЗаписиФайлаПрограммы(Результат, ДопПараметры) Экспорт
	Если Результат Тогда
		СтрокаКоманды="python "+ДопПараметры.ФайлПрограммы;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияКодаПитон", ЭтотОбъект, ДопПараметры);
		НачатьЗапускПриложения(ОписаниеОповещения, СтрокаКоманды, ДопПараметры.КаталогВыполнения, Истина)
	Иначе
		Сообщить("Не удалось записать файл: "+ДопПараметры.КаталогВыполнения+ДопПараметры.ФайлПрограммы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияКодаПитон(КодВозврата, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Оповещение.Модуль;
	ТекущийКаталог = ДополнительныеПараметры.КаталогВыполнения;
	Если Прав(ТекущийКаталог,1)<>"\" Тогда ТекущийКаталог=ТекущийКаталог+"\" КонецЕсли;
	Форма.ОшибкиПитон.Очистить();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЧтенияФайлаОшибок", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ОшибкиПитон.НачатьЧтение(ОписаниеОповещения, ТекущийКаталог+ДополнительныеПараметры.ФайлОшибок, КодировкаТекста.Системная);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияФайлаОшибок(ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Оповещение.Модуль;
	ТекущийКаталог = ДополнительныеПараметры.КаталогВыполнения;
	Если Прав(ТекущийКаталог,1)<>"\" Тогда ТекущийКаталог=ТекущийКаталог+"\" КонецЕсли;
	Если Форма.ОшибкиПитон.КоличествоСтрок()=0 Тогда 
		//Модифицированность = Истина; 
		Форма.СообщенияПитон.Очистить();
		Если ДополнительныеПараметры.ФайлСообщений=Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.КаталогВыполнения);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЧтенияФайлаСообщений", ЭтотОбъект, ДополнительныеПараметры);
			Форма.СообщенияПитон.НачатьЧтение(ОписаниеОповещения, ТекущийКаталог+ДополнительныеПараметры.ФайлСообщений, КодировкаТекста.UTF8);
		КонецЕсли;
		Если НЕ ДополнительныеПараметры.Свойство("НеУдалятьФайлы") Тогда
			НачатьУдалениеФайлов(Новый ОписаниеОповещения, ТекущийКаталог, ДополнительныеПараметры.ФайлПрограммы);
			НачатьУдалениеФайлов(Новый ОписаниеОповещения, ТекущийКаталог, ДополнительныеПараметры.ФайлОшибок);
		КонецЕсли;
		Возврат 
	КонецЕсли;
	МассивОшибок=Новый Массив; НомераСтрок = Новый Массив;
	МассивИсключений=Нейро_ОбщийМодуль.МассивОсновныхИсключенийПитон();
	ОшибкаВПрограмме=Ложь;
	Для Сч = 1 По Форма.ОшибкиПитон.КоличествоСтрок() Цикл
		Текст = Форма.ОшибкиПитон.ПолучитьСтроку(Сч);
		Позиция = СтрНайти(Текст, "File "+Символ(34)+ДополнительныеПараметры.ФайлПрограммы+Символ(34));
		Если Позиция>0 Тогда
			НомерСтроки=Неопределено;
			Позиция2 = СтрНайти(Текст, ", line ");
			ТекстНомер="";
			Если Позиция2>0 Тогда
				Для Сч2=Позиция2+СтрДлина(", line ") По СтрДлина(Текст) Цикл
					СледСимвол=Сред(Текст,Сч2,1);
					Если КодСимвола(СледСимвол)<КодСимвола("0") Или КодСимвола(СледСимвол)>КодСимвола("9") Тогда Прервать КонецЕсли;
					ТекстНомер=ТекстНомер+СледСимвол;
				КонецЦикла;
				Если ТекстНомер<>"" Тогда
					Попытка
						НомерСтроки=Число(ТекстНомер);
					Исключение
						
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			НомераСтрок.Добавить(НомерСтроки);
		КонецЕсли;
		Позиция = СтрНайти(Текст, ":");
		Если Позиция>0 Тогда
			ИндексО = МассивИсключений.Найти(Лев(Текст,Позиция-1));
			Если ИндексО<>Неопределено Тогда МассивОшибок.Добавить(Текст); КонецЕсли;
		КонецЕсли;
		Сообщить(Текст);
	КонецЦикла;
	Если МассивОшибок.Количество()=0 И НомераСтрок.Количество()=0 Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.КаталогВыполнения);
	ИначеЕсли ДополнительныеПараметры.Свойство("ОповещениеОбОшибке") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОбОшибке, Новый Структура("Ошибки, НомераСтрок",МассивОшибок,НомераСтрок));
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.Свойство("НеУдалятьФайлы") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, ТекущийКаталог, ДополнительныеПараметры.ФайлОшибок);
		Если ДополнительныеПараметры.ФайлСообщений<>Неопределено Тогда
			НачатьУдалениеФайлов(Новый ОписаниеОповещения, ТекущийКаталог, ДополнительныеПараметры.ФайлСообщений);
		КонецЕсли;
	КонецЕсли;
	//SyntaxError: NameError: 
	//ValueError и TypeError – ошибка значения и ошибка типа.
	//ZeroDivisionError:
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтенияФайлаСообщений(ДополнительныеПараметры) Экспорт
	//Форма = ДополнительныеПараметры.Оповещение.Модуль;
	//Если Форма.СообщенияПитон.КоличествоСтрок()>0 Тогда 
	//	Сообщить(Форма.СообщенияПитон.ПолучитьТекст());
	//КонецЕсли;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.КаталогВыполнения);
	Если НЕ ДополнительныеПараметры.Свойство("НеУдалятьФайлы") Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, ДополнительныеПараметры.КаталогВыполнения, ДополнительныеПараметры.ФайлСообщений);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЧтениеNPY

&Наклиенте
Процедура ПолучитьИнформациюИзФайлаNPY(ПутьКФайлу, Оповещение) Экспорт
    //создадим фаловый поток
	ОповещениеОткрытия = Новый ОписаниеОповещения("ПослеОткрытияФайловогоПотокаNPY", ЭтотОбъект, Оповещение);
    ФайловыеПотоки.НачатьОткрытиеДляЧтения(ОповещениеОткрытия, ПутьКФайлу);
КонецПроцедуры

&Наклиенте
Процедура ПослеОткрытияФайловогоПотокаNPY(Поток, ДополнительныеПараметры) Экспорт
	//Если Поток.Размер()<6 Тогда Возврат КонецЕсли;
	
    //создадим необходимый объект для чтения данных из потока
    ЧтениеДанных = Новый ЧтениеДанных(Поток, КодировкаТекста.ANSI, ПорядокБайтов.LittleEndian);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЧтениеДанных", ЧтениеДанных);
	Параметры.Вставить("Оповещение", ДополнительныеПараметры);
    //считаем первые восемь байт в буфер
	//Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(8);
	Оповещение = Новый ОписаниеОповещения("ПослеЧтенияСигнатурыNPY", ЭтотОбъект, Параметры);
	ЧтениеДанных.НачатьЧтениеВБуферДвоичныхДанных(Оповещение, 6);
КонецПроцедуры

&Наклиенте
Процедура ПослеЧтенияСигнатурыNPY(Буфер, ДополнительныеПараметры) Экспорт
	Если Буфер.Получить(0)=147 И Буфер.Получить(1)=КодСимвола("N") И Буфер.Получить(2)=КодСимвола("U") И Буфер.Получить(3)=КодСимвола("M") И
		 Буфер.Получить(4)=КодСимвола("P") И Буфер.Получить(5)=КодСимвола("Y") Тогда
		 Оповещение = Новый ОписаниеОповещения("ПослеЧтенияВерсииNPY", ЭтотОбъект, ДополнительныеПараметры);
		 ДополнительныеПараметры.ЧтениеДанных.НачатьЧтениеЦелого16(Оповещение, ПорядокБайтов.LittleEndian);
	КонецЕсли;
КонецПроцедуры

&Наклиенте
Процедура ПослеЧтенияВерсииNPY(Буфер, ДополнительныеПараметры) Экспорт
	Версия = Буфер;
	Оповещение = Новый ОписаниеОповещения("ПослеЧтенияРазмераЗаголовкаNPY", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.ЧтениеДанных.НачатьЧтениеЦелого16(Оповещение, ПорядокБайтов.LittleEndian);
КонецПроцедуры

&Наклиенте
Процедура ПослеЧтенияРазмераЗаголовкаNPY(Буфер, ДополнительныеПараметры) Экспорт
	РазмерЗаголовка = Буфер;
	Оповещение = Новый ОписаниеОповещения("ПослеЧтенияЗаголовкаNPY", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.ЧтениеДанных.НачатьЧтениеСимволов(Оповещение, РазмерЗаголовка, КодировкаТекста.ANSI);
КонецПроцедуры

&Наклиенте
Процедура ПослеЧтенияЗаголовкаNPY(Результат, ДополнительныеПараметры) Экспорт
	ТипФорма=Новый Структура("Описание, Форма");
	Режим=0;
	Для Сч=1 по СтрДлина(Результат) Цикл
		Если Сред(Результат, Сч, 1)="{" Тогда Режим=1; Продолжить КонецЕсли;
	КонецЦикла;
	СтрПоиска = "'descr': '";
	Поз = СтрНайти(Результат,СтрПоиска);
	Если Поз>0 Тогда
		СтрОписание="";
		Для Сч=Поз+СтрДлина(СтрПоиска) По СтрДлина(Результат) Цикл
			Если Сред(Результат, Сч, 1)="'" Тогда Прервать КонецЕсли;
			СтрОписание=СтрОписание+Сред(Результат, Сч, 1);
		КонецЦикла;
		ТипФорма.Описание = СтрОписание;
	КонецЕсли;
	СтрПоиска = " 'shape': (";
	Поз = СтрНайти(Результат,СтрПоиска);
	Если Поз>0 Тогда
		СтрОписание="";
		Для Сч=Поз+СтрДлина(СтрПоиска) По СтрДлина(Результат) Цикл
			Если Сред(Результат, Сч, 1)=")" Тогда Прервать КонецЕсли;
			СтрОписание=СтрОписание+Сред(Результат, Сч, 1);
		КонецЦикла;
		ТипФорма.Форма = "("+СтрОписание+")";
	КонецЕсли;
	
	СтруктураВозврат = Новый Структура;
	//СтруктураВозврат.Вставить("Идентификатор", ДополнительныеПараметры.Оповещение.ДополнительныеПараметры);
	СтруктураВозврат.Вставить("Заголовок", Результат);
	СтруктураВозврат.Вставить("Descr", ТипФорма.Описание);
	СтруктураВозврат.Вставить("Тип", Нейро_ОбщийМодуль.СтрокаТипаИзDescrNPY(ТипФорма.Описание));
	СтруктураВозврат.Вставить("Форма", ТипФорма.Форма);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, СтруктураВозврат);
	//Оповещение = Новый ОписаниеОповещения("ПослеЧтенияРазмераЗаголовкаNPY", ЭтотОбъект, Параметры);
	//ДополнительныеПараметры.ЧтениеДанных.ЧтениеДанных.НачатьЧтениеЦелого16(Оповещение, ПорядокБайтов.LittleEndian);
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПути

Процедура ПроверитьСуществованиеПути(Путь, ОписаниеОповещенияДалее, ЭтоКаталог=Ложь) Экспорт
	Путь = Новый Файл(Путь);
	Оп = Новый ОписаниеОповещения("ПродолжитьПроверкуПути", ЭтотОбъект, ОписаниеОповещенияДалее);
	Если ЭтоКаталог Тогда
		Путь.НачатьПроверкуЭтоКаталог(Оп);
	Иначе
		Путь.НачатьПроверкуЭтоФайл(Оп);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПроверкуПути(ВерныйТипПути, ДополнительныеПараметры) Экспорт
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, ВерныйТипПути);
КонецПроцедуры

#КонецОбласти