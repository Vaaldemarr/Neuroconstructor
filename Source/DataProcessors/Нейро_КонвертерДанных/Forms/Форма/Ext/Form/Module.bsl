&НаКлиенте
Процедура СообщитьОбОшибке(Поле, Текст)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьЭлементовФормы()
	Если Объект.ВидДанных <> 4 Тогда //не Numpy
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ФормаВыгрузить.Видимость=Истина;
		Элементы.ФормаВыполнитьОперациюНадМассивомNumpy.Видимость=Ложь;
	Иначе
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ФормаВыгрузить.Видимость=Ложь;
		Элементы.ФормаВыполнитьОперациюНадМассивомNumpy.Видимость=Истина;
	КонецЕсли;
	
	Если Объект.ВидДанных = 5 Тогда //Изображения
		Элементы.ДанныеКолонка.Заголовок = "№ класса";
	Иначе
		Элементы.ДанныеКолонка.Заголовок = "Колонка";
	КонецЕсли;
	
	Если Объект.ВидДанных = 0 Тогда //Запрос
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ФормаВыгрузить.Видимость=Истина;
		Элементы.ФормаВыполнитьОперациюНадМассивомNumpy.Видимость=Ложь;
		Элементы.ГруппаМассивыNumpy.Видимость=Ложь;
		Элементы.ТипДанных.Видимость=Истина;
		Элементы.Данные.Видимость=Ложь;
		Элементы.ГруппаМассивы.Видимость=Ложь;
		Элементы.ДанныеТипДанных.Видимость=Ложь;
		Элементы.ГруппаЗапрос.Видимость=Истина;
		Элементы.ГруппаПреобразовать.Видимость=Ложь;
		Элементы.ГруппаТекст.Видимость=Ложь;
		Элементы.ГруппаИзображения.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Истина;
		Элементы.Разделитель1.Видимость=Истина;
		//Элементы.Разделитель1.АвтоОтметкаНезаполненного=Истина;
		Элементы.ПутьКФайлу.Заголовок = "Выходной файл";
		Элементы.ПромежуточныйФайл.Заголовок = "Промежуточный файл";
		Элементы.НомерКолонки.Видимость = Ложь;
		Элементы.ПропуститьЗаголовок.Видимость = Ложь;
		Элементы.ВходнойЭтоВыходной.Видимость = Ложь;
	ИначеЕсли Объект.ВидДанных = 1 Тогда //Список
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ФормаВыгрузить.Видимость=Истина;
		Элементы.ФормаВыполнитьОперациюНадМассивомNumpy.Видимость=Ложь;
		Элементы.ГруппаМассивыNumpy.Видимость=Ложь;
		Элементы.ТипДанных.Видимость=Истина;
		Элементы.Данные.Видимость=Истина;
		Элементы.ДанныеРазделитель.Видимость=Истина;
		Элементы.ДанныеПутьКФайлу.Видимость=Истина;
		Элементы.ДанныеРасширение.Видимость=Истина;
		Элементы.ДанныеТипДанных.Видимость=Истина;
		Элементы.ГруппаМассивы.Видимость=Ложь;
		Элементы.ГруппаТекст.Видимость=Ложь;
		Элементы.ГруппаЗапрос.Видимость=Ложь;
		Элементы.ГруппаПреобразовать.Видимость=Ложь;
		Элементы.ГруппаИзображения.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Истина;
		Элементы.Разделитель1.Видимость=Истина;
		//Элементы.Разделитель1.АвтоОтметкаНезаполненного=Ложь;
		Элементы.ПутьКФайлу.Заголовок = "Выходной каталог";
		Элементы.ПромежуточныйФайл.Заголовок = "Промежуточный каталог";
		Элементы.ДанныеЗаполнитьВсеФайлы.Видимость=Истина;
		Элементы.ДанныеЗаполнитьТексты.Видимость=Истина;
		Элементы.ДанныеЗаполнитьMXL.Видимость=Истина;
		Элементы.ДанныеЗаполнитьXLSX.Видимость=Истина;
		Элементы.ДанныеЗаполнитьXLS.Видимость=Истина;
		Элементы.ДанныеЗаполнитьODS.Видимость=Истина;
		Элементы.ДанныеЗаполнитьИзображения.Видимость=Ложь;
		Элементы.ДанныеИзображенияПоКлассам.Видимость=Ложь;
		Элементы.ДанныеТекстПоКлассам.Видимость=Ложь;
		Элементы.НомерКолонки.Видимость = Истина;
		Элементы.ДанныеКолонка.Видимость = Истина;
		Элементы.ПропуститьЗаголовок.Видимость = Истина;
		Элементы.ДанныеЗаголовок.Видимость = Истина;
		Элементы.ВходнойЭтоВыходной.Видимость = Ложь;
	ИначеЕсли Объект.ВидДанных = 2 Тогда //Таблицы
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ФормаВыгрузить.Видимость=Истина;
		Элементы.ФормаВыполнитьОперациюНадМассивомNumpy.Видимость=Ложь;
		Элементы.ГруппаМассивыNumpy.Видимость=Ложь;
		Элементы.ТипДанных.Видимость=Истина;
		Элементы.Данные.Видимость=Истина;
		Элементы.ДанныеРазделитель.Видимость=Истина;
		Элементы.ДанныеПутьКФайлу.Видимость=Истина;
		Элементы.ДанныеРасширение.Видимость=Истина;
		Элементы.ДанныеТипДанных.Видимость=Истина;
		Элементы.ГруппаМассивы.Видимость=Ложь;
		Элементы.ГруппаТекст.Видимость=Ложь;
		Элементы.ГруппаЗапрос.Видимость=Ложь;
		Элементы.ГруппаПреобразовать.Видимость=Ложь;
		Элементы.ГруппаИзображения.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Истина;
		Элементы.Разделитель1.Видимость=Истина;
		//Элементы.Разделитель1.АвтоОтметкаНезаполненного=Ложь;
		Элементы.ПутьКФайлу.Заголовок = "Выходной каталог";
		Элементы.ПромежуточныйФайл.Заголовок = "Промежуточный каталог";
		Элементы.ДанныеЗаполнитьВсеФайлы.Видимость=Истина;
		Элементы.ДанныеЗаполнитьТексты.Видимость=Истина;
		Элементы.ДанныеЗаполнитьMXL.Видимость=Истина;
		Элементы.ДанныеЗаполнитьXLSX.Видимость=Истина;
		Элементы.ДанныеЗаполнитьXLS.Видимость=Истина;
		Элементы.ДанныеЗаполнитьODS.Видимость=Истина;
		Элементы.ДанныеЗаполнитьИзображения.Видимость=Ложь;
		Элементы.ДанныеИзображенияПоКлассам.Видимость=Ложь;
		Элементы.ДанныеТекстПоКлассам.Видимость=Ложь;
		Элементы.НомерКолонки.Видимость = Ложь;
		Элементы.ДанныеКолонка.Видимость = Ложь;
		Элементы.ПропуститьЗаголовок.Видимость = Истина;
		Элементы.ДанныеЗаголовок.Видимость = Истина;
		Элементы.ВходнойЭтоВыходной.Видимость = Ложь;
	ИначеЕсли Объект.ВидДанных = 3 Тогда //Текст
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ГруппаМассивыNumpy.Видимость=Ложь;
		Элементы.ТипДанных.Видимость=Ложь;
		Элементы.Данные.Видимость=Истина;
		Элементы.ГруппаМассивы.Видимость=Ложь;
		Элементы.ДанныеРазделитель.Видимость=Ложь;
		Элементы.ДанныеПутьКФайлу.Видимость=Истина;
		Элементы.ДанныеРасширение.Видимость=Ложь;
		Элементы.ДанныеТипДанных.Видимость=Ложь;
		Элементы.ГруппаТекст.Видимость=Истина;
		Элементы.ГруппаЗапрос.Видимость=Ложь;
		Элементы.ГруппаПреобразовать.Видимость=Истина;
		Элементы.ГруппаИзображения.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Заголовок = "Промежуточный файл";
		//Элементы.ТекстДлинаПоследовательности.Видимость=(Объект.ТекстПреобразовать=0);
		//Элементы.ТекстМестоДополнения.Видимость=(Объект.ТекстПреобразовать=0);
		//Элементы.ТекстМестоУсечения.Видимость=(Объект.ТекстПреобразовать=0 И Объект.ТекстДлинаПоследовательности>0);
		Элементы.ТекстДвоичныйРежим.Видимость=(Объект.ТекстПреобразовать=1);
		ТекстПоследовательностиПриИзменении(Элементы.ТекстПоследовательности);
		ТекстСоздаватьМеткиПриИзменении(Элементы.ТекстСоздаватьМетки);
		Элементы.Разделитель1.Видимость=Ложь;
		Элементы.ПутьКФайлу.Заголовок = "Выходной файл";
		Элементы.ДанныеЗаполнитьВсеФайлы.Видимость=Истина;
		Элементы.ДанныеЗаполнитьТексты.Видимость=Истина;
		Элементы.ДанныеЗаполнитьMXL.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьXLSX.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьXLS.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьODS.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьИзображения.Видимость=Ложь;
		Элементы.ДанныеИзображенияПоКлассам.Видимость=Ложь;
		//Элементы.ДанныеТекстПоКлассам.Видимость=Ложь;
		Элементы.НомерКолонки.Видимость = Ложь;
		Элементы.ДанныеКолонка.Видимость = Ложь;
		Элементы.ПропуститьЗаголовок.Видимость = Ложь;
		Элементы.ДанныеЗаголовок.Видимость = Ложь;
		Элементы.ВходнойЭтоВыходной.Видимость = Ложь;
	ИначеЕсли Объект.ВидДанных = 4 Тогда //Numpy
		Элементы.ФормаВыгрузить.Видимость=Ложь;
		Элементы.ГруппаМассивыNumpy.Видимость=Истина;
		Элементы.Разделитель1.Видимость=Ложь;
		Элементы.ТипДанных.Видимость=Ложь;
		Элементы.Данные.Видимость=Ложь;
		Элементы.ГруппаМассивы.Видимость=Истина;
		Элементы.ГруппаТекст.Видимость=Ложь;
		Элементы.ГруппаЗапрос.Видимость=Ложь;
		Элементы.ГруппаПреобразовать.Видимость=Ложь;
		Элементы.ГруппаИзображения.Видимость=Ложь;
		//Элементы.ПромежуточныйФайл.Видимость=Истина;
		Элементы.ПутьКФайлу.Заголовок = "Выходной файл";
		//Элементы.ПромежуточныйФайл.Заголовок = "Промежуточный файл";
		//Элементы.ДанныеЗаполнитьВсеФайлы.Видимость=Ложь;
		//Элементы.ДанныеЗаполнитьТексты.Видимость=Ложь;
		//Элементы.ДанныеЗаполнитьMXL.Видимость=Ложь;
		//Элементы.ДанныеЗаполнитьXLSX.Видимость=Ложь;
		//Элементы.ДанныеЗаполнитьXLS.Видимость=Ложь;
		//Элементы.ДанныеЗаполнитьODS.Видимость=Ложь;
		Элементы.НомерКолонки.Видимость = Ложь;
		Элементы.ДанныеКолонка.Видимость = Ложь;
		Элементы.ПропуститьЗаголовок.Видимость = Ложь;
		ИзменитьВидимостьЭлементовФормыМассивNPY();
		//Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		
	ИначеЕсли Объект.ВидДанных = 5 Тогда //Изображения
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ГруппаМассивыNumpy.Видимость=Ложь;
		Элементы.ТипДанных.Видимость=Ложь;
		Элементы.Данные.Видимость=Истина;
		Элементы.ГруппаМассивы.Видимость=Ложь;
		Элементы.ДанныеРазделитель.Видимость=Ложь;
		Элементы.ДанныеПутьКФайлу.Видимость=Истина;
		Элементы.ДанныеРасширение.Видимость=Истина;
		Элементы.ДанныеТипДанных.Видимость=Ложь;
		Элементы.ГруппаТекст.Видимость=Ложь;
		Элементы.ГруппаЗапрос.Видимость=Ложь;
		Элементы.ГруппаПреобразовать.Видимость=Ложь;
		Элементы.ГруппаИзображения.Видимость=Истина;
		Элементы.ТекстДлинаПоследовательности.Видимость=(Объект.ТекстПреобразовать=0);
		Элементы.ТекстМестоДополнения.Видимость=(Объект.ТекстПреобразовать=0);
		Элементы.ТекстМестоУсечения.Видимость=(Объект.ТекстПреобразовать=0 И Объект.ТекстДлинаПоследовательности>0);
		Элементы.ТекстДвоичныйРежим.Видимость=(Объект.ТекстПреобразовать=1);
		Элементы.ПромежуточныйФайл.Видимость=Истина;
		Элементы.Разделитель1.Видимость=Ложь;
		Элементы.ПутьКФайлу.Заголовок = "Файл образцов";
		Элементы.ПромежуточныйФайл.Заголовок = "Файл целей";
		Элементы.ДанныеЗаполнитьВсеФайлы.Видимость=Истина;
		Элементы.ДанныеЗаполнитьТексты.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьMXL.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьXLSX.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьXLS.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьODS.Видимость=Ложь;
		Элементы.ДанныеЗаполнитьИзображения.Видимость=Истина;
		Элементы.ДанныеИзображенияПоКлассам.Видимость=Истина;
		Элементы.ДанныеТекстПоКлассам.Видимость=Ложь;
		Элементы.НомерКолонки.Видимость = Ложь;
		Элементы.ДанныеКолонка.Видимость = Истина;
		Элементы.ПропуститьЗаголовок.Видимость = Ложь;
		Элементы.ДанныеЗаголовок.Видимость = Ложь;
		Элементы.ВходнойЭтоВыходной.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПутьКФайлуОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ЗапуститьПриложение(Элементы.Данные.ТекущиеДанные.ПутьКФайлу);
	ОпОп = Новый ОписаниеОповещения("ПослеОткрытияФайлаИсточника", ЭтотОбъект);
	НачатьЗапускПриложения(ОпОп, Элементы.Данные.ТекущиеДанные.ПутьКФайлу);
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФайлаИсточника(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Список //Таблицы
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогОткрытияФайла.Каталог=Объект.ПутьКФайлу;
		ДиалогОткрытияФайла.Заголовок = "Укажите каталог для выгрузки";	
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораВыходногоФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
	Иначе
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ПутьКФайлу=Объект.ПутьКФайлу;
		Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
		Если Поз>0 Тогда
			ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
		КонецЕсли;
		ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ПутьКФайлу;
		Фильтр = НСтр("ru = 'Двоичный файл в формате NumPy'; en = 'Binary file in NumPy format'")+ "(*.npy)|*.npy";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Укажите имя файла для выгрузки";	
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораВыходногоФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораВыходногоФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Объект.ПутьКФайлу = ВыбранныеФайлы[0];
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Списки, Таблицы
		Если Объект.ПромежуточныйФайл="" Тогда
			Объект.ПромежуточныйФайл=ВыбранныеФайлы[0];
		КонецЕсли;
	КонецЕсли;
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//Длг.Фильтр = "Текстовый файл (*.txt)|*.txt|MXL-files (*.mxl)|*.mxl|XLS-files (*.xls)|*.xls|XLSX-files (*.xlsx)|*.xlsx|ODS-files (*.ods)|*.ods";
	//Длг.Показать(Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаИсточника", ЭтаФорма));
	Если Объект.ВидДанных = 3 Тогда //Текст
		Если Объект.ТекстИзКаталога Тогда
			Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
			ЗаголовокД = "Укажите каталог с текстовыми файлами";
			МножественныйВыбор = Ложь;
		Иначе
			Режим = РежимДиалогаВыбораФайла.Открытие;
			ЗаголовокД = "Укажите имя файла(ов) с текстом";
			МножественныйВыбор = Истина;
		КонецЕсли;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Если Объект.ТекстИзКаталога Тогда
			ДиалогОткрытияФайла.Каталог=Элементы.Данные.ТекущиеДанные.ПутьКФайлу;
		Иначе
			ПутьКФайлу=Элементы.Данные.ТекущиеДанные.ПутьКФайлу;
			Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
			Если Поз>0 Тогда
				ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
			КонецЕсли;
			ДиалогОткрытияФайла.ПолноеИмяФайла = Элементы.Данные.ТекущиеДанные.ПутьКФайлу;
		КонецЕсли;
		ДиалогОткрытияФайла.МножественныйВыбор = МножественныйВыбор;
		Фильтр = "Все файлы (*.*)|*.*|Текстовые файлы (*.txt)|*.txt";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = ЗаголовокД;	
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаТекстов", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
		
	Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ПутьКФайлу=Элементы.Данные.ТекущиеДанные.ПутьКФайлу;
		Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
		Если Поз>0 Тогда
			ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
		КонецЕсли;
		ДиалогОткрытияФайла.ПолноеИмяФайла = Элементы.Данные.ТекущиеДанные.ПутьКФайлу;
		//Фильтр = НСтр("ru = 'Двоичный файл в формате NumPy'; en = 'Binary file in NumPy format'")+ "(*.npy)|*.npy";
		//Фильтр = "Все файлы (*.*)|*.*";
		Фильтр = "Все файлы (*.*)|*.*|Текстовый файл (*.txt)|*.txt|Файлы MXL (*.mxl)|*.mxl|Таблицы MS Excel'97 (*.xls)|*.xls|Таблицы MS Excel (*.xlsx)|*.xlsx|Файлы ODS (*.ods)|*.ods";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Укажите имя файла источника";	
		ДиалогОткрытияФайла.МножественныйВыбор = Истина;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаИсточника", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаИсточника(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Файл = Новый Файл(ВыбранныеФайлы[0]);
	Элементы.Данные.ТекущиеДанные.ПутьКФайлу = ВыбранныеФайлы[0];
	Элементы.Данные.ТекущиеДанные.Расширение = Файл.Расширение;
	Если ВыбранныеФайлы.Количество()>1 Тогда
		Для Сч = 1 По ВыбранныеФайлы.Количество()-1 Цикл
			Файл = Новый Файл(ВыбранныеФайлы[Сч]);
			НоваяСтрока = Объект.Данные.Добавить();
			НоваяСтрока.ПутьКФайлу = ВыбранныеФайлы[Сч];
			НоваяСтрока.Расширение = Файл.Расширение;
		КонецЦикла;
	КонецЕсли;
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаТекстов(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.Данные.ТекущиеДанные.ПутьКФайлу = ВыбранныеФайлы[0];
	Если НЕ Объект.ТекстИзКаталога Тогда
		Файл = Новый Файл(ВыбранныеФайлы[0]);
		Элементы.Данные.ТекущиеДанные.Расширение = Файл.Расширение;
		Если ВыбранныеФайлы.Количество()>1 Тогда
			Для Сч = 1 По ВыбранныеФайлы.Количество()-1 Цикл
				Файл = Новый Файл(ВыбранныеФайлы[Сч]);
				НоваяСтрока = Объект.Данные.Добавить();
				НоваяСтрока.ПутьКФайлу = ВыбранныеФайлы[Сч];
				НоваяСтрока.Расширение = Файл.Расширение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхПриИзменении(Элемент)
	ИзменитьВидимостьЭлементовФормы()
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.ВидДанных=4;
	Объект.ИзображенияТипДанных=ПредопределенноеЗначение("Перечисление.Нейро_ТипыNumPy.uint8"); 
	ИзменитьВидимостьЭлементовФормы();

	Объект.НижнийРегистр=Истина;
	Объект.Разделитель=" ";
	//ИдентификаторFromJSON = "keras.preprocessing.text.text.tokenizer_from_json";
	
	ЗаполнитьСписокВыбораКодировкиТекста();
	
	Нейро_РаботаСФайлами.ПолучитьКаталогНейроконструктора(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКодировкиТекста()
	Кодировки = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьОбщийМакет("Нейро_Кодировки"));
	Элементы.ТекстКодировка.СписокВыбора.ЗагрузитьЗначения(СтрРазделить(Кодировки,Символы.ВК+Символы.ПС,Ложь))
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоказаКонструктораЗапроса(Текст, ДополнительныеПараметры) Экспорт
	Если Текст<>Неопределено Тогда
		Объект.ТекстЗапроса = Текст;
		ОбновитьПараметрыЗапроса(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыЗапроса(Текст)
	МассивПараметров = Новый Массив;
	КоличествоПараметров = СтрЧислоВхождений(Текст, "&");
	КодАнгНач = КодСимвола("A"); КодАнгКон = КодСимвола("Z");
	КодАнгНач1 = КодСимвола("a"); КодАнгКон1 = КодСимвола("z");
	КодРусНач = КодСимвола("А"); КодРусКон = КодСимвола("Я");
	КодРусНач1 = КодСимвола("а"); КодРусКон1 = КодСимвола("я");
	КодЦифНач = КодСимвола("0"); КодЦифКон = КодСимвола("9");
	Для Сч = 1 По КоличествоПараметров Цикл
		Позиция = СтрНайти(Текст, "&",,,Сч);
		ИмяПараметра = "";
		Для Сч1 = Позиция+1 По СтрДлина(Текст) Цикл
			КодАСК = КодСимвола(Текст,Сч1);
			Если (КодАСК>=КодАнгНач И КодАСК<=КодАнгКон) ИЛИ (КодАСК>=КодАнгНач1 И КодАСК<=КодАнгКон1)
				ИЛИ (КодАСК>=КодРусНач И КодАСК<=КодРусКон) ИЛИ (КодАСК>=КодРусНач1 И КодАСК<=КодРусКон1)
				ИЛИ (КодАСК>=КодЦифНач И КодАСК<=КодЦифКон) ИЛИ КодАСК>=КодСимвола("_") Тогда
				ИмяПараметра=ИмяПараметра+Символ(КодАСК);
			Иначе
				Если МассивПараметров.Найти(ИмяПараметра)=Неопределено Тогда
					МассивПараметров.Добавить(ИмяПараметра);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИмяПараметра<>"" Тогда
			Если МассивПараметров.Найти(ИмяПараметра)=Неопределено Тогда
				МассивПараметров.Добавить(ИмяПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивПараметров.Количество()>0 Тогда
		Для Каждого ИмяПараметра Из МассивПараметров Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Параметр", ИмяПараметра);
			Строки = ПараметрыЗапроса.НайтиСтроки(Отбор);
			Если Строки.Количество()=0 Тогда
				НоваяСтрока = ПараметрыЗапроса.Добавить();
				НоваяСтрока.Параметр = ИмяПараметра;
				//Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПараметрыД = Новый Структура;
	Если ТипЗнч(Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение)=Тип("СписокЗначений") Тогда
		ПараметрыД.Вставить("Список", Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение);
	ИначеЕсли Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение<>Неопределено Тогда
		ПараметрыД.Вставить("Значение", Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение);
	КонецЕсли;
	ОписаниеО = Новый ОписаниеОповещения("ПослеЗакрытияФормыСпискаЗначений", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.Нейро_ФормаСпискаЗначений", ПараметрыД, ЭтотОбъект, Истина, , , ОписаниеО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСпискаЗначений(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия<>Неопределено Тогда
		Элементы.ПараметрыЗапроса.ТекущиеДанные.Значение = РезультатЗакрытия;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Выгрузить(Команда)
	Доп=Новый Структура("Имя, Приемник", "NPY", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("ВыгрузитьПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПродолжить(Результат, ДополнительныеПараметры) Экспорт
	Если Объект.ВидДанных = 0 Тогда      //Запрос
		Если Объект.ПутьКФайлу="" Тогда
			СообщитьОбОшибке("Объект.ПутьКФайлу", "Не указан путь к выходному файлу данных!");
			Возврат
		КонецЕсли;
		ВыгрузитьИзЗапроса();
	ИначеЕсли Объект.ВидДанных = 1 Тогда //Список
		КаталогВыгрузки = Новый Файл(Объект.ПутьКФайлу);
		Оп = Новый ОписаниеОповещения("ПродолжитьПроверкуЭтоКаталог", ЭтотОбъект);
		КаталогВыгрузки.НачатьПроверкуЭтоКаталог(Оп);
	ИначеЕсли Объект.ВидДанных = 2 Тогда //Таблицы
		КаталогВыгрузки = Новый Файл(Объект.ПутьКФайлу);
		Оп = Новый ОписаниеОповещения("ПродолжитьПроверкуЭтоКаталог", ЭтотОбъект);
		КаталогВыгрузки.НачатьПроверкуЭтоКаталог(Оп);
	ИначеЕсли Объект.ВидДанных = 3 Тогда //Текст
		Если Объект.ПутьКФайлу="" Тогда
			СообщитьОбОшибке("Объект.ПутьКФайлу", "Не указан путь к выходному файлу данных!");
			Возврат
		КонецЕсли;
		ВыгрузитьТекст()
	ИначеЕсли Объект.ВидДанных = 5 Тогда //Изображения
		Если Объект.ПутьКФайлу="" Тогда
			СообщитьОбОшибке("Объект.ПутьКФайлу", "Не указан путь к выходному файлу данных!");
			Возврат
		КонецЕсли;
		ВыгрузитьИзображения()
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПроверкуЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	Если НЕ ЭтоКаталог Тогда
		СообщитьОбОшибке("Объект.ПутьКФайлу", "Неверный путь к выходному каталогу!");
		Возврат
	КонецЕсли;
	КаталогПромежуточный = Новый Файл(Объект.ПромежуточныйФайл);
	Оп = Новый ОписаниеОповещения("ВыгрузитьТаблицу", ЭтотОбъект);
	КаталогПромежуточный.НачатьПроверкуЭтоКаталог(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТаблицу(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	Если НЕ ЭтоКаталог Тогда
		СообщитьОбОшибке("Объект.ПромежуточныйФайл", "Неверный путь к промежуточному каталогу!");
		Возврат
	КонецЕсли;
	
	ВсеРазделители = Истина;
	Для Каждого СтрокаДанные Из Объект.Данные Цикл
		Если СтрокаДанные.Разделитель="" Тогда
			ВсеРазделители=Ложь;
			Поле = "Объект.Данные["+СтрЗаменить(СокрЛП(СтрокаДанные.ПолучитьИдентификатор()),Символы.НПП,"")+"].Разделитель";
			СообщитьОбОшибке(Поле, "Не указан разделитель!");
		КонецЕсли;
	КонецЦикла;
	Если Не ВсеРазделители Тогда
		Возврат
	КонецЕсли;

	МассивФайлов = Новый Массив;
	МассивФайлов1 = Новый Массив;
	ПромежуточныйКаталог = СокрЛП(Объект.ПромежуточныйФайл);
	Если Прав(ПромежуточныйКаталог,1)<>"\" Тогда ПромежуточныйКаталог=ПромежуточныйКаталог+"\"; КонецЕсли;
	Для Каждого СтрокаДанные Из Объект.Данные Цикл
		Если СтрокаДанные.ПутьКФайлу="" Тогда Продолжить КонецЕсли;
		Файл = Новый Файл(СтрокаДанные.ПутьКФайлу);
		Если СтрокаДанные.Расширение=".xls" Или СтрокаДанные.Расширение=".xlsx" Или СтрокаДанные.Расширение=".mxl" Или СтрокаДанные.Расширение=".ods" Тогда
			лДвоичДанные = Новый ДвоичныеДанные(СтрокаДанные.ПутьКФайлу);
			лФайл = ПоместитьВоВременноеХранилище(лДвоичДанные);	
			Если Объект.ВидДанных = 1 Тогда //Список
				ТекстДанные = ОбработатьТаблицуНаСервере(лФайл, СтрокаДанные.Расширение, СтрокаДанные.Разделитель, ?(СтрокаДанные.Колонка>0,СтрокаДанные.Колонка-1,Неопределено));
			Иначе
				ТекстДанные = ОбработатьТаблицуНаСервере(лФайл, СтрокаДанные.Расширение, СтрокаДанные.Разделитель);
			КонецЕсли;
			Если ТекстДанные="" Тогда
				Поле = "Объект.Данные["+СтрЗаменить(СокрЛП(СтрокаДанные.ПолучитьИдентификатор()),Символы.НПП,"")+"].ПутьКФайлу";
				СообщитьОбОшибке(Поле, "Не удалось обработать файл: "+Файл.Имя);
				Продолжить;
			КонецЕсли;
			ПутьКПромежуточномуФайлу = ПромежуточныйКаталог+Файл.ИмяБезРасширения+".txt";
			ЗаписьТекста = Новый ЗаписьТекста(ПутьКПромежуточномуФайлу, КодировкаТекста.ANSI);
			ЗаписьТекста.Записать(ТекстДанные);
			ЗаписьТекста.Закрыть();	
			ЧастиФайла = Новый Структура();
			ЧастиФайла.Вставить("Имя", Файл.ИмяБезРасширения+".txt");
			ЧастиФайла.Вставить("ИмяNPY", Файл.ИмяБезРасширения+".npy");
			ЧастиФайла.Вставить("Разделитель", СтрокаДанные.Разделитель);
			ЧастиФайла.Вставить("Заголовок", СтрокаДанные.Заголовок);
			ЧастиФайла.Вставить("ТипДанных", СтрокаДанные.ТипДанных);
			//ЧастиФайла.Вставить("Колонка", СтрокаДанные.Колонка);
			МассивФайлов.Добавить(ЧастиФайла);
		Иначе
			//Если СтрокаДанные.Расширение=".txt" Тогда
			ЧастиФайла = Новый Структура();
			ЧастиФайла.Вставить("ПутьКФайлу", СтрокаДанные.ПутьКФайлу);
			ЧастиФайла.Вставить("ИмяNPY", Файл.ИмяБезРасширения+".npy");
			ЧастиФайла.Вставить("Разделитель", СтрокаДанные.Разделитель);
			ЧастиФайла.Вставить("Заголовок", СтрокаДанные.Заголовок);
			ЧастиФайла.Вставить("ТипДанных", СтрокаДанные.ТипДанных);
			ЧастиФайла.Вставить("Колонка", ?(Объект.ВидДанных = 1,СтрокаДанные.Колонка,0));
			МассивФайлов1.Добавить(ЧастиФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество()=0 И МассивФайлов1.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Данные", "Не удалось обработать ни одного файла!");
		Возврат
	КонецЕсли;
	
	ПрефиксИмени = "Tables_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПутьКВыходномуКаталогу", Объект.ПутьКФайлу);
	СтруктураПараметров.Вставить("ПутьКПромежуточномуКаталогу", Объект.ПромежуточныйФайл);
	СтруктураПараметров.Вставить("МассивФайловТД", МассивФайлов);
	СтруктураПараметров.Вставить("МассивФайловТекст", МассивФайлов1);
	СтруктураПараметров.Вставить("ТипДанных", Объект.ТипДанных);
	СтруктураПараметров.Вставить("Разделитель", Объект.Разделитель1);
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	
	ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыТаблицы(СтруктураПараметров);
	
	Оп = Новый ОписаниеОповещения("ВыгрузитьТаблицуЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ОбработатьТаблицуНаСервере(ФайлИсточник, Расширение, Разделитель, Колонка=Неопределено)
	Возврат Нейро_ПодготовкаДанныхНаСервере.ПрочитатьТабличныйДокументВТЗ(ФайлИсточник, Прав(Расширение, СтрДлина(Расширение)-1), Разделитель, Колонка);
КонецФункции

&НаКлиенте
Процедура ВыгрузитьТаблицуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//Успшено
	Для Каждого СтрокаПути Из ДополнительныеПараметры.МассивФайловТекст Цикл
		ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКВыходномуКаталогу+"\"+СтрокаПути.ИмяNPY);
	КонецЦикла;
	Для Каждого СтрокаПути Из ДополнительныеПараметры.МассивФайловТД Цикл
		ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКВыходномуКаталогу+"\"+СтрокаПути.ИмяNPY);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзЗапроса()
	Если Объект.ТекстЗапроса="" Тогда
		СообщитьОбОшибке("Объект.ТекстЗапроса", "Отсутствует текст запроса!");
		Возврат;
	КонецЕсли;

	ТекстДанные=ВыгрузитьИзЗапросаНаСервере();
	Если ТекстДанные="" Тогда
		СообщитьОбОшибке("Объект.ТекстЗапроса", "Результат запроса пуст!");
		Возврат;
	КонецЕсли;
	
	ЗаписьТекста = Новый ЗаписьТекста(Объект.ПромежуточныйФайл, КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ТекстДанные);
	ЗаписьТекста.Закрыть();	
	
	ПрефиксИмени = "Query_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПутьКВыходномуФайлу", Объект.ПутьКФайлу);
	СтруктураПараметров.Вставить("ПутьКПромежуточному", Объект.ПромежуточныйФайл);
	СтруктураПараметров.Вставить("ТипДанных", Объект.ТипДанных);
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыИзРезультатаЗапроса(СтруктураПараметров);
	
	Оп = Новый ОписаниеОповещения("ВыгрузитьИзЗапросаЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ВыгрузитьИзЗапросаНаСервере()
	Возврат Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстовыйДокументИзЗапросаНаСервере(Объект.ТекстЗапроса, ПараметрыЗапроса, Объект.Разделитель1);
КонецФункции

&НаКлиенте
Процедура ВыгрузитьИзЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//Успшено
	ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКВыходномуФайлу);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзображения()
	Если Объект.ИзображенияВысота<>0 Или Объект.ИзображенияШирина<>0 Тогда
		Если Объект.ИзображенияВысота=0 Тогда
			СообщитьОбОшибке("Объект.ИзображенияВысота", "Неверная высота изображения!");
			Возврат;
		КонецЕсли;
		Если Объект.ИзображенияШирина=0 Тогда
			СообщитьОбОшибке("Объект.ИзображенияШирина", "Неверная ширина изображения!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыделятьДляКонтроля>0 И СокрЛП(Объект.ПромежуточныйФайл)<>"" Тогда
		ИндексДеления = Окр(Объект.Данные.Количество() * ВыделятьДляКонтроля);
		Проверка = ПроверитьКлассыИзображений();
		Если Проверка.Ошибка Тогда
			СтрокаУчебные = "";
			Для Каждого НомерКласса Из Проверка.МассивУчебные Цикл
				Если СтрокаУчебные<>"" Тогда СтрокаУчебные=СтрокаУчебные+", " КонецЕсли;
				СтрокаУчебные=СтрокаУчебные+СокрЛП(НомерКласса);
			КонецЦикла;
			Если СтрокаУчебные<>"" Тогда
				СтрокаУчебные = "Не найдены в проверочных данных классы: "+СтрокаУчебные;
			КонецЕсли;
			СтрокаПроверочные = "";
			Для Каждого НомерКласса Из Проверка.МассивПроверочные Цикл
				Если СтрокаПроверочные<>"" Тогда СтрокаПроверочные=СтрокаПроверочные+", " КонецЕсли;
				СтрокаПроверочные=СтрокаПроверочные+СокрЛП(НомерКласса);
			КонецЦикла;
			Если СтрокаПроверочные<>"" Тогда
				СтрокаПроверочные = "Не найдены в учебных данных классы: "+СтрокаПроверочные;
			КонецЕсли;
			ТекстОшибкиКлассов=СтрокаУчебные;
			Если ТекстОшибкиКлассов<>"" Тогда
				ТекстОшибкиКлассов=ТекстОшибкиКлассов+"
				|"+СтрокаПроверочные;
			Иначе
				ТекстОшибкиКлассов=СтрокаПроверочные;
			КонецЕсли;
			СообщитьОбОшибке("ВыделятьДляКонтроля", 
			"Различается количество классов в учебных и проверочных данных!
			|"+ТекстОшибкиКлассов);
			Возврат;
		КонецЕсли;
	КонецЕсли;


	
	МассивФайлов=Новый Массив; МассивЦелей=Новый Массив;
	Для Каждого СтрокаДанные Из Объект.Данные Цикл
		Если СтрокаДанные.ПутьКФайлу="" Тогда Продолжить КонецЕсли;
		МассивФайлов.Добавить(СтрокаДанные.ПутьКФайлу);
		МассивЦелей.Добавить(СтрокаДанные.Колонка);
	КонецЦикла;
	Если МассивФайлов.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Данные", "Нет файлов для обработки!");
		Возврат;
	КонецЕсли;
	
	ПрефиксИмени = "Images_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПутьКВыходномуФайлу", Объект.ПутьКФайлу);
	СтруктураПараметров.Вставить("ПутьКПромежуточномуФайлу", Объект.ПромежуточныйФайл);
	СтруктураПараметров.Вставить("ИндексДеления", ИндексДеления);
	СтруктураПараметров.Вставить("Палитра", Объект.ИзображенияЦветоваяПалитра);
	СтруктураПараметров.Вставить("Высота", Объект.ИзображенияВысота);
	СтруктураПараметров.Вставить("Ширина", Объект.ИзображенияШирина);
	СтруктураПараметров.Вставить("Интерполяция", Объект.ИзображенияИнтерполяция);
	СтруктураПараметров.Вставить("ТипДанных", Объект.ИзображенияТипДанных);
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыИзображения(СтруктураПараметров, МассивФайлов, МассивЦелей);
	
	Оп = Новый ОписаниеОповещения("ВыгрузитьИзображенияЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ПроверитьКлассыИзображений()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.ПроверитьКлассыИзображений(Объект, ИндексДеления);
КонецФункции


&НаКлиенте
Процедура ВыгрузитьИзображенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//Успшено
	ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКВыходномуФайлу);
	Если СокрЛП(ДополнительныеПараметры.ПутьКПромежуточномуФайлу)<>"" Тогда
		ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКПромежуточномуФайлу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТекст()
	Если Объект.ТекстСоздаватьМетки И Объект.ПромежуточныйФайл="" Тогда
		СообщитьОбОшибке("Объект.ПромежуточныйФайл", "Не указан путь к файлу целей!");
		Возврат
	КонецЕсли;
	Если Объект.ТекстСоздаватьМетки И КлассыТекстов.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.ТекстСоздаватьМетки", "Не заполнен классификатор!");
		Возврат
	КонецЕсли;
	Если Объект.ПутьКСловарю="" Тогда
		СообщитьОбОшибке("Объект.ПутьКСловарю", "Не указан путь к файлу словаря!");
		Возврат
	КонецЕсли;
	Если Объект.Данные.Количество()=0 Тогда
		СообщитьОбОшибке("Объект.Данные", "Не указан путь к файлам данных!");
		Возврат
	КонецЕсли;
	Для Каждого СтрокаТЧ Из Объект.Данные Цикл
		Если СокрЛП(СтрокаТЧ.ПутьКФайлу)="" Тогда
			Поле = "Объект.Данные["+СтрокаТЧ.ПолучитьИдентификатор()+"].ПутьКФайлу";
			СообщитьОбОшибке(Поле, "Не указан путь к текстовым данным!");
			Возврат
		КонецЕсли;
	КонецЦикла;
	
	
	ПрефиксИмени = "Text_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	
	ЗаписьТекста = Новый ЗаписьТекста(ПутьККаталогуОбучения+ПрефиксИмени+"_list.txt",КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(СформироватьТекстовыйСписокФайловНаСервере());
	ЗаписьТекста.Закрыть();	
	
	Если Объект.ТекстСоздаватьМетки Тогда
		//МассивКлассов = КлассыТекстов.Выгрузить(,"НомерКласса");
		//ТекстКлассы = СтрСоединить(МассивКлассов,Символы.ВК+Символы.ПС);
		ТекстКлассы = СформироватьТекстовыйСписокМетокНаСервере();
		ЗаписьТекста = Новый ЗаписьТекста(ПутьККаталогуОбучения+ПрефиксИмени+"_labels.txt",КодировкаТекста.ANSI);
		ЗаписьТекста.Записать(ТекстКлассы);
		ЗаписьТекста.Закрыть();	
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПутьКФайлу", Объект.ПутьКФайлу);
	СтруктураПараметров.Вставить("ПромежуточныйФайл", Объект.ПромежуточныйФайл);
	СтруктураПараметров.Вставить("ПутьКСловарю", Объект.ПутьКСловарю);
	СтруктураПараметров.Вставить("ПутьКСпискуФайлов", ПутьККаталогуОбучения+ПрефиксИмени+"_list.txt");
	СтруктураПараметров.Вставить("ПутьКМеткам", ПутьККаталогуОбучения+ПрефиксИмени+"_labels.txt");
	СтруктураПараметров.Вставить("ИзКаталога", Объект.ТекстИзКаталога);
	СтруктураПараметров.Вставить("ПрямоеКодирование", Объект.ТекстПреобразовать=1);
	Режим = Элементы.ТекстДвоичныйРежим.СписокВыбора.НайтиПоЗначению(Объект.ТекстДвоичныйРежим).Представление;
	СтруктураПараметров.Вставить("ПрямоеКодированиеРежим", Режим);
	СтруктураПараметров.Вставить("ДлинаПоследовательности", Объект.ТекстДлинаПоследовательности);
	СтруктураПараметров.Вставить("МестоДополнения", Объект.ТекстМестоДополнения);
	СтруктураПараметров.Вставить("МестоУсечения", Объект.ТекстМестоУсечения);
	СтруктураПараметров.Вставить("ИдентификаторFromJSON", Нейро_ОбщийМодуль.ПолучитьИдентификаторИзРегистра("TokenizerFromJSON"));
	//СтруктураПараметров.Вставить("ТипДанных", Объект.ТипДанных);
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	СтруктураПараметров.Вставить("Кодировка", Объект.ТекстКодировка);
	СтруктураПараметров.Вставить("СоздаватьМетки", Объект.ТекстСоздаватьМетки);
	СтруктураПараметров.Вставить("КлассыТекстов", КлассыТекстов);
	СтруктураПараметров.Вставить("Перемешивать", Объект.ТекстПеремешивать);
	//ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыВыгрузитьТекст(СтруктураПараметров, Объект.Данные);
	ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыВыгрузитьТекст(СтруктураПараметров, ПолучитьМассивПутейНаСервере());
	
	Оп = Новый ОписаниеОповещения("ВыгрузитьТекстЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПутейНаСервере()
	ТЗ = Объект.Данные.Выгрузить(,"ПутьКФайлу");
	Возврат ТЗ.ВыгрузитьКолонку("ПутьКФайлу");
КонецФункции

&НаСервере
Функция СформироватьТекстовыйСписокФайловНаСервере()
	ТЗ = Объект.Данные.Выгрузить(,"ПутьКФайлу");
	МассивПутей = ТЗ.ВыгрузитьКолонку("ПутьКФайлу");
	Возврат СтрСоединить(МассивПутей,Символы.ПС);
КонецФункции

&НаСервере
Функция СформироватьТекстовыйСписокМетокНаСервере()
	ТЗ = КлассыТекстов.Выгрузить(,"НомерКласса");
	МассивПутей = ТЗ.ВыгрузитьКолонку("НомерКласса");
	Возврат СтрЗаменить(СтрСоединить(МассивПутей,Символы.ПС), Символы.НПП,"");
КонецФункции

&НаКлиенте
Процедура ВыгрузитьТекстЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//Успешно
	ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКФайлу);
	Если Объект.ТекстСоздаватьМетки Тогда
		ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПромежуточныйФайл);
	КонецЕсли;
	УдалятьФайлыПослеВыполнения = Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения");
	Если УдалятьФайлыПослеВыполнения Тогда
		ФайлУдалить = Новый Файл(ДополнительныеПараметры.ПутьКСпискуФайлов);
		НачатьУдалениеФайлов(Новый ОписаниеОповещения, ФайлУдалить.Путь, ФайлУдалить.Имя);
		Если Объект.ТекстСоздаватьМетки Тогда
			ФайлУдалить1 = Новый Файл(ДополнительныеПараметры.ПутьКМеткам);
			НачатьУдалениеФайлов(Новый ОписаниеОповещения, ФайлУдалить1.Путь, ФайлУдалить1.Имя);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КаталогТекстовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог=Объект.КаталогТекстов;
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.КаталогТекстов;
	ДиалогОткрытияФайла.Заголовок = "Укажите каталог с текстами";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораКаталогаТекстов", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораКаталогаТекстов(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Объект.КаталогТекстов=ВыбранныеФайлы[0];
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСловарюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ПутьКСловарю;
	ПутьКФайлу=Объект.ПутьКСловарю;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	Фильтр = НСтр("ru = 'JavaScript Object Notation '; en = 'JavaScript Object Notation '")+ "(*.json)|*.json";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла для словаря";	
	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаСловаря", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаСловаря(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Объект.ПутьКСловарю = ВыбранныеФайлы[0];
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСловарюОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	Если Объект.ПутьКСловарю="" Тогда Возврат КонецЕсли;
	
	Текст = Новый ЧтениеТекста(Объект.ПутьКСловарю);
	СтрокаJSON = Текст.Прочитать();
	Текст.Закрыть();
	
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("ТекстМоделиJSON", СтрокаJSON);
	Оп = Новый ОписаниеОповещения("ПослеПросмотраСловаряJSON", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.Нейро_ДеревоJSON", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраСловаряJSON(Результат, ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		Объект.Фильтры=Результат.Фильтры;
		Объект.НижнийРегистр=Результат.НижнийРегистр;
		Объект.Разделитель=Результат.Разделитель;
		Если Результат.РазмерСловаря=Null Тогда
			Объект.РазмерСловаря = 0
		Иначе
			Объект.РазмерСловаря = Результат.РазмерСловаря
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСловарь(Команда)
	Доп=Новый Структура("Имя, Приемник", "Dictionary", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("СоздатьСловарьПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСловарьПродолжить(ИмяКаталога, ДополнительныеПараметры) Экспорт
	СтрокаПД = Новый Структура;
	СтрокаПД.Вставить("РазмерСловаря", Объект.РазмерСловаря);
	СтрокаПД.Вставить("Фильтры", Объект.Фильтры);
	СтрокаПД.Вставить("НижнийРегистр", Объект.НижнийРегистр);
	СтрокаПД.Вставить("Разделитель", Объект.Разделитель);
	СтрокаПД.Вставить("КаталогТекстов", Объект.КаталогТекстов);
	СтрокаПД.Вставить("ПутьКСловарю", Объект.ПутьКСловарю);
	СтрокаПД.Вставить("Кодировка", Объект.ТекстКодировка);
	ПрефиксИмени = "DIC_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	Если НЕ СформироватьСловарь2(СтрокаПД, ПрефиксИмени) Тогда
		Сообщить("Словарь не сформирован!");
		Возврат
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения("СоздатьСловарьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, ДополнительныеПараметры);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Объект.ТекстПрограммыСловарь);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаСервере
Функция СформироватьСловарь2(СтрокаПД, ПрефиксИмени)
	Возврат Нейро_ПодготовкаДанныхНаСервере.СформироватьСловарь2(Объект, ЭтаФорма, СтрокаПД, ПрефиксИмени+"_err.txt", ПрефиксИмени+"_msg.txt")
КонецФункции

&НаКлиенте
Процедура СоздатьСловарьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//Успшено
КонецПроцедуры

&НаКлиенте
Процедура ТекстПреобразоватьПриИзменении(Элемент)
	//Элементы.ТекстДлинаПоследовательности.Видимость=(Объект.ТекстПреобразовать=0);
	//Элементы.ТекстМестоДополнения.Видимость=(Объект.ТекстПреобразовать=0 И Объект.ТекстДлинаПоследовательности>0);
	//Элементы.ТекстМестоУсечения.Видимость=(Объект.ТекстПреобразовать=0 И Объект.ТекстДлинаПоследовательности>0);
	Элементы.ТекстДвоичныйРежим.Видимость=(Объект.ТекстПреобразовать=1);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОчистить(Команда)
	Объект.Данные.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	СтандартнаяОбработка=Ложь;
	
	Конструктор = Новый КонструкторЗапроса(Объект.ТекстЗапроса);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПоказаКонструктораЗапроса", ЭтотОбъект);
	Конструктор.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьMXL(Команда)
	ЗаполнитьТЧДанные("*.mxl")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьODS(Команда)
	ЗаполнитьТЧДанные("*.ods")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьXLS(Команда)
	ЗаполнитьТЧДанные("*.xls")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьXLSX(Команда)
	ЗаполнитьТЧДанные("*.xlsx")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеФайлы(Команда)
	ЗаполнитьТЧДанные("*.*")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТексты(Команда)
	ЗаполнитьТЧДанные("*.txt")
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧДанные(Фильтр)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог=Объект.КаталогТекстов;
	//ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.КаталогТекстов;
	ДиалогОткрытияФайла.Заголовок = "Укажите каталог с файлами";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораКаталогаЗаполнить", ЭтотОбъект, Фильтр);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораКаталогаЗаполнить(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ОпОп = Новый ОписаниеОповещения("ПослеПоискаФайловВКаталоге", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПоискФайлов(ОпОп, ВыбранныеФайлы[0], ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаФайловВКаталоге(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		СтрокаДанные = Объект.Данные.Добавить();
		СтрокаДанные.ПутьКФайлу = НайденныйФайл.ПолноеИмя;
		СтрокаДанные.Расширение = НайденныйФайл.Расширение;
		Если НЕ Объект.ТипДанных.Пустая() Тогда
			СтрокаДанные.ТипДанных = Объект.ТипДанных;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Разделитель1ПриИзменении(Элемент)
	Если Объект.ВидДанных = 1 Или //Списки
		Объект.ВидДанных = 2 Тогда //Таблицы
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			СтрокаДанные.Разделитель = Объект.Разделитель1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныйФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Список //Таблицы
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогОткрытияФайла.Каталог=Объект.ПромежуточныйФайл;
		ДиалогОткрытияФайла.Заголовок = "Укажите каталог для промежуточных файлов";	
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораПромежуточногоФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
	ИначеЕсли Объект.ВидДанных = 3 //Текст
		Или Объект.ВидДанных = 4 //Numpy
		Или Объект.ВидДанных = 5 Тогда //Изображения
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Файл = Новый Файл(Объект.ПромежуточныйФайл);
		//ПутьКФайлу=Объект.ПромежуточныйФайл;
		ДиалогОткрытияФайла.Каталог=Файл.Путь;
		ДиалогОткрытияФайла.ПолноеИмяФайла = Файл.ИмяБезРасширения;
		Фильтр = НСтр("ru = 'Двоичный файл в формате NumPy'; en = 'Binary file in NumPy format'")+ "(*.npy)|*.npy";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Укажите имя для файла целей";	
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораПромежуточногоФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
	Иначе
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ПутьКФайлу=Объект.ПромежуточныйФайл;
		Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
		Если Поз>0 Тогда
			ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
		КонецЕсли;
		ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ПромежуточныйФайл;
		Фильтр = "Текстовые файлы (*.txt)|*.txt|Все файлы (*.*)|*.*";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Укажите имя файла для промежуточных данных";	
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораПромежуточногоФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОпОп);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораПромежуточногоФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Объект.ПромежуточныйФайл = ВыбранныеФайлы[0];
	//Модифицированность=Истина;
КонецПроцедуры


&НаКлиенте
Процедура НомерКолонкиПриИзменении(Элемент)
	Если Объект.ВидДанных = 1 Тогда //Списки
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			СтрокаДанные.Колонка = Объект.НомерКолонки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТипДанныхПриИзменении(Элемент)
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Списки, Таблицы
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			Если Не СтрокаДанные.ТипДанных.Пустая() Тогда Продолжить КонецЕсли;
			СтрокаДанные.ТипДанных = Объект.ТипДанных;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТипДанныхОчистка(Элемент, СтандартнаяОбработка)
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Списки, Таблицы
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			СтрокаДанные.ТипДанных = Неопределено;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПропуститьЗаголовокПриИзменении(Элемент)
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Списки, Таблицы
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			Если СтрокаДанные.Заголовок>0 Тогда Продолжить КонецЕсли;
			СтрокаДанные.Заголовок = Объект.ПропуститьЗаголовок;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПропуститьЗаголовокОчистка(Элемент, СтандартнаяОбработка)
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Списки, Таблицы
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			СтрокаДанные.Заголовок = 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура НомерКолонкиОчистка(Элемент, СтандартнаяОбработка)
	Если Объект.ВидДанных = 1 Или Объект.ВидДанных = 2 Тогда //Списки, Таблицы
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			СтрокаДанные.Колонка = 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИнформациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	СтрокаМассивы=Объект.Массивы.НайтиПоИдентификатору(ДополнительныеПараметры);
	Если Результат.Тип.Пустая() Тогда
		СтрокаМассивы.ТипДанных = Результат.Descr
	Иначе
		СтрокаМассивы.ТипДанных = Результат.Тип
	КонецЕсли;
	СтрокаМассивы.Форма = Результат.Форма;
	Файл = Новый Файл(СтрокаМассивы.ПутьКФайлу);
	СтрокаМассивы.ИмяФайла = Файл.Имя;
	//Если МассивВыбор=0 Тогда
	//	Массив1=СтрокаМассивы.ИмяФайла
	//ИначеЕсли МассивВыбор=1 Тогда
	//	Массив2=СтрокаМассивы.ИмяФайла
	//КонецЕсли;	
	Элементы.Массив1.СписокВыбора.Добавить(СтрокаМассивы.ИмяФайла);
	Элементы.Массив2.СписокВыбора.Добавить(СтрокаМассивы.ИмяФайла);
	Если Элементы.Массив1.СписокВыбора.Количество()<>Объект.Массивы.Количество() Или
		Элементы.Массив2.СписокВыбора.Количество()<>Объект.Массивы.Количество() Тогда
		Элементы.Массив1.СписокВыбора.Очистить();
		Элементы.Массив2.СписокВыбора.Очистить();
		Для Каждого СтрокаМассив Из Объект.Массивы Цикл
			Элементы.Массив1.СписокВыбора.Добавить(СтрокаМассив.ИмяФайла);
			Элементы.Массив2.СписокВыбора.Добавить(СтрокаМассив.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МассивыПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ПутьКФайлу=Элементы.Массивы.ТекущиеДанные.ПутьКФайлу;
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	Фильтр = НСтр("ru = 'Двоичный файл в формате NumPy'; en = 'Binary file in NumPy format'")+ "(*.npy)|*.npy";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя файла в формате NPY";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораФайлаNPY", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораФайлаNPY(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	Элементы.Массивы.ТекущиеДанные.ПутьКФайлу = ВыбранныеФайлы[0];
	Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЗавершение", ЭтотОбъект, Элементы.Массивы.ТекущиеДанные.ПолучитьИдентификатор());
	Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Массивы.ТекущиеДанные.ПутьКФайлу, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МассивыПутьКФайлуПриИзменении(Элемент)
	Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЗавершение", ЭтотОбъект, Элементы.Массивы.ТекущиеДанные.ПолучитьИдентификатор());
	Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(Элементы.Массивы.ТекущиеДанные.ПутьКФайлу, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьNPY(Команда)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог=Объект.КаталогТекстов;
	//ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.КаталогТекстов;
	ДиалогОткрытияФайла.Заголовок = "Укажите каталог с файлами";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораКаталогаЗаполнитьNPY", ЭтотОбъект, "*.npy");
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораКаталогаЗаполнитьNPY(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ОпОп = Новый ОписаниеОповещения("ПослеПоискаФайловВКаталогеNPY", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПоискФайлов(ОпОп, ВыбранныеФайлы[0], ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаФайловВКаталогеNPY(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		СтрокаМассивы = Объект.Массивы.Добавить();
		СтрокаМассивы.ПутьКФайлу = НайденныйФайл.ПолноеИмя;
		Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЗавершение", ЭтотОбъект, СтрокаМассивы.ПолучитьИдентификатор());
		Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(СтрокаМассивы.ПутьКФайлу, Оповещение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСпискиВыбораМассивов()
	Элементы.Массив1.СписокВыбора.Очистить();
	Для Каждого СтрокаМассив Из Объект.Массивы Цикл
		Элементы.Массив1.СписокВыбора.Добавить(СтрокаМассив.ИмяФайла);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура МассивыОчистить(Команда)
	Объект.Массивы.Очистить();
	Элементы.Массив1.СписокВыбора.Очистить();
	Элементы.Массив2.СписокВыбора.Очистить();
	Массив1="";
	Массив2="";
КонецПроцедуры

&НаКлиенте
Процедура МассивыПередУдалением(Элемент, Отказ)
	Если Массив1=Элемент.ТекущиеДанные.ИмяФайла Тогда Массив1="" КонецЕсли;
	Если Массив2=Элемент.ТекущиеДанные.ИмяФайла Тогда Массив2="" КонецЕсли;
	ЭлементСписка = Элементы.Массив1.СписокВыбора.НайтиПоЗначению(Элемент.ТекущиеДанные.ИмяФайла);
	Если ЭлементСписка<>Неопределено Тогда
		Элементы.Массив1.СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли;
	ЭлементСписка = Элементы.Массив2.СписокВыбора.НайтиПоЗначению(Элемент.ТекущиеДанные.ИмяФайла);
	Если ЭлементСписка<>Неопределено Тогда
		Элементы.Массив2.СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	ИзменитьВидимостьЭлементовФормыМассивNPY()
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьЭлементовФормыМассивNPY()
	Если Операция=0 Тогда //Просмотр
		Элементы.МассивПромежуточныйФайл.Видимость=Истина;
		Элементы.ГруппаПросмотр.Видимость=Истина;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Ложь;
		Элементы.ВходнойЭтоВыходной.Видимость=Ложь;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=1 Тогда //Изменить размерность
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Истина;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=2 Тогда //Удалить элементы
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Истина;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		Элементы.МассивУдалитьСписокИндексов.Видимость=НЕ МассивУдалитьВсюОсь;
		Элементы.МассивУдалитьБезОси.Видимость=НЕ МассивУдалитьВсюОсь;
		Если НЕ МассивУдалитьВсюОсь Тогда
			Элементы.МассивУдалитьОсь.Видимость=НЕ МассивУдалитьБезОси;
		Иначе
			Элементы.МассивУдалитьОсь.Видимость=Истина;
		КонецЕсли;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=3 Тогда //Объединить массивы
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Истина;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		МассивОбъединитьСпособПриИзменении(Неопределено);
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=4 Тогда //Разделить массивы
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Истина;
		Элементы.ПромежуточныйФайл.Заголовок="Выходной файл";
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Истина;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.МассивРазделитьОсь.Видимость=МассивРазделитьСпособ>2;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=5 Тогда //Переставить
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ГруппаПереставить.Видимость=Истина;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=6 Тогда //Транспонировать
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.ГруппаТранспонировать.Видимость = Истина;
		ИзменитьВидимостьЭлементовТранспонировать();
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=7 Тогда //Изменить тип
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		//Элементы.ТипДанных.Видимость=Истина;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Истина;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=8 Тогда //ДобавитьОсь
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Истина;
		Элементы.ВходнойЭтоВыходной.Видимость=Истина;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Истина;
		Элементы.ПроизвольнаяТекст.Видимость = Ложь;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Ложь;
	ИначеЕсли Операция=9 Тогда //ДобавитьОсь
		Элементы.МассивПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаПросмотр.Видимость=Ложь;
		Элементы.ПромежуточныйФайл.Видимость=Ложь;
		Элементы.ГруппаИзменитьРазмерность.Видимость=Ложь;
		Элементы.ГруппаУдалитьИзМассива.Видимость=Ложь;
		Элементы.ГруппаОбъединить.Видимость=Ложь;
		Элементы.ГруппаРазделить.Видимость=Ложь;
		Элементы.ПутьКФайлу.Видимость=Ложь;
		Элементы.ВходнойЭтоВыходной.Видимость=Ложь;
		Элементы.ГруппаПереставить.Видимость=Ложь;
		Элементы.ГруппаТранспонировать.Видимость = Ложь;
		Элементы.ГруппаТипДанных.Видимость = Ложь;
		Элементы.МассивДобавитьОсь.Видимость = Ложь;
		Элементы.ПроизвольнаяТекст.Видимость = Истина;
		Элементы.ДанныеДанныеПроизвольнаяДобавить.Видимость = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Массив1Открытие(Элемент, СтандартнаяОбработка)
//numpy.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='n', header='', footer='', comments='# ', encoding=None)
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюНадМассивомNumpy(Команда)
	Доп=Новый Структура("Имя, Приемник", "NPY", "ПутьККаталогуОбучения");
	Оп = Новый ОписаниеОповещения("ВыполнитьОперациюНадМассивомNumpyПродолжить", ЭтотОбъект, Доп);
	Нейро_РаботаСФайлами.НачатьПроверкуСуществованияКаталога(Оп);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюНадМассивомNumpyПродолжить(Результат, ДополнительныеПараметры) Экспорт
	ВыполнитьПросмотр=ТолькоПросмотреть; ТолькоПросмотреть=Ложь;
	
	Путь1=""; Путь2="";
	Форма1=""; Форма2="";
	Отбор=Новый Структура;
	Отбор.Вставить("ИмяФайла", Массив1);
	Строки = Объект.Массивы.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 Тогда
		Путь1=Строки[0].ПутьКФайлу;
		Тип1=Строки[0].ТипДанных;
		Форма1=Строки[0].Форма;
	КонецЕсли;
	Отбор=Новый Структура;
	Отбор.Вставить("ИмяФайла", Массив2);
	Строки = Объект.Массивы.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 Тогда
		Путь2=Строки[0].ПутьКФайлу;
		Тип2=Строки[0].ТипДанных;
		Форма2=Строки[0].Форма;
	КонецЕсли;
	
	Если МассивВыбор=0 Тогда
		ВыбранныйПуть = Путь1;
		ВыбранныйТип = Тип1;
		ВыбраннаяФорма = Форма1;
		Поле = "Массив1";
	ИначеЕсли МассивВыбор=1 Тогда
		ВыбранныйПуть = Путь2;
		ВыбранныйТип = Тип2;
		ВыбраннаяФорма = Форма2;
		Поле = "Массив2";
	КонецЕсли;
	Если ВыбранныйПуть="" И Операция<>9 Тогда
		СообщитьОбОшибке(Поле, "Выберите массив перед выполнением операции!");
		Возврат
	КонецЕсли;
	
	ПрефиксИмени = "NumPy_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ВыполнитьПросмотр", Ложь);
	СтруктураПараметров.Вставить("ПутьКВыходномуФайлу", Объект.ПутьКФайлу);
	СтруктураПараметров.Вставить("ПутьКПромежуточномуФайлу", Объект.ПромежуточныйФайл);
	СтруктураПараметров.Вставить("Путь1", Путь1);
	СтруктураПараметров.Вставить("Тип1", Тип1);
	СтруктураПараметров.Вставить("Путь2", Путь2);
	СтруктураПараметров.Вставить("Тип2", Тип2);
	СтруктураПараметров.Вставить("ВыбранныйПуть", ВыбранныйПуть);
	СтруктураПараметров.Вставить("ВыбранныйТип", ВыбранныйТип);
	СтруктураПараметров.Вставить("ТипДанных", Объект.ТипДанных);
	СтруктураПараметров.Вставить("Разделитель", Объект.Разделитель1);
	СтруктураПараметров.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	СтруктураПараметров.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	
	Если Операция=0 Или ВыполнитьПросмотр Тогда //Просмотр
		СтруктураПараметров.ВыполнитьПросмотр=Истина;
		ПрефиксИмени = "NumPyView_"+Формат(ТекущаяДата(),"ДФ=""ггММддЧЧммсс""");
		СтруктураПараметров.ПутьКВыходномуФайлу = МассивПромежуточныйФайл;
		СтруктураПараметров.ПутьКПромежуточномуФайлу = МассивПромежуточныйФайл;
		СтруктураПараметров.ФайлОшибок = ПрефиксИмени+"_err.txt";
		СтруктураПараметров.ФайлСообщений = ПрефиксИмени+"_msg.txt";
		Если МассивПромежуточныйФайл="" Тогда
			СообщитьОбОшибке("ПромежуточныйФайл", "Укажите файл для промежуточных данных!");
			Возврат
		КонецЕсли;
		ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыПросмотрNPY(СтруктураПараметров, ПросмотрИндексыИзмерений, ПлоскийПросмотр);
	ИначеЕсли Операция=9 Тогда
		ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыПроизвольнаяОперацияNPY(СтруктураПараметров, ПроизвольнаяТекст);
	Иначе
		Если Объект.ПутьКФайлу="" И Операция<>4 Тогда
			СообщитьОбОшибке("Объект.ПутьКФайлу", "Укажите файл для результата операции!");
			Возврат
		КонецЕсли;
		Если Операция=1 Тогда //Изменить размерность
			Если МассивРазмерность="" Тогда
				СообщитьОбОшибке("МассивРазмерность", "Укажите список измерений!");
				Возврат
			КонецЕсли;
			МассивИзмерений = СтрРазделить(МассивРазмерность, ",", Ложь);
			Для Каждого Элемент Из МассивИзмерений Цикл
				Попытка
					ПроверочноеЧисло = Число(Элемент)
				Исключение
					СообщитьОбОшибке("МассивРазмерность", "Ожидается список целых чисел, разделенных запятой!");
					Возврат
				КонецПопытки;
			КонецЦикла;
			ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыПереформироватьNPY(СтруктураПараметров, МассивРазмерность);
		ИначеЕсли Операция=2 Тогда //Удалить элементы
			Если МассивУдалитьСписокЭлементов="" И НЕ МассивУдалитьВсюОсь Тогда
				СообщитьОбОшибке("МассивУдалитьСписокЭлементов", "Укажите список измерений и срезов!");
				Возврат
			КонецЕсли;
			ЭтоДиапазон = СтрНайти(МассивУдалитьСписокЭлементов,":");
			ЭтоСписок = СтрНайти(МассивУдалитьСписокЭлементов,",");
			Если ЭтоДиапазон И ЭтоСписок Тогда
				СообщитьОбОшибке("МассивУдалитьСписокЭлементов", "Укажите число или список или диапазон!");
				Возврат
			КонецЕсли;
			Если МассивУдалитьВсюОсь Тогда
				ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыУдалитьОсьNPY(СтруктураПараметров, МассивУдалитьОсь, ВыбраннаяФорма);
			Иначе
				ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыУдалитьNPY(СтруктураПараметров, МассивУдалитьСписокЭлементов, ?(МассивУдалитьБезОси,Неопределено,МассивУдалитьОсь));
			КонецЕсли;
		ИначеЕсли Операция=3 Тогда //Объединить массивы
			Если Путь1="" Тогда
				СообщитьОбОшибке("Массив1", "Выберите массив перед выполнением операции!");
				Возврат
			КонецЕсли;
			Если Путь2="" Тогда
				СообщитьОбОшибке("Массив2", "Выберите массив перед выполнением операции!");
				Возврат
			КонецЕсли;
			ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыОбъединитьNPY(СтруктураПараметров,МассивОбъединитьСпособ,МассивОбъединитьОсь,МассивОбъединитьНоваяОсь)
		ИначеЕсли Операция=4 Тогда //Разбить
			Если Объект.ПутьКФайлу="" И Операция<>4 Тогда
				СообщитьОбОшибке("Объект.ПутьКФайлу", "Укажите файл для результата операции!");
				Возврат
			КонецЕсли;
			ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыРазбитьNPY(СтруктураПараметров,МассивРазделитьСпособ,МассивРазделитьОсь)
		ИначеЕсли Операция=5 Тогда //Переставить оси
			КоличествоОткуда = СтрРазделить(МассивПереставитьОткуда, ",", Ложь).Количество();
			КоличествоКуда = СтрРазделить(МассивПереставитьКуда, ",", Ложь).Количество();
			Если КоличествоОткуда<>КоличествоКуда Тогда
				СообщитьОбОшибке("МассивПереставитьОткуда", "Не совпадает количество исходных и конечных позиций осей!");
				Возврат
			ИначеЕсли КоличествоОткуда=0 Тогда
				СообщитьОбОшибке("МассивПереставитьОткуда", "Введите позиции осей через запятую!");
				Возврат
			ИначеЕсли МассивПереставитьКуда=0 Тогда
				СообщитьОбОшибке("МассивПереставитьКуда", "Введите позиции осей через запятую!");
				Возврат
			КонецЕсли;
			ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыПереставитьNPY(СтруктураПараметров, МассивПереставитьОткуда, МассивПереставитьКуда, МассивПереставитьПоменятьМестами);
		ИначеЕсли Операция=6 Тогда //Транспонировать
			Если МассивТранспонироватьПоОсям Тогда
				ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыТранспонироватьNPY(СтруктураПараметров, МассивТранспонироватьОси, МассивТранспонироватьИнвертировать)
			Иначе
				ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыТранспонироватьNPY(СтруктураПараметров, Неопределено)
			КонецЕсли;
		ИначеЕсли Операция=7 Тогда //Изменить тип
			Если МассивТипДанных.Пустая() Тогда
				СообщитьОбОшибке("МассивТипДанных", "Выберите тип данных!");
				Возврат
			КонецЕсли;
			ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыИзменитьТипNPY(СтруктураПараметров, МассивТипДанных);
		ИначеЕсли Операция=8 Тогда //Добавить ось
			ТекстПрограммы = Нейро_ПодготовкаДанныхНаСервере.СформироватьТекстПрограммыДобавитьОсьNPY(СтруктураПараметров, МассивДобавитьОсь);
		КонецЕсли;
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения("ВыполнитьОперациюНадМассивомNumpyЗавершение", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КаталогВыполнения", ПутьККаталогуОбучения);
	ДопПараметры.Вставить("ФайлПрограммы", ПрефиксИмени+".py");
	ДопПараметры.Вставить("ФайлОшибок", ПрефиксИмени+"_err.txt");
	ДопПараметры.Вставить("ФайлСообщений", ПрефиксИмени+"_msg.txt");
	ДопПараметры.Вставить("Оповещение", Оп);
	ОпОшибка = Новый ОписаниеОповещения("ОшибкаВыполнения", ЭтотОбъект, СтруктураПараметров);
	ДопПараметры.Вставить("ОповещениеОбОшибке", ОпОшибка);
	Если НЕ Нейро_ОбщийМодуль.ПолучитьНастройку("УдалятьФайлыПослеВыполнения") Тогда
		ДопПараметры.Вставить("НеУдалятьФайлы", );
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстПрограммы);
	Нейро_РаботаСФайлами.ЗаписатьИВыполнитьПрограммуНаПитоне(ТекстовыйДокумент, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюНадМассивомNumpyЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.ВыполнитьПросмотр Или Операция=0 Тогда //Просмотр
		ОпОп = Новый ОписаниеОповещения();
		НачатьЗапускПриложения(ОпОп, ДополнительныеПараметры.ПутьКПромежуточномуФайлу);
		Если ДополнительныеПараметры.ВыполнитьПросмотр Тогда Возврат КонецЕсли;
	ИначеЕсли Операция<>4 И Операция<>9 Тогда //Разбить
		ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКВыходномуФайлу);
	КонецЕсли;
	
	Если Операция=1 Тогда //Изменить размерность
	ИначеЕсли Операция=2 Тогда //Удалить элементы
	ИначеЕсли Операция=3 Тогда //Объединить массивы
	ИначеЕсли Операция=4 Тогда //Разбить
		Если ДополнительныеПараметры.ПутьКВыходномуФайлу<>"" Тогда
			ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКВыходномуФайлу);
		КонецЕсли;
		Если ДополнительныеПараметры.ПутьКПромежуточномуФайлу<>"" Тогда
			ДобавитьФайлВТаблицуМассивы(ДополнительныеПараметры.ПутьКПромежуточномуФайлу);
		КонецЕсли;
	ИначеЕсли Операция=5 Тогда //Переставить
	ИначеЕсли Операция=6 Тогда //Транспонировать
	ИначеЕсли Операция=7 Тогда //Изменить тип
	ИначеЕсли Операция=8 Тогда //
	ИначеЕсли Операция=9 Тогда //Произвольная
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВТаблицуМассивы(ПутьКФайлу)
	Отбор = Новый Структура;
	Отбор.Вставить("ПутьКФайлу", ПутьКФайлу);
	Строки = Объект.Массивы.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 Тогда 
		НоваяСтрока = Строки[0];
	Иначе	
		НоваяСтрока = Объект.Массивы.Добавить();
		НоваяСтрока.ПутьКФайлу = ПутьКФайлу;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюЗавершение", ЭтотОбъект, НоваяСтрока.ПолучитьИдентификатор());
	Нейро_РаботаСФайлами.ПолучитьИнформациюИзФайлаNPY(НоваяСтрока.ПутьКФайлу, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МассивыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	Если МассивВыбор=0 Тогда
		Массив1=Элемент.ТекущиеДанные.ИмяФайла;
		Если ВходнойЭтоВыходной Тогда
			Объект.ПутьКФайлу=Элемент.ТекущиеДанные.ПутьКФайлу;
		КонецЕсли;
	ИначеЕсли МассивВыбор=1 Тогда
		Массив2=Элемент.ТекущиеДанные.ИмяФайла;
		Если ВходнойЭтоВыходной Тогда
			Если Операция=4 Тогда //Разбить
				Объект.ПромежуточныйФайл=Элемент.ТекущиеДанные.ПутьКФайлу;
			Иначе
				Объект.ПутьКФайлу=Элемент.ТекущиеДанные.ПутьКФайлу;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МассивУдалитьВсюОсьПриИзменении(Элемент)
	//Элементы.МассивУдалитьСписокИндексов.Видимость=НЕ МассивУдалитьВсюОсь;
	//Элементы.МассивУдалитьБезОси.Видимость=НЕ МассивУдалитьВсюОсь;
	ИзменитьВидимостьЭлементовФормыМассивNPY()	
КонецПроцедуры

&НаКлиенте
Процедура МассивОбъединитьСпособПриИзменении(Элемент)
	Элементы.ГруппаОбъединитьСпособПодсказка.Видимость=МассивОбъединитьСпособ<4;
	Элементы.МассивОбъединитьОсь.Видимость=МассивОбъединитьСпособ=5;
	Элементы.МассивОбъединитьНоваяОсь.Видимость=МассивОбъединитьСпособ=4;
	Если МассивОбъединитьСпособ=0 Или МассивОбъединитьСпособ=1 Или МассивОбъединитьСпособ=3 Тогда //hstack, vstack, dstack
		Элементы.Декорация2.Заголовок="Эта функция наиболее удобна для массивов до 3-х измерений";
	ИначеЕсли МассивОбъединитьСпособ=2 Тогда //column_stack
		Элементы.Декорация2.Заголовок="Только одно-двумерные массивы";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МассивУдалитьБезОсиПриИзменении(Элемент)
	ИзменитьВидимостьЭлементовФормыМассивNPY()
КонецПроцедуры

&НаКлиенте
Процедура МассивРазделитьСпособПриИзменении(Элемент)
	ИзменитьВидимостьЭлементовФормыМассивNPY()
КонецПроцедуры

&НаКлиенте
Процедура МассивПромежуточныйФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ПутьКФайлу=МассивПромежуточныйФайл;
	Поз=СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если Поз>0 Тогда
		ДиалогОткрытияФайла.Каталог=Лев(ПутьКФайлу, Поз)
	КонецЕсли;
	ДиалогОткрытияФайла.ПолноеИмяФайла = МассивПромежуточныйФайл;
	Фильтр = "Текстовые файлы (*.txt)|*.txt|Все файлы (*.*)|*.*";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Укажите имя промежуточного файла для просмотра массива";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораПромежуточногоФайлаПросмотра", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораПромежуточногоФайлаПросмотра(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	МассивПромежуточныйФайл = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура МассивыПросмотр(Команда)
	Если Элементы.Массивы.ТекущиеДанные=Неопределено Тогда Возврат КонецЕсли;
	МассивИзмерений = СтрРазделить(Элементы.Массивы.ТекущиеДанные.Форма,",");
	Если НЕ ПлоскийПросмотр И МассивИзмерений.Количество()>2 Тогда
		МассивПросмотр=СтрРазделить(ПросмотрИндексыИзмерений,",",Ложь);
		СтрокаСписок="";
		Для Сч=0 По МассивИзмерений.Количество()-1 Цикл
			Если СтрокаСписок<>"" Тогда СтрокаСписок=СтрокаСписок+", " КонецЕсли;
			Если МассивПросмотр.Количество()=0 Или 
				МассивПросмотр.Количество()-1<Сч Тогда
				СтрокаСписок=СтрокаСписок+"0"
			Иначе 
				СтрокаСписок=СтрокаСписок+СокрЛП(МассивПросмотр[Сч])
			КонецЕсли;
		КонецЦикла;
		ОповещениеВвода = Новый ОписаниеОповещения("ПослеВводаСтрокиПросмотр",ЭтотОбъект);
		ПоказатьВводСтроки(ОповещениеВвода, СтрокаСписок, "Индексы через запятую либо двоеточие. Например: 0,:,:");
		Возврат;
	КонецЕсли;
	ТолькоПросмотреть=Истина;
	ВыполнитьОперациюНадМассивомNumpy(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтрокиПросмотр(Строка, ДополнительныеПараметры) Экспорт
	Если Строка=Неопределено Тогда Возврат КонецЕсли;
	ПросмотрИндексыИзмерений = Строка;
	ТолькоПросмотреть=Истина;
	ВыполнитьОперациюНадМассивомNumpy(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВходнойЭтоВыходнойПриИзменении(Элемент)
	Если ВходнойЭтоВыходной Тогда
		МассивыПриАктивизацииСтроки(Элементы.Массивы)
	ИначеЕсли Элементы.Массивы.ТекущиеДанные<>Неопределено Тогда
		Если МассивВыбор=0 Тогда
			Объект.ПутьКФайлу=Элементы.Массивы.ТекущиеДанные.ПутьКФайлу;
		ИначеЕсли МассивВыбор=1 Тогда
			Если Операция=4 Тогда //Разбить
				Объект.ПромежуточныйФайл=Элементы.Массивы.ТекущиеДанные.ПутьКФайлу;
			Иначе
				Объект.ПутьКФайлу=Элементы.Массивы.ТекущиеДанные.ПутьКФайлу;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МассивТранспонироватьПоОсямПриИзменении(Элемент)
	ИзменитьВидимостьЭлементовТранспонировать();
КонецПроцедуры

Процедура ИзменитьВидимостьЭлементовТранспонировать()
	Элементы.МассивТранспонироватьОси.Видимость=МассивТранспонироватьПоОсям;
	Элементы.МассивТранспонироватьИнвертировать.Видимость=МассивТранспонироватьПоОсям;
	Элементы.Декорация9.Видимость=МассивТранспонироватьПоОсям;
КонецПроцедуры

&НаКлиенте
Процедура ТекстДлинаПоследовательностиПриИзменении(Элемент)
	//Элементы.ТекстМестоДополнения.Видимость=(Объект.ТекстПреобразовать=0 И Объект.ТекстДлинаПоследовательности>0);
	Элементы.ТекстМестоУсечения.Видимость=(Объект.ТекстПоследовательности И Объект.ТекстДлинаПоследовательности>0);
КонецПроцедуры

&НаКлиенте
Процедура МассивПромежуточныйФайлОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеОткрытияФайлаИсточника", ЭтотОбъект);
	НачатьЗапускПриложения(ОпОп, МассивПромежуточныйФайл);
КонецПроцедуры

&НаКлиенте
Процедура Массив1ПриИзменении(Элемент)
	Если ВходнойЭтоВыходной Тогда
		Отбор=Новый Структура("ИмяФайла", Массив1);
		Строки = Объект.Массивы.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Объект.ПутьКФайлу=Строки[0].ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Массив2ПриИзменении(Элемент)
	Если ВходнойЭтоВыходной Тогда
		Отбор=Новый Структура("ИмяФайла", Массив2);
		Строки = Объект.Массивы.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Объект.ПутьКФайлу=Строки[0].ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МассивВыборПриИзменении(Элемент)
	Если ВходнойЭтоВыходной Тогда
		Отбор=Новый Структура("ИмяФайла", ?(МассивВыбор=0,Массив1,Массив2));
		Строки = Объект.Массивы.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			Объект.ПутьКФайлу=Строки[0].ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура ПродолжитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	//Успшено
//КонецПроцедуры

&НаКлиенте
Процедура ОшибкаВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#Область ЗаполнитьИзображения

&НаКлиенте
Процедура ЗаполнитьИзображения(Команда)
	//Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"  +
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог=Объект.КаталогТекстов;
	//ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.КаталогТекстов;
	ДиалогОткрытияФайла.Заголовок = "Укажите каталог с файлами";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораКаталогаЗаполнитьИзображения", ЭтотОбъект, "*.*");
	ДиалогОткрытияФайла.Показать(ОпОп);
	//ЗаполнитьТЧДанные("*.jpg;*.png;*.gif;*.bmp")
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораКаталогаЗаполнитьИзображения(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ОпОп = Новый ОписаниеОповещения("ПослеПоискаФайловВКаталоге2", ЭтотОбъект, 0);
	НачатьПоискФайлов(ОпОп, ВыбранныеФайлы[0], ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаФайловВКаталоге2(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	МассивРасширений=Новый Массив;
	МассивРасширений.Добавить(".bmp");
	МассивРасширений.Добавить(".dib");
	МассивРасширений.Добавить(".rle");
	МассивРасширений.Добавить(".jpg");
	МассивРасширений.Добавить(".jpeg");
	МассивРасширений.Добавить(".tif");
	МассивРасширений.Добавить(".gif");
	МассивРасширений.Добавить(".png");
	МассивРасширений.Добавить(".ico");
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Если МассивРасширений.Найти(НайденныйФайл.Расширение)=Неопределено Тогда Продолжить КонецЕсли;
		СтрокаДанные = Объект.Данные.Добавить();
		СтрокаДанные.ПутьКФайлу = НайденныйФайл.ПолноеИмя;
		СтрокаДанные.Колонка = ДополнительныеПараметры;
		СтрокаДанные.Расширение = НайденныйФайл.Расширение;
		Если НЕ Объект.ТипДанных.Пустая() Тогда
			СтрокаДанные.ТипДанных = Объект.ТипДанных;
		КонецЕсли;
	КонецЦикла;
	ИндексДеления=Окр(Объект.Данные.Количество() * ВыделятьДляКонтроля);
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияСоздатьКлассификаторИзПапок(Команда)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог=Объект.КаталогТекстов;
	ДиалогОткрытияФайла.Заголовок = "Укажите папку";	
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ОпОп = Новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбораКаталогаСоздатьКлассификаторИзПапок", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОпОп);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораКаталогаСоздатьКлассификаторИзПапок(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда Возврат КонецЕсли;
	ОпОп = Новый ОписаниеОповещения("ПослеПоискаПапокИзображений", ЭтотОбъект, "*.*");
	НачатьПоискФайлов(ОпОп, ВыбранныеФайлы[0], "*.*");
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаПапокИзображений(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	КлассыИзображений.Очистить();
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзображенияПослеПроверкиЭтоКаталог", ЭтотОбъект, НайденныйФайл);
		НайденныйФайл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияПослеПроверкиЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	Если ЭтоКаталог Тогда
		НомерКласса = КлассыИзображений.Количество();
		НоваяСтрока = КлассыИзображений.Добавить();
		НоваяСтрока.НомерКласса = НомерКласса;
		НоваяСтрока.ИмяПапки = ДополнительныеПараметры.Имя;
		НоваяСтрока.Путь = ДополнительныеПараметры.ПолноеИмя;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияИзменитьКлассификатор(Команда)
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("КлассыИзображений", КлассыИзображений);
	Оп = Новый ОписаниеОповещения("ПослеЗакрытияФормыКлассовИзображений", ЭтотОбъект);
	ОткрытьФорму("Обработка.Нейро_КонвертерДанных.Форма.ФормаКлассыИзображений", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыКлассовИзображений(Результат, ДополнительныеПараметры) Экспорт
	Если Результат=Неопределено Тогда Возврат КонецЕсли;
	КлассыИзображений.Очистить();
	Для Каждого СтрокаИз Из Результат Цикл
		НоваяСтрока = КлассыИзображений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИз);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияЗагрузитьПоКлассификатору(Команда)
	Для Каждого СтрокаТЗ Из КлассыИзображений Цикл
		ОпОп = Новый ОписаниеОповещения("ПослеПоискаФайловВКаталоге2", ЭтотОбъект, СтрокаТЗ.НомерКласса);
		НачатьПоискФайлов(ОпОп, СтрокаТЗ.Путь, "*.*");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияПеремешатьДанные(Команда)
	ИзображенияПеремешатьДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзображенияПеремешатьДанныеНаСервере()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПеремешатьСтроки();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	//Объект.Данные.Про
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыделятьДляКонтроляПриИзменении(Элемент)
	ИндексДеления=Окр(Объект.Данные.Количество() * ВыделятьДляКонтроля);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоследовательностиПриИзменении(Элемент)
	Элементы.ТекстДлинаПоследовательности.Видимость=(Объект.ТекстПоследовательности);
	//Элементы.ТекстМестоДополнения.Видимость=(Объект.ТекстПоследовательности И Объект.ТекстДлинаПоследовательности>0);
	Элементы.ТекстМестоДополнения.Видимость=Объект.ТекстПоследовательности;
	Элементы.ТекстМестоУсечения.Видимость=(Объект.ТекстПоследовательности И Объект.ТекстДлинаПоследовательности>0);
КонецПроцедуры

&НаКлиенте
Процедура ТекстСоздаватьМеткиПриИзменении(Элемент)
	Элементы.ДанныеТекстПоКлассам.Видимость=Объект.ТекстСоздаватьМетки;
	Элементы.ПромежуточныйФайл.Видимость=Объект.ТекстСоздаватьМетки;
КонецПроцедуры


&НаКлиенте
Процедура ТекстИзменитьКлассификатор(Команда)
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("КлассыИзображений", КлассыТекстов);
	Оп = Новый ОписаниеОповещения("ПослеЗакрытияФормыКлассовТекстов", ЭтотОбъект);
	ОткрытьФорму("Обработка.Нейро_КонвертерДанных.Форма.ФормаКлассыИзображений", ПараметрыД, ЭтотОбъект, Истина, , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыКлассовТекстов(Результат, ДополнительныеПараметры) Экспорт
	Если Результат=Неопределено Тогда Возврат КонецЕсли;
	КлассыТекстов.Очистить();
	Для Каждого СтрокаИз Из Результат Цикл
		НоваяСтрока = КлассыТекстов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИз);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТекстСоздатьКлассификаторИзПапок(Команда)
	КлассыТекстов.Очистить();
	Если Объект.ТекстИзКаталога Тогда
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			ОпОп = Новый ОписаниеОповещения("ПослеПоискаПапокТекстов", ЭтотОбъект, "*.*");
			НачатьПоискФайлов(ОпОп, СтрокаДанные.ПутьКФайлу, "*.*");
		КонецЦикла;
	Иначе
		Для Каждого СтрокаДанные Из Объект.Данные Цикл
			НоваяСтрока = КлассыТекстов.Добавить();
			НоваяСтрока.НомерКласса = 0;
			Файл = Новый Файл(СтрокаДанные.ПутьКФайлу);
			НоваяСтрока.ИмяПапки = Файл.Имя;
			НоваяСтрока.Путь = СтрокаДанные.ПутьКФайлу;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоискаПапокТекстов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		ОписаниеОповещения = Новый ОписаниеОповещения("ТекстыПослеПроверкиЭтоКаталог", ЭтотОбъект, НайденныйФайл);
		НайденныйФайл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТекстыПослеПроверкиЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	Если ЭтоКаталог Тогда
		НомерКласса = КлассыТекстов.Количество();
		НоваяСтрока = КлассыТекстов.Добавить();
		НоваяСтрока.НомерКласса = НомерКласса;
		НоваяСтрока.ИмяПапки = ДополнительныеПараметры.Имя;
		НоваяСтрока.Путь = ДополнительныеПараметры.ПолноеИмя;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПроизвольнаяДобавить(Команда)
	СписокФайлов = Новый Массив;
	Для Каждого Ид Из Элементы.Массивы.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.Массивы.НайтиПоИдентификатору(Ид);
		Если СтрокаТЧ.ПутьКФайлу<>"" Тогда
			СписокФайлов.Добавить(СтрокаТЧ.ПутьКФайлу);
		КонецЕсли;
	КонецЦикла;
	Если СписокФайлов.Количество()=0 Тогда Возврат КонецЕсли;
	ПроизвольнаяТекст = Нейро_ПодготовкаДанныхНаСервере.ДобавитьТекстЗагрузкиМассиваNPY(СписокФайлов, ПроизвольнаяТекст);
КонецПроцедуры
